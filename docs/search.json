[{"path":"mcanigueral.github.io/flextools/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"mcanigueral.github.io/flextools/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"mcanigueral.github.io/flextools/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"mcanigueral.github.io/flextools/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"mcanigueral.github.io/flextools/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"mcanigueral.github.io/flextools/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"mcanigueral.github.io/flextools/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"mcanigueral.github.io/flextools/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"mcanigueral.github.io/flextools/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"mcanigueral.github.io/flextools/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"mcanigueral.github.io/flextools/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"mcanigueral.github.io/flextools/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"mcanigueral.github.io/flextools/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"mcanigueral.github.io/flextools/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"mcanigueral.github.io/flextools/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"mcanigueral.github.io/flextools/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"mcanigueral.github.io/flextools/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"mcanigueral.github.io/flextools/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"mcanigueral.github.io/flextools/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"mcanigueral.github.io/flextools/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"mcanigueral.github.io/flextools/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2020 evflex  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. evflex Copyright (C) 2020 evflex This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"mcanigueral.github.io/flextools/articles/combined_optimization.html","id":"demand-optimization","dir":"Articles","previous_headings":"","what":"Demand optimization","title":"Combined optimization","text":"minimize energy cost using flexibility power demand profile, objective function optimization problem raised following way: \\[ min \\sum_{t=1}^{T} w·((LS_t + O_t - G_t)· \\frac{\\sum_{t=1}^{T}PI_t}{T})^2 + (1-w)·(I_t·PI_t - E_t·PE_t - PTU_t(O_t-LF_t)  - PTD_t(LF_t-O_t)) + \\lambda (O_t-LF_t)^{2} \\] Note , contrast Net power optimization problem, add average imported energy price \\(\\frac{\\sum_{t=1}^{T}PI_t}{T}\\) equation convert power units cost units balance value ranges multiple terms equation. objective function constraints optimization problem represented , : \\(T\\) : Number time intervals within optimization window \\(G_t\\) : Local power generation time-series vector \\(LS_t\\) : Non-flexible load time-series vector \\(LF_t\\) : Flexible load time-series vector (optimized) \\(O_t\\) : Optimal flexible load time-series vector \\(I_t\\) : imported energy \\(E_t\\) : exported energy \\(PI_t\\) : imported energy price \\(PE_t\\) : exported energy price \\(PTU_t\\) : balancing price turn-power \\(PTD_t\\) : balancing price turn-power \\(\\lambda\\) : penalty change flexible load","code":""},{"path":"mcanigueral.github.io/flextools/articles/combined_optimization.html","id":"battery-optimization","dir":"Articles","previous_headings":"","what":"Battery optimization","title":"Combined optimization","text":"minimize energy cost using flexibility battery, objective function optimization problem raised following way: \\[ min \\sum_{t=1}^{T} w·((L_t + B_t - G_t)· \\frac{\\sum_{t=1}^{T}PI_t}{T})^2 + (1-w)·(I_t·PI_t - E_t·PE_t - PTU_t·B_t  - PTD_t·(-B_t)) + \\lambda \\sum_{t=1}^{T-1}(B_{t+1} - B_t)^{2} \\] : \\(T\\) : Number time intervals within optimization window \\(G_t\\) : Local power generation time-series vector \\(L_t\\) : Power load time-series vector \\(B_t\\) : Optimal battery power time-series vector. Positive charging, negative discharging. \\(I_t\\) : imported energy \\(E_t\\) : exported energy \\(PI_t\\) : imported energy price \\(PE_t\\) : exported energy price \\(PTU_t\\) : balancing price turn-power \\(PTD_t\\) : balancing price turn-power \\(\\lambda\\) : penalty change flexible load","code":""},{"path":"mcanigueral.github.io/flextools/articles/flextools.html","id":"net-power-minimization","dir":"Articles","previous_headings":"","what":"Net power minimization","title":"Introduction to flextools","text":"minimize energy exchanged distribution grid maximizing use local generation, using flexibility power demand profile (e.g. heatpumps, electric vehicles, etc.) battery, make use Quadratic programming obtain optimal setpoints flexible assets. See article Net power optimization learn problem formulation demand flexbility battery flexibility. , can find examples applications.","code":""},{"path":"mcanigueral.github.io/flextools/articles/flextools.html","id":"demand-flexibility","dir":"Articles","previous_headings":"Net power minimization","what":"Demand flexibility","title":"Introduction to flextools","text":"Let’s consider building demand profile flexible can optimized. , create new column flexible opt_data tibble order tell optimization function flexible load. Since want perform net power minimization, set opt_objective = \"grid\" example shift energy forward: see power demand peak hours (18:00 - 22:00) still high since can’t postpone energy midnight (optimization window 00:00 00:00 default). can try setting optimization window 5:00AM 5:00AM: power peak reduction evening peak hours much relevant now.","code":"opt_building <- opt_data %>%    mutate(     flexible = building   ) %>%    optimize_demand(     opt_objective = \"grid\",     direction = \"forward\"   ) opt_building <- opt_data %>%    mutate(     flexible = building   ) %>%    optimize_demand(     opt_objective = \"grid\",     direction = \"forward\",     window_start_hour = 5   )"},{"path":"mcanigueral.github.io/flextools/articles/flextools.html","id":"battery-flexibility","dir":"Articles","previous_headings":"Net power minimization","what":"Battery flexibility","title":"Introduction to flextools","text":"Instead using building can use battery, considering capacity 50kWh charge/discharge power 4kW. See now use building column static avoid optimizing building profile:","code":"opt_battery <- opt_data %>%    mutate(     static = building   ) %>%   add_battery_optimization(     opt_objective = \"grid\",     Bcap = 50, Bc = 10, Bd = 4,     window_start_hour = 5   )"},{"path":"mcanigueral.github.io/flextools/articles/flextools.html","id":"cost-minimization","dir":"Articles","previous_headings":"","what":"Cost minimization","title":"Introduction to flextools","text":"minimize energy cost maximizing income imbalance markets, using flexibility power demand profile (e.g. heatpumps, electric vehicles, etc.) battery, make use Quadratic programming obtain optimal setpoints flexible assets. See article Energy cost optimization learn problem formulation demand flexbility battery flexibility. , can find examples applications.","code":""},{"path":"mcanigueral.github.io/flextools/articles/flextools.html","id":"demand-flexibility-1","dir":"Articles","previous_headings":"Cost minimization","what":"Demand flexibility","title":"Introduction to flextools","text":"Imagine source flexibility building heat-pump water tank storage. Therefore, case shift energy backward store hot water tank. perform cost optimization, now set opt_objective = \"cost\": see lot power demand concentrated price lower values obtain minimum energy cost. behavior can constrained multiple ways: Define maximum load power: can done adding variable load_capacity opt_data parameter optimization function Define maximum grid (net) power: can done adding variable grid_capacity opt_data parameterin optimization function Use penalty change: can done using lambda parameter optimization function example, let’s consider maximum power demand 5kW lambda = 0.005:","code":"opt_building <- opt_data %>%    select(datetime, production, building, price_imported, price_exported) %>%    mutate(     flexible = building   ) %>%    optimize_demand(     opt_objective = \"cost\",     direction = \"backward\"   ) opt_building <- opt_data %>%    select(datetime, production, building, price_imported, price_exported) %>%    mutate(     flexible = building,     load_capacity = 5   ) %>%    optimize_demand(     opt_objective = \"cost\",     direction = \"backward\",     lambda = 0.005   )"},{"path":"mcanigueral.github.io/flextools/articles/flextools.html","id":"battery-flexibility-1","dir":"Articles","previous_headings":"Cost minimization","what":"Battery flexibility","title":"Introduction to flextools","text":"example can done battery, considering capacity 50kWh charge/discharge power 4kW. See now use building column static avoid optimizing building profile: Since example considers constant exported energy price, can appreciate battery discharges imported price goes , charges imported prices goes . Moreover, can see charging hours mainly solar production times, minimize imported/exported energy. However, see price fluctuation makes increase variability battery profile. avoid switching charging discharging small periods time, lambda parameter introduced problem formulation. Thus lambda > 0, penalty changes battery power consecutive time-slots. case, value lambda = 0.1 gives reasonable results: find optimal lambda, can apply iteration multiple values calculate two significant indicators: energy cost (lower better) crossover times, times battery shifted charging discharging (lower better). following plot shows normalized values (0 1) two indicators according lambda value: consider optimal lambda “knee” curves, approximately lamda=0.1 used . Now let’s consider prices imbalance market, assuming income thanks providing flexibility power system. can appreciate battery charging discharging following imbalance prices, specially “turn-price” high values certain periods:","code":"opt_battery <- opt_data %>%    select(datetime, production, building, price_imported, price_exported) %>%    mutate(     static = building   ) %>%   add_battery_optimization(     opt_objective = \"cost\",     Bcap = 50, Bc = 4, Bd = 4,     window_start_hour = 5   ) opt_battery <- opt_data %>%    select(datetime, production, building, price_imported, price_exported) %>%    mutate(     static = building   ) %>%   add_battery_optimization(     opt_objective = \"cost\",     Bcap = 50, Bc = 4, Bd = 4,     window_start_hour = 5,     lambda = 0.1   ) opt_battery <- opt_data %>%    select(datetime, production, building, price_imported, price_exported, price_turn_up, price_turn_down) %>%    mutate(     static = building   ) %>%   add_battery_optimization(     opt_objective = \"cost\",     Bcap = 50, Bc = 4, Bd = 4,     window_start_hour = 5,     lambda = 0.1   )"},{"path":"mcanigueral.github.io/flextools/articles/flextools.html","id":"combined-objectives","dir":"Articles","previous_headings":"","what":"Combined objectives","title":"Introduction to flextools","text":"minimize energy cost impact distribution grid, using flexibility power demand profile (e.g. heatpumps, electric vehicles, etc.) battery, make use Quadratic programming obtain optimal setpoints flexible assets. See article Combined optimization learn problem formulation demand flexbility battery flexibility. , can find examples applications.","code":""},{"path":"mcanigueral.github.io/flextools/articles/flextools.html","id":"demand-flexibility-2","dir":"Articles","previous_headings":"Combined objectives","what":"Demand flexibility","title":"Introduction to flextools","text":"parameter opt_objective can \"grid\", \"cost\" number 0 1, 0 equivalent “cost” 1 equivalent “grid”. Thus, opt_objective number, optimization problem combines objectives. show effect term, can calculate demand profiles corresponding three different values opt_objective: see production hours three profiles follow PV production much possible, differ periods prices fluctuates . also caused difference constant low export price high variable import price.","code":"opt_building <- purrr::map(   list(objective_0.25 = 0.25, objective_0.5 = 0.5, objective_0.75 = 0.75),   ~ opt_data %>%      select(datetime, production, building, price_imported, price_exported) %>%      mutate(       flexible = building     ) %>%      optimize_demand(       opt_objective = .x,       direction = \"forward\"     ) ) %>%    as_tibble()"},{"path":"mcanigueral.github.io/flextools/articles/flextools.html","id":"battery-flexibility-2","dir":"Articles","previous_headings":"Combined objectives","what":"Battery flexibility","title":"Introduction to flextools","text":"example can done battery, considering capacity 50kWh charge/discharge power 4kW. See now use building column static avoid optimizing building profile: interesting outcome simulation combining objectives also smoothes effect price fluctuation battery profile. Since now also important reduce impact distribution network, now lambda required.","code":"opt_battery <- purrr::map(   list(objective_0.25 = 0.25, objective_0.5 = 0.5, objective_0.75 = 0.75),   ~ opt_data %>%      select(datetime, production, building, price_imported, price_exported) %>%      mutate(       static = building     ) %>%     add_battery_optimization(       opt_objective = .x,       Bcap = 50, Bc = 4, Bd = 4,       window_start_hour = 5     ) ) %>%    as_tibble()"},{"path":"mcanigueral.github.io/flextools/articles/minimize_cost.html","id":"demand-optimization","dir":"Articles","previous_headings":"","what":"Demand optimization","title":"Energy cost optimization","text":"minimize energy cost using flexibility power demand profile, objective function optimization problem raised following way: \\[ min \\sum_{t=1}^{T} I_t·PI_t - E_t·PE_t - PTU_t(O_t-LF_t)  - PTD_t(LF_t-O_t) + \\lambda (O_t-LF_t)^{2} \\] objective function constraints optimization problem represented , : \\(T\\) : Number time intervals within optimization window \\(G_t\\) : Local power generation time-series vector \\(LS_t\\) : Non-flexible load time-series vector \\(LF_t\\) : Flexible load time-series vector (optimized) \\(O_t\\) : Optimal flexible load time-series vector \\(I_t\\) : imported energy \\(E_t\\) : exported energy \\(PI_t\\) : imported energy price \\(PE_t\\) : exported energy price \\(PTU_t\\) : balancing price turn-power \\(PTD_t\\) : balancing price turn-power \\(\\lambda\\) : penalty change flexible load Moreover, optimization problem following constraints: energy consumed flexible load must remain expected behavior: \\[ \\sum_{t=1}^T O_t \\Delta t = \\sum_{t=1}^T LF_t \\Delta t \\] Optimal flexible load must lower certain maximum power \\(LF_{max}\\): \\[ 0 \\le O_t \\le LFmax_t \\quad t \\T \\] energy balance generation loads must lower grid capacity \\(GC_t\\): \\[ 0 \\le O_t \\le GC_t + G_t - LS_t \\quad t \\T \\] imported energy must remain 0 corresponding energy consumed maximum grid capacity: \\[ 0 \\le I_t \\le GC_t \\Delta t \\quad t \\T \\] exported energy must remain 0 power generation: \\[ 0 \\le E_t \\le G_t \\Delta t \\quad t \\T \\] Energy balance behind--meter: \\[ I_t - E_t = O_t + LS_t - G_t \\] time, can optimize flexible energy demand two opposite approaches: Postpone consumption later time-slots (shift energy forward) Consume now (store) energy consumed later (shift energy backward) consider approaches different objectives applications. energy shift always done within maximum time horizon (\\(h\\)) consider realistic scenarios. example, time horizon energy demand water boiler time horizon 6 hours, wouldn’t make sense heat water 6 hours final consumption. one approaches brings extra constraints optimization problem: energy can shifted forward: cumulative sum optimal load \\(O\\) must higher cumulative sum original flexible load \\(LF\\) except last \\(h\\) time slots, lower total cumulative sum original flexible load \\(LF\\) (energy can shifted forwards): \\[ \\sum_{t = 1}^{u-h} LF_t \\le \\sum_{t=1}^u O_t \\le \\sum_{t=1}^u LF_t \\quad u = 1 \\dots T \\] maximum values optimal demand \\(O_t\\) depend time horizon \\(h\\): \\[ O_u \\le \\sum_{t = u-h}^u LF_t \\quad u = 1 \\dots T \\] energy can shifted backward: cumulative sum optimal demand \\(O\\) must higher total cumulative sum original demand \\(LF\\) (energy can shifted backwards), lower cumulative sum original demand \\(LF\\) except following \\(h\\) time slots: \\[ \\sum_{t=1}^u LF_t \\le \\sum_{t=1}^u O_t \\le \\sum_{t=1}^{u+h} LF_t \\quad u = 1 \\dots T \\] maximum values optimal demand \\(O_t\\) depend time horizon \\(h\\): \\[ O_u \\le \\sum_{t = u}^{u+h} LF_t \\quad u = 1 \\dots T \\]","code":""},{"path":"mcanigueral.github.io/flextools/articles/minimize_cost.html","id":"battery-optimization","dir":"Articles","previous_headings":"","what":"Battery optimization","title":"Energy cost optimization","text":"minimize energy cost using flexibility battery, objective function optimization problem raised following way: \\[ min \\sum_{t=1}^{T} I_t·PI_t - E_t·PE_t - PTU_t·B_t  - PTD_t·(-B_t) + \\lambda \\sum_{t=1}^{T-1}(B_{t+1} - B_t)^{2} \\] : \\(T\\) : Number time intervals within optimization window \\(G_t\\) : Local power generation time-series vector \\(L_t\\) : Power load time-series vector \\(B_t\\) : Optimal battery power time-series vector. Positive charging, negative discharging. \\(I_t\\) : imported energy \\(E_t\\) : exported energy \\(PI_t\\) : imported energy price \\(PE_t\\) : exported energy price \\(PTU_t\\) : balancing price turn-power \\(PTD_t\\) : balancing price turn-power \\(\\lambda\\) : penalty change flexible load Additionally, optimization problem also counts following parameters used constraints : \\(B_{cap}\\) : Battery capacity \\(B_c\\) : Maximum charging power \\(B_d\\) : Maximum discharging power \\(SOC_{min}\\) : Minimum state charge battery \\(SOC_{max}\\) : Maximum state charge battery \\(SOC_{ini}\\) : state charge beginning/end optimization window Optimization constraints: Battery power (positive = charging, negative = discharging) limits: \\[ -B_d \\le B_t \\le B_c \\quad t \\T \\] State charge limits: \\[ SOC_{min} \\le SOC_{ini} + \\frac{\\sum_{t=1}^T B_t \\Delta t}{B_{cap}} \\le SOC_{max} \\quad t \\T \\] balance charged/discharge energy must 0 end optimization window initial state charge beginning every optimization window: \\[ \\sum_{t=1}^T B_t \\Delta t = 0 \\] imported energy must remain 0 corresponding energy consumed maximum grid capacity \\(GC_t\\): \\[ 0 \\le I_t \\le GC_t \\Delta t \\quad t \\T \\] exported energy must remain 0 power generation (allows battery discharge importing hours): \\[ 0 \\le E_t \\le G_t \\Delta t \\quad t \\T \\] Energy balance behind--meter: \\[ I_t - E_t = B_t + L_t - G_t \\]","code":""},{"path":"mcanigueral.github.io/flextools/articles/minimize_cost_battery.html","id":"problem-formulation","dir":"Articles","previous_headings":"","what":"Problem formulation","title":"Energy cost minimization with battery","text":"energy cost optimization takes account multiple profiles energy prices objective minimize total cost, considering: Imported energy cost Exported energy income Balancing market prices (income turn /demand) objective function constraints optimization problem represented , : \\(T\\) : Number time intervals within optimization window \\(G_t\\) : Local power generation time-series vector \\(L_t\\) : Power load time-series vector \\(B_t\\) : Optimal battery power time-series vector. Positive charging, negative discharging. \\(I_t\\) : imported energy \\(E_t\\) : exported energy \\(PI_t\\) : imported energy price \\(PE_t\\) : exported energy price \\(PTU_t\\) : balancing price turn-power \\(PTD_t\\) : balancing price turn-power \\(\\lambda\\) : penalty change flexible load \\(GC_t\\) : Grid power capacity time-series vector \\(B_{cap}\\) : Battery capacity \\(B_c\\) : Maximum charging power \\(B_d\\) : Maximum discharging power \\(SOC_{min}\\) : Minimum state charge battery \\(SOC_{max}\\) : Maximum state charge battery \\(SOC_{ini}\\) : state charge beginning/end optimization window Objective function optimization problem: \\[ min \\sum_{t=1}^{T} I_t·PI_t - E_t·PE_t - PTU_t·B_t  - PTD_t·(-B_t) + \\lambda \\sum_{t=1}^{T-1}(B_{t+1} - B_t)^{2} \\] Moreover, optimization problem following constraints: Battery power (positive = charging, negative = discharging) limits: \\[ -B_d \\le B_t \\le B_c \\quad t \\T \\] State charge limits: \\[ SOC_{min} \\le SOC_{ini} + \\frac{\\sum_{t=1}^T B_t \\Delta t}{B_{cap}} \\le SOC_{max} \\quad t \\T \\] balance charged/discharge energy must 0 end optimization window initial state charge beginning every optimization window: \\[ \\sum_{t=1}^T B_t \\Delta t = 0 \\] imported energy must remain 0 corresponding energy consumed maximum grid capacity: \\[ 0 \\le I_t \\le GC_t \\Delta t \\quad t \\T \\] exported energy must remain 0 power generation (allows battery discharge importing hours): \\[ 0 \\le E_t \\le G_t \\Delta t \\quad t \\T \\] Energy balance behind--meter: \\[ I_t - E_t = B_t + L_t - G_t \\]","code":""},{"path":"mcanigueral.github.io/flextools/articles/minimize_cost_battery.html","id":"quadratic-programming","dir":"Articles","previous_headings":"","what":"Quadratic programming","title":"Energy cost minimization with battery","text":"Considering objective function problem quadratic terms, Quadratic Programming algorithm must used. case used R package osqp, visit website information. form quadratic problem : \\[   \\begin{array}{ll}   \\text{minimize} & \\mathrm (1/2) x^\\top \\mathrm P \\, \\mathrm x + \\mathrm q^{\\top} \\mathrm x \\\\   \\text{subject } & \\mathrm l \\leq \\mathrm Ax \\leq \\mathrm u   \\end{array} \\] OSQP function osqp::solve_osqp(P, q, , l, u) requires parameters P, q, , l u. parameters must extracted problem formulation, developing objective function can create P q constraints can create , l u. : \\[ P = 2 · \\lambda · H \\] \\[ q = PTD - PTU + PI - PE \\] \\(H\\) matrix corresponding smoothing term (penalty change) objective function: \\(\\lambda \\sum_{t=1}^{T-1} (B_{t+1} - B_t)^2\\).","code":""},{"path":"mcanigueral.github.io/flextools/articles/minimize_cost_battery.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Energy cost minimization with battery","text":"Package flextools provides example data set time-series energy prices profiles test functions, called energy_profiles. filter whole data set just single week, rename variables custom names fit column names required flextools functions: week, building energy consumption profile (now called static) solar PV production profile (called production), together prices imported exported energy imbalance market: Now, let’s add optimal battery profile different scenarios, considering capacity 50kWh charge/discharge power 4kW.","code":"opt_data <- energy_profiles %>%    filter(isoweek(datetime) == 18) %>%    rename(     production = solar,      static = building   )"},{"path":"mcanigueral.github.io/flextools/articles/minimize_cost_battery.html","id":"minimize-energy-cost-without-imbalance-market","dir":"Articles","previous_headings":"Examples","what":"Minimize energy cost (without imbalance market)","title":"Energy cost minimization with battery","text":"Now ’ll focus just energy cost minimization. purpose, can skip imbalance optimization setting variables price_turn_up price_turn_down zero: Since example considers constant exported energy price, can appreciate battery discharges imported price goes , charges imported prices goes . Moreover, can see charging hours mainly solar production times, minimize imported/exported energy. However, see price fluctuation makes increase variability battery profile. avoid switching charging discharging small periods time, lambda parameter introduced problem formulation. Thus lambda > 0, penalty changes battery power consecutives time-slots. example, lambda = 1: Now, can see price fluctuations impact battery profile, total cost increased. optimal solution found lambda value 0 1. find optimal lambda, can apply iteration multiple values calculate two significant indicators: energy cost (lower better) crossover times, times battery shifted charging discharging (lower better). following plot shows normalized values (0 1) two indicators according lambda value: consider optimal lambda “knee” curves, approximately lamda=0.1. value lambda obtain following battery profile:","code":"opt_data_batt <- opt_data %>%   mutate(     price_turn_up = 0,     price_turn_down = 0,   ) %>%    mutate(     battery = add_battery_optimization(       opt_data = .,       opt_objective = \"cost\",       Bcap = 50,       Bc = 4,       Bd = 4     )   ) opt_data_batt <- opt_data %>%   mutate(     price_turn_up = 0,     price_turn_down = 0,   ) %>%    mutate(     battery = add_battery_optimization(       opt_data = .,       opt_objective = \"cost\",       Bcap = 50,       Bc = 4,       Bd = 4,       lambda = 1     )   ) opt_data_batt <- opt_data %>%   mutate(     price_turn_up = 0,     price_turn_down = 0,   ) %>%    mutate(     battery = add_battery_optimization(       opt_data = .,       opt_objective = \"cost\",       Bcap = 50,       Bc = 4,       Bd = 4,       lambda = 0.1     )   )"},{"path":"mcanigueral.github.io/flextools/articles/minimize_cost_battery.html","id":"minimize-energy-cost-considering-imbalance-income","dir":"Articles","previous_headings":"Examples","what":"Minimize energy cost considering imbalance income","title":"Energy cost minimization with battery","text":"Now let’s consider prices imbalance market, assuming income thanks providing flexibility power system. case see “knee” curves corresponds higher lambda, lambda = 0.15: effectively, see fluctuation better lambda value:","code":"opt_data_batt <- opt_data %>%   mutate(     battery = add_battery_optimization(       opt_data = .,       opt_objective = \"cost\",       Bcap = 50,       Bc = 4,       Bd = 4,       lambda = 0.1     )   ) opt_data_batt <- opt_data %>%   mutate(     battery = add_battery_optimization(       opt_data = .,       opt_objective = \"cost\",       Bcap = 50,       Bc = 4,       Bd = 4,       lambda = 0.2     )   )"},{"path":"mcanigueral.github.io/flextools/articles/minimize_net_power.html","id":"demand-optimization","dir":"Articles","previous_headings":"","what":"Demand optimization","title":"Net power optimization","text":"minimize energy exchanged distribution grid maximizing use local generation, using flexibility power demand profile, objective function optimization problem raised following way: \\[ min \\sum_{t=1}^{T} (LS_t + O_t - G_t)^2 + \\lambda (O_t-LF_t)^{2} \\] : \\(T\\) : Number time intervals within optimization window \\(G_t\\) : Local power generation time-series vector \\(LS_t\\) : Non-flexible load time-series vector \\(LF_t\\) : Flexible load time-series vector (optimized) \\(O_t\\) : Optimal flexible load time-series vector \\(\\lambda\\) : penalty change flexible load Moreover, squared term penalizes high values net power, optimization always results flat possible net power profile (peak shaving). optimization problem following constraints: energy consumed flexible load must remain expected behavior: \\[ \\sum_{t=1}^T O_t \\Delta t = \\sum_{t=1}^T LF_t \\Delta t \\] Optimal flexible load must lower certain maximum power \\(LF_{max}\\): \\[ 0 \\le O_t \\le LFmax_t \\quad t \\T \\] energy balance generation loads must lower grid capacity \\(GC_t\\): \\[ 0 \\le O_t + LS_t - G_t \\le GC_t \\quad t \\T \\] time, can optimize flexible energy demand two opposite approaches: Postpone consumption later time-slots (shift energy forward) Consume now (store) energy consumed later (shift energy backward) consider approaches different objectives applications. energy shift always done within maximum time horizon (\\(h\\)) consider realistic scenarios. example, time horizon energy demand water boiler time horizon 6 hours, wouldn’t make sense heat water 6 hours final consumption. one approaches brings extra constraints optimization problem: energy can shifted forward: cumulative sum optimal load \\(O\\) must higher cumulative sum original flexible load \\(LF\\) except last \\(h\\) time slots, lower total cumulative sum original flexible load \\(LF\\) (energy can shifted forwards): \\[ \\sum_{t = 1}^{u-h} LF_t \\le \\sum_{t=1}^u O_t \\le \\sum_{t=1}^u LF_t \\quad u = 1 \\dots T \\] maximum values optimal demand \\(O_t\\) depend time horizon \\(h\\): \\[ O_u \\le \\sum_{t = u-h}^u LF_t \\quad u = 1 \\dots T \\] energy can shifted backward: cumulative sum optimal demand \\(O\\) must higher total cumulative sum original demand \\(LF\\) (energy can shifted backwards), lower cumulative sum original demand \\(LF\\) except following \\(h\\) time slots: \\[ \\sum_{t=1}^u LF_t \\le \\sum_{t=1}^u O_t \\le \\sum_{t=1}^{u+h} LF_t \\quad u = 1 \\dots T \\] maximum values optimal demand \\(O_t\\) depend time horizon \\(h\\): \\[ O_u \\le \\sum_{t = u}^{u+h} LF_t \\quad u = 1 \\dots T \\]","code":""},{"path":"mcanigueral.github.io/flextools/articles/minimize_net_power.html","id":"battery-optimization","dir":"Articles","previous_headings":"","what":"Battery optimization","title":"Net power optimization","text":"minimize energy exchanged distribution grid maximizing use local generation, using flexibility battery, objective function optimization problem raised following way: \\[ min \\sum_{t=1}^{T} (L_t + B_t - G_t)^2 + \\lambda \\sum_{t=1}^{T-1}(B_{t+1} - B_t)^{2} \\] : \\(T\\) : Number time intervals within optimization window \\(G_t\\) : Local power generation time-series vector \\(L_t\\) : Power load time-series vector \\(B_t\\) : Optimal battery power time-series vector. Positive charging, negative discharging. \\(\\lambda\\) : penalty change flexible load Additionally, optimization problem also counts following parameters used constraints : \\(B_{cap}\\) : Battery capacity \\(B_c\\) : Maximum charging power \\(B_d\\) : Maximum discharging power \\(SOC_{min}\\) : Minimum state charge battery \\(SOC_{max}\\) : Maximum state charge battery \\(SOC_{ini}\\) : state charge beginning/end optimization window Optimization constraints: Battery power (positive = charging, \\(B_c\\), negative = discharging, \\(B_d\\)) limits: \\[ -B_d \\le B_t \\le B_c \\quad t \\T \\] State charge limits: \\[ SOC_{min} \\le SOC_{ini} + \\frac{\\sum_{t=1}^T B_t \\Delta t}{B_{cap}} \\le SOC_{max} \\quad t \\T \\] balance charged/discharge energy must 0 end optimization window initial state charge beginning every optimization window: \\[ \\sum_{t=1}^T B_t \\Delta t = 0 \\] energy balance generation loads must lower grid capacity \\(GC_t\\): \\[ -GC_t \\le B_t + L_t - G_t \\le GC_t \\quad t \\T \\]","code":""},{"path":"mcanigueral.github.io/flextools/articles/minimize_net_power_battery.html","id":"problem-formulation","dir":"Articles","previous_headings":"","what":"Problem formulation","title":"Net power minimization with battery","text":"net power optimization designed multiple objectives: Minimize energy exchanged distribution grid maximizing use local generation Obtain demand profile flat possible (peak shaving) objective function constraints optimization problem represented , : \\(T\\) : Number time intervals within optimization window \\(G_t\\) : Local power generation time-series vector \\(L_t\\) : Power load time-series vector \\(B_t\\) : Optimal battery power time-series vector. Positive charging, negative discharging. \\(\\lambda\\) : penalty change flexible load \\(GC_t\\) : Grid power capacity time-series vector \\(B_{cap}\\) : Battery capacity \\(B_c\\) : Maximum charging power \\(B_d\\) : Maximum discharging power \\(SOC_{min}\\) : Minimum state charge battery \\(SOC_{max}\\) : Maximum state charge battery \\(SOC_{ini}\\) : state charge beginning/end optimization window Objective function optimization problem: \\[ min \\sum_{t=1}^{T} (G_t-L_t-B_t)^2 + \\lambda B_t^{2} \\] Moreover, optimization problem following constraints: Battery power (positive = charging, negative = discharging) limits: \\[ -B_d \\le B_t \\le B_c \\quad t \\T \\] State charge limits: \\[ SOC_{min} \\le SOC_{ini} + \\frac{\\sum_{t=1}^T B_t \\Delta t}{B_{cap}} \\le SOC_{max} \\quad t \\T \\] balance charged/discharge energy must 0 end optimization window initial state charge beginning every optimization window: \\[ \\sum_{t=1}^T B_t \\Delta t = 0 \\] energy balance generation loads must lower grid capacity: \\[ -GC_t \\le B_t + L_t - G_t \\le GC_t \\quad t \\T \\]","code":""},{"path":"mcanigueral.github.io/flextools/articles/minimize_net_power_battery.html","id":"quadratic-programming","dir":"Articles","previous_headings":"","what":"Quadratic programming","title":"Net power minimization with battery","text":"Considering objective function problem quadratic terms, Quadratic Programming algorithm must used. case used R package osqp, visit website information. form quadratic problem : \\[   \\begin{array}{ll}   \\text{minimize} & \\mathrm (1/2) x^\\top \\mathrm P \\, \\mathrm x + \\mathrm q^{\\top} \\mathrm x \\\\   \\text{subject } & \\mathrm l \\leq \\mathrm Ax \\leq \\mathrm u   \\end{array} \\] OSQP function osqp::solve_osqp(P, q, , l, u) requires parameters P, q, , l u. parameters must extracted problem formulation, developing objective function can create P q constraints can create , l u. : \\[ P = 2 · \\mathbb{} · \\lambda \\] \\[ q = 2·(L - G) \\]","code":""},{"path":"mcanigueral.github.io/flextools/articles/net_power.html","id":"problem-formulation","dir":"Articles","previous_headings":"","what":"Problem formulation","title":"Net power minimization","text":"net power minimization algorithm designed multiple objectives: Minimize energy exchanged distribution grid maximizing use local generation Obtain demand profile flat possible (peak shaving) Like optimization problems, optimization process requires formulate problem find proper optimization algorithm solve formulation. case, since problem resulted quadratic terms, Quadratic Programming algorithm used solve . objective function (Equation @ref(eq:opt-objective)) constraints (Equations @ref(eq:opt-constraint-energy) - @ref(eq:opt-constraint-identity-backward)) optimization problem represented , : \\(T\\) : Number time intervals within optimization window \\(G_t\\) : Local power generation time-series vector \\(LS_t\\) : Non-flexible load time-series vector \\(LF_t\\) : Flexible load time-series vector (optimized) \\(O_t\\) : Optimal flexible load time-series vector \\(LFmax\\) : Maximum power demand flexible load \\(GC_t\\) : Grid power capacity time-series vector \\[\\begin{equation}   min \\sum_{t=1}^{T} (R_t-L_t-O_t)^2   (\\#eq:opt-objective) \\end{equation}\\] Moreover, energy optimization problem following constraints: energy consumed flexible load must remain expected behavior: \\[\\begin{equation}   \\sum_{t=1}^T O_t \\Delta t = \\sum_{t=1}^T LF_t \\Delta t   (\\#eq:opt-constraint-energy) \\end{equation}\\] Optimal flexible load must lower certain maximum power: \\[\\begin{equation}   0 \\le O_t \\le LFmax_t \\quad t \\T   (\\#eq:opt-constraint-limits) \\end{equation}\\] energy balance generation loads must lower grid capacity: \\[\\begin{equation}   0 \\le O_t \\le GC_t + G_t - LS_t \\quad t \\T   (\\#eq:opt-constraint-limits) \\end{equation}\\] time, can optimize flexible energy demand two opposite approaches: Postpone consumption later time-slots (shift energy forward) Consume now (store) energy consumed later (shift energy backward) consider approaches different objectives applications. energy shift always done within maximum time horizon (\\(h\\)) consider realistic scenarios. example, time horizon energy demand water boiler time horizon 6 hours, wouldn’t make sense heat water 6 hours final consumption. one approaches brings extra constraints optimization problem: energy can shifted forward: cumulative sum optimal load \\(O\\) must higher cumulative sum original flexible load \\(LF\\) except last \\(h\\) time slots, lower total cumulative sum original flexible load \\(LF\\) (energy can shifted forwards): \\[\\begin{equation}   \\sum_{t = 1}^{u-h} LF_t \\le \\sum_{t=1}^u O_t \\le \\sum_{t=1}^u LF_t \\quad u = 1 \\dots T   (\\#eq:opt-constraint-cumsum-forward) \\end{equation}\\] maximum values optimal demand \\(O_t\\) depend time horizon \\(h\\): \\[\\begin{equation}   O_u \\le \\sum_{t = u-h}^u LF_t \\quad u = 1 \\dots T   (\\#eq:opt-constraint-identity-forward) \\end{equation}\\] energy can shifted backward: cumulative sum optimal demand \\(O\\) must higher total cumulative sum original demand \\(LF\\) (energy can shifted backwards), lower cumulative sum original demand \\(LF\\) except following \\(h\\) time slots: \\[\\begin{equation}   \\sum_{t=1}^u LF_t \\le \\sum_{t=1}^u O_t \\le \\sum_{t=1}^{u+h} LF_t \\quad u = 1 \\dots T   (\\#eq:opt-constraint-cumsum-backward) \\end{equation}\\] maximum values optimal demand \\(O_t\\) depend time horizon \\(h\\): \\[\\begin{equation}   O_u \\le \\sum_{t = u}^{u+h} LF_t \\quad u = 1 \\dots T   (\\#eq:opt-constraint-identity-backward) \\end{equation}\\]","code":""},{"path":"mcanigueral.github.io/flextools/articles/net_power.html","id":"quadratic-programming","dir":"Articles","previous_headings":"","what":"Quadratic programming","title":"Net power minimization","text":"Considering objective function problem (Equation @ref(eq:opt-objective)) quadratic terms, Quadratic Programming algorithm must used. case used R package {osqp}, visit website information. form quadratic problem : \\[\\begin{equation}   \\begin{array}{ll}   \\text{minimize} & \\mathrm (1/2) x^\\top \\mathrm P \\, \\mathrm x + \\mathrm q^{\\top} \\mathrm x \\\\   \\text{subject } & \\mathrm G \\mathrm x \\leq \\mathrm h \\\\                     & \\mathrm \\mathrm x = \\mathrm b   \\end{array}   (\\#eq:cvx-formulation) \\end{equation}\\] OSQP function osqp::solve_osqp(P, q, , l, u) requires parameters P, q, , l u. parameters must extracted problem formulation, developing objective function Equation @ref(eq:opt-objective) can create P q constraints @ref(eq:opt-constraint-energy), @ref(eq:opt-constraint-limits), @ref(eq:opt-constraint-cumsum-forward), @ref(eq:opt-constraint-identity-forward), @ref(eq:opt-constraint-cumsum-backward) @ref(eq:opt-constraint-identity-backward) can create , l u. theoretical expressions problem definition translated function’s required parameters using arrays vectors. illustrate step, equations presented form arrays considering number time slots \\(T=8\\) time horizon \\(h=3\\). Equation @ref(eq:opt-constraint-cumsum-forward): \\[\\begin{equation} \\sum_{t = 1}^{u-3} LF_t \\le \\sum_{t=1}^u O_t \\le \\sum_{t=1}^u LF_t \\quad u = 1 \\dots 8  \\\\  \\begin{bmatrix} 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\ 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\ 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\ 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\ 1 & 1 & 0 & 0 & 0 & 0 & 0 & 0\\\\ 1 & 1 & 1 & 0 & 0 & 0 & 0 & 0\\\\ 1 & 1 & 1 & 1 & 0 & 0 & 0 & 0\\\\ 1 & 1 & 1 & 1 & 1 & 0 & 0 & 0\\\\ \\end{bmatrix} \\times \\begin{bmatrix} LF_1\\\\ LF_2\\\\ LF_3\\\\ LF_4\\\\ LF_5\\\\ LF_6\\\\ LF_7\\\\ LF_8 \\end{bmatrix}  \\le  \\begin{bmatrix} 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\ 1 & 1 & 0 & 0 & 0 & 0 & 0 & 0\\\\ 1 & 1 & 1 & 0 & 0 & 0 & 0 & 0\\\\ 1 & 1 & 1 & 1 & 0 & 0 & 0 & 0\\\\ 1 & 1 & 1 & 1 & 1 & 0 & 0 & 0\\\\ 1 & 1 & 1 & 1 & 1 & 1 & 0 & 0\\\\ 1 & 1 & 1 & 1 & 1 & 1 & 1 & 0\\\\ 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1\\\\ \\end{bmatrix} \\times \\begin{bmatrix} O_1\\\\ O_2\\\\ O_3\\\\ O_4\\\\ O_5\\\\ O_6\\\\ O_7\\\\ O_8 \\end{bmatrix}  \\le  \\begin{bmatrix} 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\ 1 & 1 & 0 & 0 & 0 & 0 & 0 & 0\\\\ 1 & 1 & 1 & 0 & 0 & 0 & 0 & 0\\\\ 1 & 1 & 1 & 1 & 0 & 0 & 0 & 0\\\\ 1 & 1 & 1 & 1 & 1 & 0 & 0 & 0\\\\ 1 & 1 & 1 & 1 & 1 & 1 & 0 & 0\\\\ 1 & 1 & 1 & 1 & 1 & 1 & 1 & 0\\\\ 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1\\\\ \\end{bmatrix} \\times \\begin{bmatrix} LF_1\\\\ LF_2\\\\ LF_3\\\\ LF_4\\\\ LF_5\\\\ LF_6\\\\ LF_7\\\\ LF_8 \\end{bmatrix} \\end{equation}\\] Equation @ref(eq:opt-constraint-identity-forward): \\[\\begin{equation} O_u \\le \\sum_{t = u - 3}^u LF_t \\quad u = 1 \\dots 8  \\\\  \\begin{bmatrix} 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\ 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0\\\\ 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0\\\\ 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0\\\\ 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0\\\\ 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0\\\\ 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0\\\\ 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1\\\\ \\end{bmatrix} \\times \\begin{bmatrix} O_1\\\\ O_2\\\\ O_3\\\\ O_4\\\\ O_5\\\\ O_6\\\\ O_7\\\\ O_8 \\end{bmatrix} \\le \\begin{bmatrix} 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\ 1 & 1 & 0 & 0 & 0 & 0 & 0 & 0\\\\ 1 & 1 & 1 & 0 & 0 & 0 & 0 & 0\\\\ 1 & 1 & 1 & 1 & 0 & 0 & 0 & 0\\\\ 0 & 1 & 1 & 1 & 1 & 0 & 0 & 0\\\\ 0 & 0 & 1 & 1 & 1 & 1 & 0 & 0\\\\ 0 & 0 & 0 & 1 & 1 & 1 & 1 & 0\\\\ 0 & 0 & 0 & 0 & 1 & 1 & 1 & 1\\\\ \\end{bmatrix} \\times \\begin{bmatrix} LF_1\\\\ LF_2\\\\ LF_3\\\\ LF_4\\\\ LF_5\\\\ LF_6\\\\ LF_7\\\\ LF_8 \\end{bmatrix} \\end{equation}\\] Equation @ref(eq:opt-constraint-cumsum-backward): \\[\\begin{equation} \\sum_{t=1}^u LF_t \\le \\sum_{t=1}^u O_t \\le \\sum_{t=1}^{u+3} LF_t \\quad u = 1 \\dots 8  \\\\  \\begin{bmatrix} 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\ 1 & 1 & 0 & 0 & 0 & 0 & 0 & 0\\\\ 1 & 1 & 1 & 0 & 0 & 0 & 0 & 0\\\\ 1 & 1 & 1 & 1 & 0 & 0 & 0 & 0\\\\ 1 & 1 & 1 & 1 & 1 & 0 & 0 & 0\\\\ 1 & 1 & 1 & 1 & 1 & 1 & 0 & 0\\\\ 1 & 1 & 1 & 1 & 1 & 1 & 1 & 0\\\\ 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1\\\\ \\end{bmatrix} \\times \\begin{bmatrix} LF_1\\\\ LF_2\\\\ LF_3\\\\ LF_4\\\\ LF_5\\\\ LF_6\\\\ LF_7\\\\ LF_8 \\end{bmatrix}  \\le  \\begin{bmatrix} 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\ 1 & 1 & 0 & 0 & 0 & 0 & 0 & 0\\\\ 1 & 1 & 1 & 0 & 0 & 0 & 0 & 0\\\\ 1 & 1 & 1 & 1 & 0 & 0 & 0 & 0\\\\ 1 & 1 & 1 & 1 & 1 & 0 & 0 & 0\\\\ 1 & 1 & 1 & 1 & 1 & 1 & 0 & 0\\\\ 1 & 1 & 1 & 1 & 1 & 1 & 1 & 0\\\\ 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1\\\\ \\end{bmatrix} \\times \\begin{bmatrix} O_1\\\\ O_2\\\\ O_3\\\\ O_4\\\\ O_5\\\\ O_6\\\\ O_7\\\\ O_8 \\end{bmatrix}  \\le  \\begin{bmatrix} 1 & 1 & 1 & 1 & 0 & 0 & 0 & 0\\\\ 1 & 1 & 1 & 1 & 1 & 0 & 0 & 0\\\\ 1 & 1 & 1 & 1 & 1 & 1 & 0 & 0\\\\ 1 & 1 & 1 & 1 & 1 & 1 & 1 & 0\\\\ 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1\\\\ 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1\\\\ 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1\\\\ 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1\\\\ \\end{bmatrix} \\times \\begin{bmatrix} LF_1\\\\ LF_2\\\\ LF_3\\\\ LF_4\\\\ LF_5\\\\ LF_6\\\\ LF_7\\\\ LF_8 \\end{bmatrix} \\end{equation}\\] Equation @ref(eq:opt-constraint-identity-backward): \\[\\begin{equation} O_u \\le \\sum_{t = u}^{u+3} LF_t \\quad u = 1 \\dots 8  \\\\  \\begin{bmatrix} 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\ 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0\\\\ 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0\\\\ 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0\\\\ 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0\\\\ 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0\\\\ 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0\\\\ 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1\\\\ \\end{bmatrix} \\times \\begin{bmatrix} O_1\\\\ O_2\\\\ O_3\\\\ O_4\\\\ O_5\\\\ O_6\\\\ O_7\\\\ O_8 \\end{bmatrix} \\le \\begin{bmatrix} 1 & 1 & 1 & 1 & 0 & 0 & 0 & 0\\\\ 0 & 1 & 1 & 1 & 1 & 0 & 0 & 0\\\\ 0 & 0 & 1 & 1 & 1 & 1 & 0 & 0\\\\ 0 & 0 & 0 & 1 & 1 & 1 & 1 & 0\\\\ 0 & 0 & 0 & 0 & 1 & 1 & 1 & 1\\\\ 0 & 0 & 0 & 0 & 0 & 1 & 1 & 1\\\\ 0 & 0 & 0 & 0 & 0 & 0 & 1 & 1\\\\ 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1\\\\ \\end{bmatrix} \\times \\begin{bmatrix} LF_1\\\\ LF_2\\\\ LF_3\\\\ LF_4\\\\ LF_5\\\\ LF_6\\\\ LF_7\\\\ LF_8 \\end{bmatrix} \\end{equation}\\]","code":""},{"path":"mcanigueral.github.io/flextools/articles/smart_charging.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Smart charging","text":"smart charging concept widely used different fields applications. {flextools} package, define smart charging tool coordinate individual EV charging sessions order obtain optimal aggregated demand profile according certain objective. different practical strategies coordinate session, postponing sessions, reducing charging power total energy charged, interrupting session, combination multiple strategies, etc.","code":""},{"path":"mcanigueral.github.io/flextools/articles/smart_charging.html","id":"smart-charging-algorithm","dir":"Articles","previous_headings":"","what":"Smart charging algorithm","title":"Smart charging","text":"divided smart charging algorithm two different stages: Setpoint calculation aggregated EV demand curve Scheduling individual sessions match setpoint aggregated demand , briefly explain process performed one theses steps.","code":""},{"path":"mcanigueral.github.io/flextools/articles/smart_charging.html","id":"setpoint-calculation","dir":"Articles","previous_headings":"Smart charging algorithm","what":"Setpoint calculation","title":"Smart charging","text":"setpoint aggregated EV demand understood desired, optimal allowed power demand, depending objective characteristics control charging points. Currently, flextools allows following methods define setpoint aggregated EV demand: Net power optimization: interaction grid minimized well peaks demand. done Quadrating programming formulation explained vignette(\"minimize_net_power\"), using parameters direction=\"forward\" postpone EV sessions time_horizon=NULL exploit flexibility end optimization window. Grid capacity profile [-]","code":""},{"path":"mcanigueral.github.io/flextools/articles/smart_charging.html","id":"scheduling-algorithm","dir":"Articles","previous_headings":"Smart charging algorithm","what":"Scheduling algorithm","title":"Smart charging","text":"obtaining setpoint \\(S_t\\), scheduling algorithm follows sequence every timeslot \\(t\\): Calculate \\(V_t\\), EV demand Get time slots \\(V_t > S_t\\) Stop flexibility required Get power difference load setpoint time slots \\(V_t > S_t\\) Flexibility hours (connection duration - charging duration) > \\(\\Delta t\\) postpone method: start charging time slots \\(V_t > S_t\\) curtail interrupt methods: charging time slots \\(V_t > S_t\\) Stop flexibility available Coordinate sessions start first time slot requires flexibility \\(V_t <= S_t\\) Repeat 1-6 flexibility required available","code":""},{"path":"mcanigueral.github.io/flextools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marc Cañigueral. Author, maintainer.","code":""},{"path":"mcanigueral.github.io/flextools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cañigueral M (2024). flextools: Tools demand-response optimization. R package version 1.0.0.","code":"@Manual{,   title = {flextools: Tools for demand-response optimization},   author = {Marc Cañigueral},   year = {2024},   note = {R package version 1.0.0}, }"},{"path":[]},{"path":"mcanigueral.github.io/flextools/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Tools for demand-response optimization","text":"flextools package provides functions : Optimizing time-series power loads minimizing net power interaction grid energy cost Smart charging simulation considering different methods coordinate charging sessions, postpone, curtail interrupt Simulation battery systems optimization purposes just business--usual battery behavior","code":""},{"path":"mcanigueral.github.io/flextools/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Tools for demand-response optimization","text":"want test flextools data set time-series energy, best place start Get started chapter package website.","code":""},{"path":"mcanigueral.github.io/flextools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for demand-response optimization","text":"Since moment yet CRAN, can install latest development version GitHub:","code":"# Latest development version # install.packages(\"remotes\") remotes::install_github(\"mcanigueral/flextools\")"},{"path":"mcanigueral.github.io/flextools/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":"Tools for demand-response optimization","text":"encounter clear bug, please open issue minimal reproducible example GitHub. questions discussion, please send mail marc.canigueral@udg.edu. technical details, can read following academic articles algorithms used package: Flexibility management electric vehicles based user profiles: Arnhem case study. International Journal Electrical Power Energy Systems, vol. 133. Elsevier BV, p. 107195, Dec. 2021. DOI link. Potential benefits scheduling electric vehicle sessions limiting charging power. CIRED Porto Workshop 2022: E-mobility power distribution systems. Institution Engineering Technology, 2022. DOI link.","code":""},{"path":"mcanigueral.github.io/flextools/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Tools for demand-response optimization","text":"work developed PhD program eXiT research group University Girona (Catalonia) collaboration Resourcefully, energy transition consulting company based Amsterdam, Netherlands.","code":""},{"path":"mcanigueral.github.io/flextools/reference/add_battery_optimization.html","id":null,"dir":"Reference","previous_headings":"","what":"Battery optimal charging/discharging profile — add_battery_optimization","title":"Battery optimal charging/discharging profile — add_battery_optimization","text":"Battery optimal charging/discharging profile","code":""},{"path":"mcanigueral.github.io/flextools/reference/add_battery_optimization.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Battery optimal charging/discharging profile — add_battery_optimization","text":"","code":"add_battery_optimization(   opt_data,   opt_objective = \"grid\",   Bcap,   Bc,   Bd,   SOCmin = 0,   SOCmax = 100,   SOCini = NULL,   window_days = 1,   window_start_hour = 0,   flex_window_hours = 24,   lambda = 0,   mc.cores = 1 )"},{"path":"mcanigueral.github.io/flextools/reference/add_battery_optimization.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Battery optimal charging/discharging profile — add_battery_optimization","text":"opt_data tibble, optimization contextual data. first column must named datetime (mandatory) containing date time sequence optimization algorithm applied. columns can (optional): static: static power demand (kW) sectors like buildings, offices, etc. grid_capacity: maximum imported power grid (kW), example contracted power energy company. production: local power generation (kW). used opt_objective = \"grid\". price_imported: price imported energy (€/kWh). used opt_objective = \"cost\". price_exported: price exported energy (€/kWh). used opt_objective = \"cost\". price_turn_down: price turn-energy use (€/kWh). used opt_objective = \"cost\". price_turn_up: price turn-energy use (€/kWh). used opt_objective = \"cost\". opt_objective character, optimization objective \"grid\" (default) \"cost\" Bcap numeric, capacity battery Bc numeric, maximum charging power Bd numeric, maximum discharging power SOCmin numeric, minimum State--Charge battery SOCmax numeric, maximum State--Charge battery SOCini numeric, required State--Charge beginning/end optimization window window_days integer, number days consider optimization window. window_start_hour integer, starting hour optimization window. flex_window_hours integer, flexibility window length, hours. optional feature lets apply flexibility hours window_start_hour. must lower window_days*24 hours. lambda numeric, penalty change battery power profile. factor used optimization problem. mc.cores integer, number cores use. Must least one, parallelization requires least two cores.","code":""},{"path":"mcanigueral.github.io/flextools/reference/add_battery_optimization.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Battery optimal charging/discharging profile — add_battery_optimization","text":"numeric vector","code":""},{"path":"mcanigueral.github.io/flextools/reference/add_battery_simple.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple battery profile — add_battery_simple","title":"Simple battery profile — add_battery_simple","text":"Charging surplus, discharging deficit","code":""},{"path":"mcanigueral.github.io/flextools/reference/add_battery_simple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple battery profile — add_battery_simple","text":"","code":"add_battery_simple(G, L, Bcap, Bc, Bd, SOCini = 0)"},{"path":"mcanigueral.github.io/flextools/reference/add_battery_simple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple battery profile — add_battery_simple","text":"G numeric vector, renewable generation profile L numeric vector, load profile Bcap numeric, capacity battery Bc numeric, maximum charging power Bd numeric, maximum discharging power SOCini numeric, required State--Charge window beginning","code":""},{"path":"mcanigueral.github.io/flextools/reference/add_battery_simple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple battery profile — add_battery_simple","text":"numeric vector","code":""},{"path":"mcanigueral.github.io/flextools/reference/add_extra_days.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an extra day at the beginning and the end of datetime sequence using the last and first day of the data — add_extra_days","title":"Add an extra day at the beginning and the end of datetime sequence using the last and first day of the data — add_extra_days","text":"Add extra day beginning end datetime sequence using last first day data","code":""},{"path":"mcanigueral.github.io/flextools/reference/add_extra_days.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an extra day at the beginning and the end of datetime sequence using the last and first day of the data — add_extra_days","text":"","code":"add_extra_days(df)"},{"path":"mcanigueral.github.io/flextools/reference/add_extra_days.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an extra day at the beginning and the end of datetime sequence using the last and first day of the data — add_extra_days","text":"df data frame, first column named datetime type datetime","code":""},{"path":"mcanigueral.github.io/flextools/reference/add_extra_days.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an extra day at the beginning and the end of datetime sequence using the last and first day of the data — add_extra_days","text":"tibble","code":""},{"path":"mcanigueral.github.io/flextools/reference/add_storage_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Add storage column to time-series tibble — add_storage_level","title":"Add storage column to time-series tibble — add_storage_level","text":"Add storage column time-series tibble","code":""},{"path":"mcanigueral.github.io/flextools/reference/add_storage_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add storage column to time-series tibble — add_storage_level","text":"","code":"add_storage_level(df, power, init = 0, loss = 0)"},{"path":"mcanigueral.github.io/flextools/reference/add_storage_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add storage column to time-series tibble — add_storage_level","text":"df tibble, first column datetime variable power numeric vector, positive charging negative discharging init numeric, initial storage level (energy units, %) loss numeric, hourly storage loss percentage (%/hour), passed get_storage_losses function","code":""},{"path":"mcanigueral.github.io/flextools/reference/add_storage_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add storage column to time-series tibble — add_storage_level","text":"tibble, extra column storage","code":""},{"path":"mcanigueral.github.io/flextools/reference/convert_time_num_to_period.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert numeric time value to a datetime period (hour-based) — convert_time_num_to_period","title":"Convert numeric time value to a datetime period (hour-based) — convert_time_num_to_period","text":"Convert numeric time value datetime period (hour-based)","code":""},{"path":"mcanigueral.github.io/flextools/reference/convert_time_num_to_period.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert numeric time value to a datetime period (hour-based) — convert_time_num_to_period","text":"","code":"convert_time_num_to_period(time_num)"},{"path":"mcanigueral.github.io/flextools/reference/convert_time_num_to_period.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert numeric time value to a datetime period (hour-based) — convert_time_num_to_period","text":"time_num Numeric time value (hour-based)","code":""},{"path":"mcanigueral.github.io/flextools/reference/energy_profiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Time-series profiles for consumption, production and energy prices — energy_profiles","title":"Time-series profiles for consumption, production and energy prices — energy_profiles","text":"tibble time-series profiles solar production, building consumption energy prices","code":""},{"path":"mcanigueral.github.io/flextools/reference/energy_profiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time-series profiles for consumption, production and energy prices — energy_profiles","text":"","code":"energy_profiles"},{"path":"mcanigueral.github.io/flextools/reference/energy_profiles.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Time-series profiles for consumption, production and energy prices — energy_profiles","text":"tibble solar Solar PV production (kW) building Consumption profile building (kW) price_imported Imported energy price (€/kWh) price_exported Exported energy price (€/kWh) price_turn_up Balancing price increasing demand (€/kWh) price_turn_down Balancing price decreasing demand (€/kWh)","code":""},{"path":"mcanigueral.github.io/flextools/reference/get_conversion_losses.html","id":null,"dir":"Reference","previous_headings":"","what":"Losses due to charging/discharging process — get_conversion_losses","title":"Losses due to charging/discharging process — get_conversion_losses","text":"Losses due charging/discharging process","code":""},{"path":"mcanigueral.github.io/flextools/reference/get_conversion_losses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Losses due to charging/discharging process — get_conversion_losses","text":"","code":"get_conversion_losses(power, loss_charge, loss_discharge)"},{"path":"mcanigueral.github.io/flextools/reference/get_conversion_losses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Losses due to charging/discharging process — get_conversion_losses","text":"power numeric vector, positive charging negative discharging loss_charge numeric, charging loss percentage (%) loss_discharge numeric, discharging loss percentage (%)","code":""},{"path":"mcanigueral.github.io/flextools/reference/get_conversion_losses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Losses due to charging/discharging process — get_conversion_losses","text":"numeric vector","code":""},{"path":"mcanigueral.github.io/flextools/reference/get_energy_balance.html","id":null,"dir":"Reference","previous_headings":"","what":"Get energy balance time-series — get_energy_balance","title":"Get energy balance time-series — get_energy_balance","text":"Input data frame must columns consumption, production. Output data frame extra columns net, local, imported, exported. Column net positive consumption production","code":""},{"path":"mcanigueral.github.io/flextools/reference/get_energy_balance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get energy balance time-series — get_energy_balance","text":"","code":"get_energy_balance(df)"},{"path":"mcanigueral.github.io/flextools/reference/get_energy_balance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get energy balance time-series — get_energy_balance","text":"df tibble, columns datetime, consumption, production","code":""},{"path":"mcanigueral.github.io/flextools/reference/get_energy_balance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get energy balance time-series — get_energy_balance","text":"tibble","code":""},{"path":"mcanigueral.github.io/flextools/reference/get_energy_cost.html","id":null,"dir":"Reference","previous_headings":"","what":"Get energy cost — get_energy_cost","title":"Get energy cost — get_energy_cost","text":"energy cost (Euros) based imported exported energy corresponding prices.","code":""},{"path":"mcanigueral.github.io/flextools/reference/get_energy_cost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get energy cost — get_energy_cost","text":"","code":"get_energy_cost(df)"},{"path":"mcanigueral.github.io/flextools/reference/get_energy_cost.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get energy cost — get_energy_cost","text":"df tibble, columns datetime, consumption, production, price_imported price_exported","code":""},{"path":"mcanigueral.github.io/flextools/reference/get_energy_cost.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get energy cost — get_energy_cost","text":"tibble","code":""},{"path":"mcanigueral.github.io/flextools/reference/get_energy_kpis.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain a list of energy indicators given the energy profiles — get_energy_kpis","title":"Obtain a list of energy indicators given the energy profiles — get_energy_kpis","text":"Obtain list energy indicators given energy profiles","code":""},{"path":"mcanigueral.github.io/flextools/reference/get_energy_kpis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain a list of energy indicators given the energy profiles — get_energy_kpis","text":"","code":"get_energy_kpis(df, kg_co2_kwh = 0.5)"},{"path":"mcanigueral.github.io/flextools/reference/get_energy_kpis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain a list of energy indicators given the energy profiles — get_energy_kpis","text":"df data.frame tibble, columns datetime, consumption, production kg_co2_kwh kg_co2_kwh factor CO2 kg emissions per kWh energy consumed distribution grid","code":""},{"path":"mcanigueral.github.io/flextools/reference/get_energy_kpis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain a list of energy indicators given the energy profiles — get_energy_kpis","text":"named list","code":""},{"path":"mcanigueral.github.io/flextools/reference/get_imbalance_income.html","id":null,"dir":"Reference","previous_headings":"","what":"Get imbalance income — get_imbalance_income","title":"Get imbalance income — get_imbalance_income","text":"energy income (Euros) based difference baseline final power profile certain demand. difference represents optimal changes due flexibility, function calculates income applying demand-side flexibility.","code":""},{"path":"mcanigueral.github.io/flextools/reference/get_imbalance_income.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get imbalance income — get_imbalance_income","text":"","code":"get_imbalance_income(df)"},{"path":"mcanigueral.github.io/flextools/reference/get_imbalance_income.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get imbalance income — get_imbalance_income","text":"df tibble, columns datetime, demand_baseline, demand_final, price_turn_up price_turn_down","code":""},{"path":"mcanigueral.github.io/flextools/reference/get_imbalance_income.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get imbalance income — get_imbalance_income","text":"tibble","code":""},{"path":"mcanigueral.github.io/flextools/reference/get_storage_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Accumulated storage level — get_storage_level","title":"Accumulated storage level — get_storage_level","text":"Accumulated storage level","code":""},{"path":"mcanigueral.github.io/flextools/reference/get_storage_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accumulated storage level — get_storage_level","text":"","code":"get_storage_level(power, init = 0, loss = 0)"},{"path":"mcanigueral.github.io/flextools/reference/get_storage_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accumulated storage level — get_storage_level","text":"power numeric vector, positive charging negative discharging init numeric, initial storage level (energy units, %) loss numeric, hourly storage loss percentage (%/hour), passed get_storage_losses function","code":""},{"path":"mcanigueral.github.io/flextools/reference/get_storage_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accumulated storage level — get_storage_level","text":"numeric vector","code":""},{"path":"mcanigueral.github.io/flextools/reference/get_storage_losses.html","id":null,"dir":"Reference","previous_headings":"","what":"Storage losses over time — get_storage_losses","title":"Storage losses over time — get_storage_losses","text":"Storage losses time","code":""},{"path":"mcanigueral.github.io/flextools/reference/get_storage_losses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Storage losses over time — get_storage_losses","text":"","code":"get_storage_losses(power, loss)"},{"path":"mcanigueral.github.io/flextools/reference/get_storage_losses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Storage losses over time — get_storage_losses","text":"power numeric vector, positive charging negative discharging loss numeric, hourly storage loss percentage (%/hour)","code":""},{"path":"mcanigueral.github.io/flextools/reference/get_storage_losses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Storage losses over time — get_storage_losses","text":"numeric vector","code":""},{"path":"mcanigueral.github.io/flextools/reference/mclapply.windows.html","id":null,"dir":"Reference","previous_headings":"","what":"Parallel processing for windows — mclapply.windows","title":"Parallel processing for windows — mclapply.windows","text":"mclapply version works windows","code":""},{"path":"mcanigueral.github.io/flextools/reference/mclapply.windows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parallel processing for windows — mclapply.windows","text":"","code":"mclapply.windows(X, FUN, ..., mc.cores)"},{"path":"mcanigueral.github.io/flextools/reference/mclapply.windows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parallel processing for windows — mclapply.windows","text":"X vector (atomic list) expressions vector. objects (including classed objects) coerced .list. FUN function applied (mclapply) element X. ... mclapply, optional named arguments FUN. mc.cores integer, number cores used. overruled number items list lower.","code":""},{"path":"mcanigueral.github.io/flextools/reference/mclapply.windows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parallel processing for windows — mclapply.windows","text":"list","code":""},{"path":"mcanigueral.github.io/flextools/reference/mclapply.windows.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parallel processing for windows — mclapply.windows","text":"workaround allow parallel processing windows since parallel package works linux distributions. Source: https://www.r-bloggers.com/2014/07/implementing-mclapply--windows--primer--embarrassingly-parallel-computation--multicore-systems--r/","code":""},{"path":"mcanigueral.github.io/flextools/reference/minimize_cost_window.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimization of the cost (just a window) — minimize_cost_window","title":"Minimization of the cost (just a window) — minimize_cost_window","text":"Minimization cost (just window)","code":""},{"path":"mcanigueral.github.io/flextools/reference/minimize_cost_window.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimization of the cost (just a window) — minimize_cost_window","text":"","code":"minimize_cost_window(   G,   LF,   LS,   PI,   PE,   PTD,   PTU,   direction,   time_horizon,   LFmax,   grid_capacity,   lambda = 0 )"},{"path":"mcanigueral.github.io/flextools/reference/minimize_cost_window.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimization of the cost (just a window) — minimize_cost_window","text":"G numeric vector, renewable generation power profile LF numeric vector, flexible load power profile LS numeric vector, static load power profile PI numeric vector, electricity prices imported energy PE numeric vector, electricity prices exported energy PTD numeric vector, prices turn-energy use PTU numeric vector, prices turn-energy use direction character, forward backward. direction energy can shifted time_horizon integer, maximum number positions shift energy LFmax numeric, value maximum power (kW) flexible load LF grid_capacity numeric numeric vector, grid maximum power capacity limit maximum optimized demand lambda numeric, penalty change flexible load. factor used optimization problem.","code":""},{"path":"mcanigueral.github.io/flextools/reference/minimize_cost_window.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimization of the cost (just a window) — minimize_cost_window","text":"numeric vector","code":""},{"path":"mcanigueral.github.io/flextools/reference/minimize_cost_window_battery.html","id":null,"dir":"Reference","previous_headings":"","what":"Battery optimal charging/discharging profile to minimize cost (just a window) — minimize_cost_window_battery","title":"Battery optimal charging/discharging profile to minimize cost (just a window) — minimize_cost_window_battery","text":"Battery optimal charging/discharging profile minimize cost (just window)","code":""},{"path":"mcanigueral.github.io/flextools/reference/minimize_cost_window_battery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Battery optimal charging/discharging profile to minimize cost (just a window) — minimize_cost_window_battery","text":"","code":"minimize_cost_window_battery(   G,   L,   PE,   PI,   PTD,   PTU,   Bcap,   Bc,   Bd,   SOCmin,   SOCmax,   SOCini,   grid_capacity,   lambda = 0 )"},{"path":"mcanigueral.github.io/flextools/reference/minimize_cost_window_battery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Battery optimal charging/discharging profile to minimize cost (just a window) — minimize_cost_window_battery","text":"G numeric vector, renewable generation profile L numeric vector, load profile PE numeric vector, electricity prices exported energy PI numeric vector, electricity prices imported energy PTD numeric vector, prices turn-energy use PTU numeric vector, prices turn-energy use Bcap numeric, capacity battery Bc numeric, maximum charging power Bd numeric, maximum discharging power SOCmin numeric, minimum State--Charge battery SOCmax numeric, maximum State--Charge battery SOCini numeric, required State--Charge beginning/end optimization window grid_capacity numeric numeric vector, grid maximum power capacity limit maximum optimized demand lambda numeric, penalty change battery power profile. factor used optimization problem.","code":""},{"path":"mcanigueral.github.io/flextools/reference/minimize_cost_window_battery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Battery optimal charging/discharging profile to minimize cost (just a window) — minimize_cost_window_battery","text":"numeric vector","code":""},{"path":"mcanigueral.github.io/flextools/reference/minimize_grid_flow_window.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimization of the grid flow (just a window) — minimize_grid_flow_window","title":"Minimization of the grid flow (just a window) — minimize_grid_flow_window","text":"Minimization grid flow (just window)","code":""},{"path":"mcanigueral.github.io/flextools/reference/minimize_grid_flow_window.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimization of the grid flow (just a window) — minimize_grid_flow_window","text":"","code":"minimize_grid_flow_window(   G,   LF,   LS,   direction,   time_horizon,   LFmax,   grid_capacity )"},{"path":"mcanigueral.github.io/flextools/reference/minimize_grid_flow_window.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimization of the grid flow (just a window) — minimize_grid_flow_window","text":"G numeric vector, renewable generation profile LF numeric vector, flexible load profile LS numeric vector, static load profile direction character, forward backward. direction energy can shifted time_horizon integer, maximum number positions shift energy LFmax numeric, value maximum power (kW) flexible load LF grid_capacity numeric numeric vector, grid maximum power capacity limit maximum optimized demand","code":""},{"path":"mcanigueral.github.io/flextools/reference/minimize_grid_flow_window.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimization of the grid flow (just a window) — minimize_grid_flow_window","text":"numeric vector","code":""},{"path":"mcanigueral.github.io/flextools/reference/minimize_grid_flow_window_battery.html","id":null,"dir":"Reference","previous_headings":"","what":"Battery optimal charging/discharging profile to minimize grid interaction (just a window) — minimize_grid_flow_window_battery","title":"Battery optimal charging/discharging profile to minimize grid interaction (just a window) — minimize_grid_flow_window_battery","text":"Battery optimal charging/discharging profile minimize grid interaction (just window)","code":""},{"path":"mcanigueral.github.io/flextools/reference/minimize_grid_flow_window_battery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Battery optimal charging/discharging profile to minimize grid interaction (just a window) — minimize_grid_flow_window_battery","text":"","code":"minimize_grid_flow_window_battery(   G,   L,   Bcap,   Bc,   Bd,   SOCmin,   SOCmax,   SOCini,   grid_capacity = Inf )"},{"path":"mcanigueral.github.io/flextools/reference/minimize_grid_flow_window_battery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Battery optimal charging/discharging profile to minimize grid interaction (just a window) — minimize_grid_flow_window_battery","text":"G numeric vector, renewable generation profile L numeric vector, load profile Bcap numeric, capacity battery Bc numeric, maximum charging power Bd numeric, maximum discharging power SOCmin numeric, minimum State--Charge battery SOCmax numeric, maximum State--Charge battery SOCini numeric, required State--Charge beginning/end optimization window grid_capacity numeric numeric vector, grid maximum power capacity limit maximum optimized demand","code":""},{"path":"mcanigueral.github.io/flextools/reference/minimize_grid_flow_window_battery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Battery optimal charging/discharging profile to minimize grid interaction (just a window) — minimize_grid_flow_window_battery","text":"numeric vector","code":""},{"path":"mcanigueral.github.io/flextools/reference/minimize_net_power_window.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimization of net power (just a window) — minimize_net_power_window","title":"Minimization of net power (just a window) — minimize_net_power_window","text":"Minimization net power (just window)","code":""},{"path":"mcanigueral.github.io/flextools/reference/minimize_net_power_window.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimization of net power (just a window) — minimize_net_power_window","text":"","code":"minimize_net_power_window(   G,   LF,   LS,   direction,   time_horizon,   LFmax,   grid_capacity,   lambda = 0 )"},{"path":"mcanigueral.github.io/flextools/reference/minimize_net_power_window.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimization of net power (just a window) — minimize_net_power_window","text":"G numeric vector, renewable generation profile LF numeric vector, flexible load profile LS numeric vector, static load profile direction character, forward backward. direction energy can shifted time_horizon integer, maximum number positions shift energy LFmax numeric, value maximum power (kW) flexible load LF grid_capacity numeric numeric vector, grid maximum power capacity limit maximum optimized demand lambda numeric, penalty change flexible load. factor used optimization problem.","code":""},{"path":"mcanigueral.github.io/flextools/reference/minimize_net_power_window.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimization of net power (just a window) — minimize_net_power_window","text":"numeric vector","code":""},{"path":"mcanigueral.github.io/flextools/reference/minimize_net_power_window_battery.html","id":null,"dir":"Reference","previous_headings":"","what":"Battery optimal charging/discharging profile to minimize grid interaction (just a window) — minimize_net_power_window_battery","title":"Battery optimal charging/discharging profile to minimize grid interaction (just a window) — minimize_net_power_window_battery","text":"Battery optimal charging/discharging profile minimize grid interaction (just window)","code":""},{"path":"mcanigueral.github.io/flextools/reference/minimize_net_power_window_battery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Battery optimal charging/discharging profile to minimize grid interaction (just a window) — minimize_net_power_window_battery","text":"","code":"minimize_net_power_window_battery(   G,   L,   Bcap,   Bc,   Bd,   SOCmin,   SOCmax,   SOCini,   grid_capacity,   lambda = 0 )"},{"path":"mcanigueral.github.io/flextools/reference/minimize_net_power_window_battery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Battery optimal charging/discharging profile to minimize grid interaction (just a window) — minimize_net_power_window_battery","text":"G numeric vector, renewable generation profile L numeric vector, load profile Bcap numeric, capacity battery Bc numeric, maximum charging power Bd numeric, maximum discharging power SOCmin numeric, minimum State--Charge battery SOCmax numeric, maximum State--Charge battery SOCini numeric, required State--Charge beginning/end optimization window grid_capacity numeric numeric vector, grid maximum power capacity limit maximum optimized demand lambda numeric, penalty change battery power profile. factor used optimization problem.","code":""},{"path":"mcanigueral.github.io/flextools/reference/minimize_net_power_window_battery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Battery optimal charging/discharging profile to minimize grid interaction (just a window) — minimize_net_power_window_battery","text":"numeric vector","code":""},{"path":"mcanigueral.github.io/flextools/reference/normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize between 0 and 1 — normalize","title":"Normalize between 0 and 1 — normalize","text":"Normalize 0 1","code":""},{"path":"mcanigueral.github.io/flextools/reference/normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize between 0 and 1 — normalize","text":"","code":"normalize(x)"},{"path":"mcanigueral.github.io/flextools/reference/normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize between 0 and 1 — normalize","text":"x numeric value vector","code":""},{"path":"mcanigueral.github.io/flextools/reference/optimize_battery_window.html","id":null,"dir":"Reference","previous_headings":"","what":"Battery optimal charging/discharging profile to minimize net power and cost (just a window) — optimize_battery_window","title":"Battery optimal charging/discharging profile to minimize net power and cost (just a window) — optimize_battery_window","text":"Battery optimal charging/discharging profile minimize net power cost (just window)","code":""},{"path":"mcanigueral.github.io/flextools/reference/optimize_battery_window.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Battery optimal charging/discharging profile to minimize net power and cost (just a window) — optimize_battery_window","text":"","code":"optimize_battery_window(   G,   L,   PE,   PI,   PTD,   PTU,   Bcap,   Bc,   Bd,   SOCmin,   SOCmax,   SOCini,   grid_capacity,   w,   lambda )"},{"path":"mcanigueral.github.io/flextools/reference/optimize_battery_window.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Battery optimal charging/discharging profile to minimize net power and cost (just a window) — optimize_battery_window","text":"G numeric vector, renewable generation profile L numeric vector, load profile PE numeric vector, electricity prices exported energy PI numeric vector, electricity prices imported energy PTD numeric vector, prices turn-energy use PTU numeric vector, prices turn-energy use Bcap numeric, capacity battery Bc numeric, maximum charging power Bd numeric, maximum discharging power SOCmin numeric, minimum State--Charge battery SOCmax numeric, maximum State--Charge battery SOCini numeric, required State--Charge beginning/end optimization window grid_capacity numeric numeric vector, grid maximum power capacity limit maximum optimized demand w numeric, optimization objective weight (w=1 minimizes net power w=0 minimizes cost). lambda numeric, penalty change battery power profile. factor used optimization problem.","code":""},{"path":"mcanigueral.github.io/flextools/reference/optimize_battery_window.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Battery optimal charging/discharging profile to minimize net power and cost (just a window) — optimize_battery_window","text":"numeric vector","code":""},{"path":"mcanigueral.github.io/flextools/reference/optimize_demand.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimize a vector of flexible demand — optimize_demand","title":"Optimize a vector of flexible demand — optimize_demand","text":"Optimize vector flexible demand","code":""},{"path":"mcanigueral.github.io/flextools/reference/optimize_demand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimize a vector of flexible demand — optimize_demand","text":"","code":"optimize_demand(   opt_data,   opt_objective = \"grid\",   direction = \"forward\",   time_horizon = NULL,   window_days = 1,   window_start_hour = 0,   flex_window_hours = NULL,   lambda = 0,   mc.cores = 1 )"},{"path":"mcanigueral.github.io/flextools/reference/optimize_demand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimize a vector of flexible demand — optimize_demand","text":"opt_data tibble, optimization contextual data. first column must named datetime (mandatory) containing date time sequence optimization algorithm applied. second column must named flexible (mandatory), power demand (kW) vector optimized. columns can (optional): static: static power demand (kW) sectors like buildings, offices, etc. grid_capacity: maximum imported power grid (kW), example contracted power energy company. load_capacity: maximum power flexible load can consume (kW). production: local power generation (kW). used opt_objective = \"grid\". price_imported: price imported energy (€/kWh). used opt_objective = \"cost\". price_exported: price exported energy (€/kWh). used opt_objective = \"cost\". price_turn_down: price turn-energy use (€/kWh). used opt_objective = \"cost\". price_turn_up: price turn-energy use (€/kWh). used opt_objective = \"cost\". opt_objective character, optimization objective \"grid\" (default) \"cost\" direction character, forward backward. direction energy can shifted time_horizon integer, maximum number positions shift energy . NULL, time_horizon number rows op_data. window_days integer, number days consider optimization window. window_start_hour integer, starting hour optimization window. flex_window_hours integer, flexibility window length, hours. optional feature lets apply flexibility hours window_start_hour. must lower window_days*24 hours. lambda numeric, penalty change flexible load. factor used optimization problem. mc.cores integer, number cores use. Must least one, parallelization requires least two cores.","code":""},{"path":"mcanigueral.github.io/flextools/reference/optimize_demand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimize a vector of flexible demand — optimize_demand","text":"numeric vector","code":""},{"path":"mcanigueral.github.io/flextools/reference/optimize_demand_window.html","id":null,"dir":"Reference","previous_headings":"","what":"Demand optimization (just a window) — optimize_demand_window","title":"Demand optimization (just a window) — optimize_demand_window","text":"Demand optimization (just window)","code":""},{"path":"mcanigueral.github.io/flextools/reference/optimize_demand_window.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Demand optimization (just a window) — optimize_demand_window","text":"","code":"optimize_demand_window(   G,   LF,   LS,   PI,   PE,   PTD,   PTU,   direction,   time_horizon,   LFmax,   grid_capacity,   w,   lambda )"},{"path":"mcanigueral.github.io/flextools/reference/optimize_demand_window.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Demand optimization (just a window) — optimize_demand_window","text":"G numeric vector, renewable generation power profile LF numeric vector, flexible load power profile LS numeric vector, static load power profile PI numeric vector, electricity prices imported energy PE numeric vector, electricity prices exported energy PTD numeric vector, prices turn-energy use PTU numeric vector, prices turn-energy use direction character, forward backward. direction energy can shifted time_horizon integer, maximum number positions shift energy LFmax numeric, value maximum power (kW) flexible load LF grid_capacity numeric numeric vector, grid maximum power capacity limit maximum optimized demand w numeric, optimization objective weight (w=1 minimizes net power w=0 minimizes cost). lambda numeric, penalty change flexible load. factor used optimization problem.","code":""},{"path":"mcanigueral.github.io/flextools/reference/optimize_demand_window.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Demand optimization (just a window) — optimize_demand_window","text":"numeric vector","code":""},{"path":"mcanigueral.github.io/flextools/reference/round_to_interval.html","id":null,"dir":"Reference","previous_headings":"","what":"Round a numeric value to interval — round_to_interval","title":"Round a numeric value to interval — round_to_interval","text":"Round numeric value interval","code":""},{"path":"mcanigueral.github.io/flextools/reference/round_to_interval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round a numeric value to interval — round_to_interval","text":"","code":"round_to_interval(dbl, interval)"},{"path":"mcanigueral.github.io/flextools/reference/round_to_interval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round a numeric value to interval — round_to_interval","text":"dbl numeric value interval decimal interval (0 1)","code":""},{"path":"mcanigueral.github.io/flextools/reference/schedule_sessions.html","id":null,"dir":"Reference","previous_headings":"","what":"Schedule sessions according to optimal setpoint — schedule_sessions","title":"Schedule sessions according to optimal setpoint — schedule_sessions","text":"Schedule sessions according optimal setpoint","code":""},{"path":"mcanigueral.github.io/flextools/reference/schedule_sessions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Schedule sessions according to optimal setpoint — schedule_sessions","text":"","code":"schedule_sessions(   sessions,   setpoint,   method,   power_th = 0,   charging_power_min = 0.5,   include_log = FALSE,   show_progress = TRUE )"},{"path":"mcanigueral.github.io/flextools/reference/schedule_sessions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Schedule sessions according to optimal setpoint — schedule_sessions","text":"sessions tibble, sessions data set normalized normalize_sessions function setpoint tibble columns datetime, timeslot rest columns names user profiles method character, postpone, curtail interrupt. power_th numeric, power threshold (0 1) accepted setpoint. example, power_th = 0.1 setpoint = 100 certain time slot, sessions' demand can reach value 110 without needing schedule sessions. charging_power_min numeric, minimum allowed ratio (0 1) nominal power. example, charging_power_min = 0.5 method = 'curtail', sessions' charging power can curtailed 50% nominal charging power (.e. Power variable sessions tibble). include_log logical, whether output algorithm messages every user profile time-slot show_progress logical, whether output progress bar console","code":""},{"path":"mcanigueral.github.io/flextools/reference/schedule_sessions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Schedule sessions according to optimal setpoint — schedule_sessions","text":"list two elements sessions log","code":""},{"path":"mcanigueral.github.io/flextools/reference/smart_charging.html","id":null,"dir":"Reference","previous_headings":"","what":"Smart charging algorithm — smart_charging","title":"Smart charging algorithm — smart_charging","text":"Smart charging algorithm","code":""},{"path":"mcanigueral.github.io/flextools/reference/smart_charging.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smart charging algorithm — smart_charging","text":"","code":"smart_charging(   sessions,   opt_data,   opt_objective,   method,   window_days,   window_start_hour,   responsive,   power_th = 0,   charging_power_min = 0.5,   include_log = FALSE,   show_progress = TRUE,   mc.cores = 1 )"},{"path":"mcanigueral.github.io/flextools/reference/smart_charging.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smart charging algorithm — smart_charging","text":"sessions tibble, sessions data set standard format marked {evprof} package (see article) opt_data tibble, optimization contextual data. first column must named datetime (mandatory) containing date time sequence smart charging algorithm applied, sessions starting within time sequence column datetime optimized. columns can : static: static power demand (kW) sectors like buildings, offices, etc. grid_capacity: maximum imported power grid (kW), example contracted power energy company. production: local power generation (kW). used opt_objective = \"grid\". price_imported: price imported energy (€/kWh). used opt_objective = \"cost\". price_exported: price exported energy (€/kWh). used opt_objective = \"cost\". columns opt_data user profiles names, used setpoints optimization performed corresponding user profiles. opt_objective character, optimization objective \"none\", \"grid\" \"cost\". See details section information different objectives. method character, scheduling method \"none\", \"postpone\", \"curtail\" \"interrupt\". none, scheduling part skipped sessions returned results identical original parameter. window_days integer, number days consider optimization window. window_start_hour integer, starting hour optimization window. responsive Named two-layer list ratio (0 1) sessions responsive smart charging program. names list must exactly match Time-cycle User profiles names. example: list(Monday = list(Worktime = 1, Shortstay = 0.1)) power_th numeric, power threshold (0 1) accepted setpoint. example, power_th = 0.1 setpoint = 100 certain time slot, sessions' demand can reach value 110 without needing schedule sessions. charging_power_min numeric, minimum allowed ratio (0 1) nominal power. example, charging_power_min = 0.5 method = 'curtail', sessions' charging power can curtailed 50% nominal charging power (.e. Power variable sessions tibble). include_log logical, whether output algorithm messages every user profile time-slot show_progress logical, whether output progress bar console mc.cores integer, number cores use. Must least one, parallelization requires least two cores.","code":""},{"path":"mcanigueral.github.io/flextools/reference/smart_charging.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smart charging algorithm — smart_charging","text":"list three elements: optimal setpoints, sessions schedule log messages.","code":""},{"path":"mcanigueral.github.io/flextools/reference/smart_charging.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Smart charging algorithm — smart_charging","text":"important parameter function opt_data, defines time sequence smart charging algorithm optimization variables. opt_data parameter directly related opt_objective parameter. two different optimization objectives implemented function: Minimize grid interaction (opt_objective = \"grid\"): performs quadratic optimization minimize peak flexible load amount imported power grid. production found opt_data, peak shaving objective considered. Minimize energy cost (opt_objective = \"cost\"): performs linear optimization minimize energy cost. case, columns grid_capacity, price_imported, price_exported, price_turn_up price_turn_down tibble opt_data important. variables configured, default values grid_capacity = Inf, price_imported = 1 price_exported = 0 considered minimize imported energy. linear optimization grid_capacity configured since possible power allocated time slots lower prices. optimization (opt_objective = \"none\"): skip optimization. user profile name appears opt_data columns, considered setpoint scheduling algorithm. , user profile optimized.","code":""},{"path":"mcanigueral.github.io/flextools/reference/smart_charging.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Smart charging algorithm — smart_charging","text":"","code":"# Example: we will use the example data set of charging sessions # from the California Technological Institute (Caltech), obtained # through the ACN-Data website (https://ev.caltech.edu/dataset). # This data set has been clustered into different user profiles # using the R package `{evprof}`. See the article in: # https://mcanigueral.github.io/evprof/articles/california.html.  # The user profiles of this data set are `Visit` and `Worktime`, # identified in two different time cycles `Workday` and `Weekend`. # These two variables in the `sessions` tibble, `Profile` and `Timecycle`, # are required for the `smart_charging` function and give more versatility # to the smart charging context. For example, we may want to only coordinate # `Worktime` sessions instead of all sessions.  # For this example we want the following: # - Postpone only `Worktime` sessions, which have a responsiveness rate of # 0.9 (i.e. 90% of Worktime users accept to postpone the session). # - Minimize the power peak of the sessions (peak shaving) # - Time series resolution of 15 minutes # - Optimization window of 24 hours from 6:00AM to 6:00 AM  if (FALSE) { sessions <- evsim::california_ev_sessions_profiles sessions_demand <- evsim::get_demand(sessions, resolution = 15, mc.cores = 4)  # Don't require any other variable than datetime, since we don't # care about local generation (just peak shaving objective) opt_data <- tibble(   datetime = sessions_demand$datetime ) smart_charging(   sessions, opt_data, opt_objective = \"grid\", method = \"postpone\",   window_length = 24*60/15, window_start_hour = 6,   responsive = list(Workday = list(Worktime = 0.9)) ) }"},{"path":"mcanigueral.github.io/flextools/news/index.html","id":"flextools-100","dir":"Changelog","previous_headings":"","what":"flextools 1.0.0","title":"flextools 1.0.0","text":"First release documentation.","code":""}]
