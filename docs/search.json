[{"path":"https://mcanigueral.github.io/flextools/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://mcanigueral.github.io/flextools/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://mcanigueral.github.io/flextools/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://mcanigueral.github.io/flextools/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://mcanigueral.github.io/flextools/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://mcanigueral.github.io/flextools/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://mcanigueral.github.io/flextools/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://mcanigueral.github.io/flextools/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://mcanigueral.github.io/flextools/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://mcanigueral.github.io/flextools/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://mcanigueral.github.io/flextools/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://mcanigueral.github.io/flextools/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://mcanigueral.github.io/flextools/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://mcanigueral.github.io/flextools/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://mcanigueral.github.io/flextools/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://mcanigueral.github.io/flextools/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://mcanigueral.github.io/flextools/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://mcanigueral.github.io/flextools/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://mcanigueral.github.io/flextools/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://mcanigueral.github.io/flextools/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://mcanigueral.github.io/flextools/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2020 evflex  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. evflex Copyright (C) 2020 evflex This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://mcanigueral.github.io/flextools/articles/combined_optimization.html","id":"demand-optimization","dir":"Articles","previous_headings":"","what":"Demand optimization","title":"Combined optimization","text":"minimize energy cost using flexibility power demand profile, objective function optimization problem raised following way: min∑t=1Tw·((LSt+Ot−Gt)·∑t=1TPItT)2+(1−w)·(·PIt−Et·PEt−PTUt(Ot−LFt)−PTDt(LFt−Ot))+λ(Ot−LFt)2 min \\sum_{t=1}^{T} w·((LS_t + O_t - G_t)· \\frac{\\sum_{t=1}^{T}PI_t}{T})^2 + (1-w)·(I_t·PI_t - E_t·PE_t - PTU_t(O_t-LF_t)  - PTD_t(LF_t-O_t)) + \\lambda (O_t-LF_t)^{2} Note , contrast Net power optimization problem, add average imported energy price ∑t=1TPItT\\frac{\\sum_{t=1}^{T}PI_t}{T} equation convert power units cost units balance value ranges multiple terms equation. objective function constraints optimization problem represented , : TT : Number time intervals within optimization window GtG_t : Local power generation time-series vector LStLS_t : Non-flexible load time-series vector LFtLF_t : Flexible load time-series vector (optimized) OtO_t : Optimal flexible load time-series vector ItI_t : imported energy EtE_t : exported energy PItPI_t : imported energy price PEtPE_t : exported energy price PTUtPTU_t : balancing price turn-power PTDtPTD_t : balancing price turn-power λ\\lambda : penalty change flexible load Moreover, optimization problem constraints described Energy cost optimization article (demand section).","code":""},{"path":"https://mcanigueral.github.io/flextools/articles/combined_optimization.html","id":"battery-optimization","dir":"Articles","previous_headings":"","what":"Battery optimization","title":"Combined optimization","text":"minimize energy cost using flexibility battery, objective function optimization problem raised following way: min∑t=1Tw·((Lt+Bt−Gt)·∑t=1TPItT)2+(1−w)·(·PIt−Et·PEt−PTUt·Bt−PTDt·(−Bt))+λ∑t=1T−1(Bt+1−Bt)2 min \\sum_{t=1}^{T} w·((L_t + B_t - G_t)· \\frac{\\sum_{t=1}^{T}PI_t}{T})^2 + (1-w)·(I_t·PI_t - E_t·PE_t - PTU_t·B_t  - PTD_t·(-B_t)) + \\lambda \\sum_{t=1}^{T-1}(B_{t+1} - B_t)^{2} : TT : Number time intervals within optimization window GtG_t : Local power generation time-series vector LtL_t : Power load time-series vector BtB_t : Optimal battery power time-series vector. Positive charging, negative discharging. ItI_t : imported energy EtE_t : exported energy PItPI_t : imported energy price PEtPE_t : exported energy price PTUtPTU_t : balancing price turn-power PTDtPTD_t : balancing price turn-power λ\\lambda : penalty change flexible load Moreover, optimization problem constraints described Energy cost optimization article (battery section).","code":""},{"path":"https://mcanigueral.github.io/flextools/articles/flextools.html","id":"net-power-minimization","dir":"Articles","previous_headings":"","what":"Net power minimization","title":"Introduction to flextools","text":"minimize energy exchanged distribution grid maximizing use local generation, using flexibility power demand profile (e.g. heatpumps, electric vehicles, etc.) battery, make use Quadratic programming obtain optimal setpoints flexible assets. See article Net power optimization learn problem formulation demand flexbility battery flexibility. , can find examples applications.","code":""},{"path":"https://mcanigueral.github.io/flextools/articles/flextools.html","id":"demand-flexibility","dir":"Articles","previous_headings":"Net power minimization","what":"Demand flexibility","title":"Introduction to flextools","text":"Let’s consider building demand profile flexible can optimized. , create new column flexible opt_data tibble order tell optimization function flexible load. Since want perform net power minimization, set opt_objective = \"grid\" example shift energy forward: see power demand peak hours (18:00 - 22:00) still high since can’t postpone energy midnight (optimization window 00:00 00:00 default). can try setting optimization window 5:00AM 5:00AM: power peak reduction evening peak hours much relevant now.","code":"opt_building <- opt_data %>%    mutate(     flexible = building   ) %>%    optimize_demand(     opt_objective = \"grid\",     direction = \"forward\"   ) opt_building <- opt_data %>%    mutate(     flexible = building   ) %>%    optimize_demand(     opt_objective = \"grid\",     direction = \"forward\",     window_start_hour = 5   )"},{"path":"https://mcanigueral.github.io/flextools/articles/flextools.html","id":"battery-flexibility","dir":"Articles","previous_headings":"Net power minimization","what":"Battery flexibility","title":"Introduction to flextools","text":"Instead using building can use battery, considering capacity 50kWh charge/discharge power 4kW. See now use building column static avoid optimizing building profile:","code":"opt_battery <- opt_data %>%    mutate(     static = building   ) %>%   add_battery_optimization(     opt_objective = \"grid\",     Bcap = 50, Bc = 10, Bd = 4,     window_start_hour = 5   )"},{"path":"https://mcanigueral.github.io/flextools/articles/flextools.html","id":"cost-minimization","dir":"Articles","previous_headings":"","what":"Cost minimization","title":"Introduction to flextools","text":"minimize energy cost maximizing income imbalance markets, using flexibility power demand profile (e.g. heatpumps, electric vehicles, etc.) battery, make use Quadratic programming obtain optimal setpoints flexible assets. See article Energy cost optimization learn problem formulation demand flexbility battery flexibility. , can find examples applications.","code":""},{"path":"https://mcanigueral.github.io/flextools/articles/flextools.html","id":"demand-flexibility-1","dir":"Articles","previous_headings":"Cost minimization","what":"Demand flexibility","title":"Introduction to flextools","text":"Imagine source flexibility building heat-pump water tank storage. Therefore, case shift energy backward store hot water tank. perform cost optimization, now set opt_objective = \"cost\": see lot power demand concentrated price lower values obtain minimum energy cost. behavior can constrained multiple ways: Define maximum load power: can done adding variable load_capacity opt_data parameter optimization function Define maximum grid (net) power: can done adding variable grid_capacity opt_data parameterin optimization function Use penalty change: can done using lambda parameter optimization function example, let’s consider maximum power demand 5kW lambda = 0.005:","code":"opt_building <- opt_data %>%    select(datetime, production, building, price_imported, price_exported) %>%    mutate(     flexible = building   ) %>%    optimize_demand(     opt_objective = \"cost\",     direction = \"backward\"   ) opt_building <- opt_data %>%    select(datetime, production, building, price_imported, price_exported) %>%    mutate(     flexible = building,     load_capacity = 5   ) %>%    optimize_demand(     opt_objective = \"cost\",     direction = \"backward\",     lambda = 0.005   )"},{"path":"https://mcanigueral.github.io/flextools/articles/flextools.html","id":"battery-flexibility-1","dir":"Articles","previous_headings":"Cost minimization","what":"Battery flexibility","title":"Introduction to flextools","text":"example can done battery, considering capacity 50kWh charge/discharge power 4kW. See now use building column static avoid optimizing building profile: Since example considers constant exported energy price, can appreciate battery discharges imported price goes , charges imported prices goes . Moreover, can see charging hours mainly solar production times, minimize imported/exported energy. However, see price fluctuation makes increase variability battery profile. avoid switching charging discharging small periods time, lambda parameter introduced problem formulation. Thus lambda > 0, penalty changes battery power consecutive time-slots. case, value lambda = 0.1 gives reasonable results: find optimal lambda, can apply iteration multiple values calculate two significant indicators: energy cost (lower better) crossover times, times battery shifted charging discharging (lower better). following plot shows normalized values (0 1) two indicators according lambda value: consider optimal lambda “knee” curves, approximately lamda=0.1 used . Now let’s consider prices imbalance market, assuming income thanks providing flexibility power system. can appreciate battery charging discharging following imbalance prices, specially “turn-price” high values certain periods:","code":"opt_battery <- opt_data %>%    select(datetime, production, building, price_imported, price_exported) %>%    mutate(     static = building   ) %>%   add_battery_optimization(     opt_objective = \"cost\",     Bcap = 50, Bc = 4, Bd = 4,     window_start_hour = 5   ) opt_battery <- opt_data %>%    select(datetime, production, building, price_imported, price_exported) %>%    mutate(     static = building   ) %>%   add_battery_optimization(     opt_objective = \"cost\",     Bcap = 50, Bc = 4, Bd = 4,     window_start_hour = 5,     lambda = 0.1   ) opt_battery <- opt_data %>%    select(datetime, production, building, price_imported, price_exported, price_turn_up, price_turn_down) %>%    mutate(     static = building   ) %>%   add_battery_optimization(     opt_objective = \"cost\",     Bcap = 50, Bc = 4, Bd = 4,     window_start_hour = 5,     lambda = 0.1   )"},{"path":"https://mcanigueral.github.io/flextools/articles/flextools.html","id":"combined-objectives","dir":"Articles","previous_headings":"","what":"Combined objectives","title":"Introduction to flextools","text":"minimize energy cost impact distribution grid, using flexibility power demand profile (e.g. heatpumps, electric vehicles, etc.) battery, make use Quadratic programming obtain optimal setpoints flexible assets. See article Combined optimization learn problem formulation demand flexbility battery flexibility. , can find examples applications.","code":""},{"path":"https://mcanigueral.github.io/flextools/articles/flextools.html","id":"demand-flexibility-2","dir":"Articles","previous_headings":"Combined objectives","what":"Demand flexibility","title":"Introduction to flextools","text":"parameter opt_objective can \"grid\", \"cost\" number 0 1, 0 equivalent “cost” 1 equivalent “grid”. Thus, opt_objective number, optimization problem combines objectives. show effect term, can calculate demand profiles corresponding three different values opt_objective: see production hours three profiles follow PV production much possible, differ periods prices fluctuates . also caused difference constant low export price high variable import price.","code":"opt_building <- purrr::map(   list(objective_0.25 = 0.25, objective_0.5 = 0.5, objective_0.75 = 0.75),   ~ opt_data %>%      select(datetime, production, building, price_imported, price_exported) %>%      mutate(       flexible = building     ) %>%      optimize_demand(       opt_objective = .x,       direction = \"forward\"     ) ) %>%    as_tibble()"},{"path":"https://mcanigueral.github.io/flextools/articles/flextools.html","id":"battery-flexibility-2","dir":"Articles","previous_headings":"Combined objectives","what":"Battery flexibility","title":"Introduction to flextools","text":"example can done battery, considering capacity 50kWh charge/discharge power 4kW. See now use building column static avoid optimizing building profile: interesting outcome simulation combining objectives also smoothes effect price fluctuation battery profile. Since now also important reduce impact distribution network, now lambda required.","code":"opt_battery <- purrr::map(   list(objective_0.25 = 0.25, objective_0.5 = 0.5, objective_0.75 = 0.75),   ~ opt_data %>%      select(datetime, production, building, price_imported, price_exported) %>%      mutate(       static = building     ) %>%     add_battery_optimization(       opt_objective = .x,       Bcap = 50, Bc = 4, Bd = 4,       window_start_hour = 5     ) ) %>%    as_tibble()"},{"path":"https://mcanigueral.github.io/flextools/articles/minimize_cost.html","id":"demand-optimization","dir":"Articles","previous_headings":"","what":"Demand optimization","title":"Energy cost optimization","text":"minimize energy cost using flexibility power demand profile, objective function optimization problem raised following way: min∑t=1TIt·PIt−Et·PEt−PTUt(Ot−LFt)−PTDt(LFt−Ot)+λ(Ot−LFt)2 min \\sum_{t=1}^{T} I_t·PI_t - E_t·PE_t - PTU_t(O_t-LF_t)  - PTD_t(LF_t-O_t) + \\lambda (O_t-LF_t)^{2} objective function constraints optimization problem represented , : TT : Number time intervals within optimization window GtG_t : Local power generation time-series vector LStLS_t : Non-flexible load time-series vector LFtLF_t : Flexible load time-series vector (optimized) OtO_t : Optimal flexible load time-series vector ItI_t : imported energy EtE_t : exported energy PItPI_t : imported energy price PEtPE_t : exported energy price PTUtPTU_t : balancing price turn-power PTDtPTD_t : balancing price turn-power λ\\lambda : penalty change flexible load Moreover, optimization problem following constraints: energy consumed flexible load must remain expected behavior: ∑t=1TOtΔt=∑t=1TLFtΔt \\sum_{t=1}^T O_t \\Delta t = \\sum_{t=1}^T LF_t \\Delta t Optimal flexible load must lower certain maximum power LFmaxLF_{max}: 0≤Ot≤LFmaxtt∈T 0 \\le O_t \\le LFmax_t \\quad t \\T energy balance generation loads must lower grid capacity GCtGC_t: Ot+LSt−Gt≤GCtt∈T O_t + LS_t - G_t \\le GC_t \\quad t \\T imported energy must remain 0 corresponding energy consumed maximum grid capacity: 0≤≤GCtΔtt∈T 0 \\le I_t \\le GC_t \\Delta t \\quad t \\T exported energy must remain 0 power generation: 0≤Et≤GtΔtt∈T 0 \\le E_t \\le G_t \\Delta t \\quad t \\T Energy balance behind--meter: −Et=Ot+LSt−Gt I_t - E_t = O_t + LS_t - G_t time, can optimize flexible energy demand two opposite approaches: Postpone consumption later time-slots (shift energy forward) Consume now (store) energy consumed later (shift energy backward) consider approaches different objectives applications. energy shift always done within maximum time horizon (hh) consider realistic scenarios. example, time horizon energy demand water boiler time horizon 6 hours, wouldn’t make sense heat water 6 hours final consumption. one approaches brings extra constraints optimization problem: energy can shifted forward: cumulative sum optimal load OO must higher cumulative sum original flexible load LFLF except last hh time slots, lower total cumulative sum original flexible load LFLF (energy can shifted forwards): ∑t=1u−hLFt≤∑t=1uOt≤∑t=1uLFtu=1…T \\sum_{t = 1}^{u-h} LF_t \\le \\sum_{t=1}^u O_t \\le \\sum_{t=1}^u LF_t \\quad u = 1 \\dots T maximum values optimal demand OtO_t depend time horizon hh: Ou≤∑t=u−huLFtu=1…T O_u \\le \\sum_{t = u-h}^u LF_t \\quad u = 1 \\dots T energy can shifted backward: cumulative sum optimal demand OO must higher total cumulative sum original demand LFLF (energy can shifted backwards), lower cumulative sum original demand LFLF except following hh time slots: ∑t=1uLFt≤∑t=1uOt≤∑t=1u+hLFtu=1…T \\sum_{t=1}^u LF_t \\le \\sum_{t=1}^u O_t \\le \\sum_{t=1}^{u+h} LF_t \\quad u = 1 \\dots T maximum values optimal demand OtO_t depend time horizon hh: Ou≤∑t=uu+hLFtu=1…T O_u \\le \\sum_{t = u}^{u+h} LF_t \\quad u = 1 \\dots T","code":""},{"path":"https://mcanigueral.github.io/flextools/articles/minimize_cost.html","id":"battery-optimization","dir":"Articles","previous_headings":"","what":"Battery optimization","title":"Energy cost optimization","text":"minimize energy cost using flexibility battery, objective function optimization problem raised following way: min∑t=1TIt·PIt−Et·PEt−PTUt·Bt−PTDt·(−Bt)+λ∑t=1T−1(Bt+1−Bt)2 min \\sum_{t=1}^{T} I_t·PI_t - E_t·PE_t - PTU_t·B_t  - PTD_t·(-B_t) + \\lambda \\sum_{t=1}^{T-1}(B_{t+1} - B_t)^{2} : TT : Number time intervals within optimization window GtG_t : Local power generation time-series vector LtL_t : Power load time-series vector BtB_t : Optimal battery power time-series vector. Positive charging, negative discharging. ItI_t : imported energy EtE_t : exported energy PItPI_t : imported energy price PEtPE_t : exported energy price PTUtPTU_t : balancing price turn-power PTDtPTD_t : balancing price turn-power λ\\lambda : penalty change flexible load Additionally, optimization problem also counts following parameters used constraints : BcapB_{cap} : Battery capacity BcB_c : Maximum charging power BdB_d : Maximum discharging power SOCminSOC_{min} : Minimum state charge battery SOCmaxSOC_{max} : Maximum state charge battery SOCiniSOC_{ini} : state charge beginning/end optimization window Optimization constraints: Battery power (positive = charging, negative = discharging) limits: −Bd≤Bt≤Bct∈T -B_d \\le B_t \\le B_c \\quad t \\T State charge limits: SOCmin≤SOCini+∑t=1TBtΔtBcap≤SOCmaxt∈T SOC_{min} \\le SOC_{ini} + \\frac{\\sum_{t=1}^T B_t \\Delta t}{B_{cap}} \\le SOC_{max} \\quad t \\T balance charged/discharge energy must 0 end optimization window initial state charge beginning every optimization window: ∑t=1TBtΔt=0 \\sum_{t=1}^T B_t \\Delta t = 0 imported energy must remain 0 corresponding energy consumed maximum grid capacity GCtGC_t: 0≤≤GCtΔtt∈T 0 \\le I_t \\le GC_t \\Delta t \\quad t \\T exported energy must remain 0 power generation (allows battery discharge importing hours): 0≤Et≤GtΔtt∈T 0 \\le E_t \\le G_t \\Delta t \\quad t \\T Energy balance behind--meter: −Et=Bt+Lt−Gt I_t - E_t = B_t + L_t - G_t","code":""},{"path":"https://mcanigueral.github.io/flextools/articles/minimize_net_power.html","id":"demand-optimization","dir":"Articles","previous_headings":"","what":"Demand optimization","title":"Net power optimization","text":"minimize energy exchanged distribution grid maximizing use local generation, using flexibility power demand profile, objective function optimization problem raised following way: min∑t=1T(LSt+Ot−Gt)2+λ(Ot−LFt)2 min \\sum_{t=1}^{T} (LS_t + O_t - G_t)^2 + \\lambda (O_t-LF_t)^{2} : TT : Number time intervals within optimization window GtG_t : Local power generation time-series vector LStLS_t : Non-flexible load time-series vector LFtLF_t : Flexible load time-series vector (optimized) OtO_t : Optimal flexible load time-series vector λ\\lambda : penalty change flexible load Moreover, squared term penalizes high values net power, optimization always results flat possible net power profile (peak shaving). optimization problem following constraints: energy consumed flexible load must remain expected behavior: ∑t=1TOtΔt=∑t=1TLFtΔt \\sum_{t=1}^T O_t \\Delta t = \\sum_{t=1}^T LF_t \\Delta t Optimal flexible load must lower certain maximum power LFmaxLF_{max}: 0≤Ot≤LFmaxtt∈T 0 \\le O_t \\le LFmax_t \\quad t \\T energy balance generation loads must lower grid capacity GCtGC_t: Ot+LSt−Gt≤GCtt∈T O_t + LS_t - G_t \\le GC_t \\quad t \\T time, can optimize flexible energy demand two opposite approaches: Postpone consumption later time-slots (shift energy forward) Consume now (store) energy consumed later (shift energy backward) consider approaches different objectives applications. energy shift always done within maximum time horizon (hh) consider realistic scenarios. example, time horizon energy demand water boiler time horizon 6 hours, wouldn’t make sense heat water 6 hours final consumption. one approaches brings extra constraints optimization problem: energy can shifted forward: cumulative sum optimal load OO must higher cumulative sum original flexible load LFLF except last hh time slots, lower total cumulative sum original flexible load LFLF (energy can shifted forwards): ∑t=1u−hLFt≤∑t=1uOt≤∑t=1uLFtu=1…T \\sum_{t = 1}^{u-h} LF_t \\le \\sum_{t=1}^u O_t \\le \\sum_{t=1}^u LF_t \\quad u = 1 \\dots T maximum values optimal demand OtO_t depend time horizon hh: Ou≤∑t=u−huLFtu=1…T O_u \\le \\sum_{t = u-h}^u LF_t \\quad u = 1 \\dots T energy can shifted backward: cumulative sum optimal demand OO must higher total cumulative sum original demand LFLF (energy can shifted backwards), lower cumulative sum original demand LFLF except following hh time slots: ∑t=1uLFt≤∑t=1uOt≤∑t=1u+hLFtu=1…T \\sum_{t=1}^u LF_t \\le \\sum_{t=1}^u O_t \\le \\sum_{t=1}^{u+h} LF_t \\quad u = 1 \\dots T maximum values optimal demand OtO_t depend time horizon hh: Ou≤∑t=uu+hLFtu=1…T O_u \\le \\sum_{t = u}^{u+h} LF_t \\quad u = 1 \\dots T","code":""},{"path":"https://mcanigueral.github.io/flextools/articles/minimize_net_power.html","id":"battery-optimization","dir":"Articles","previous_headings":"","what":"Battery optimization","title":"Net power optimization","text":"minimize energy exchanged distribution grid maximizing use local generation, using flexibility battery, objective function optimization problem raised following way: min∑t=1T(Lt+Bt−Gt)2+λ∑t=1T−1(Bt+1−Bt)2 min \\sum_{t=1}^{T} (L_t + B_t - G_t)^2 + \\lambda \\sum_{t=1}^{T-1}(B_{t+1} - B_t)^{2} : TT : Number time intervals within optimization window GtG_t : Local power generation time-series vector LtL_t : Power load time-series vector BtB_t : Optimal battery power time-series vector. Positive charging, negative discharging. λ\\lambda : penalty change flexible load Additionally, optimization problem also counts following parameters used constraints : BcapB_{cap} : Battery capacity BcB_c : Maximum charging power BdB_d : Maximum discharging power SOCminSOC_{min} : Minimum state charge battery SOCmaxSOC_{max} : Maximum state charge battery SOCiniSOC_{ini} : state charge beginning/end optimization window Optimization constraints: Battery power (positive = charging, BcB_c, negative = discharging, BdB_d) limits: −Bd≤Bt≤Bct∈T -B_d \\le B_t \\le B_c \\quad t \\T State charge limits: SOCmin≤SOCini+∑t=1TBtΔtBcap≤SOCmaxt∈T SOC_{min} \\le SOC_{ini} + \\frac{\\sum_{t=1}^T B_t \\Delta t}{B_{cap}} \\le SOC_{max} \\quad t \\T balance charged/discharge energy must 0 end optimization window initial state charge beginning every optimization window: ∑t=1TBtΔt=0 \\sum_{t=1}^T B_t \\Delta t = 0 energy balance generation loads must lower grid capacity GCtGC_t: −GCt≤Bt+Lt−Gt≤GCtt∈T -GC_t \\le B_t + L_t - G_t \\le GC_t \\quad t \\T","code":""},{"path":"https://mcanigueral.github.io/flextools/articles/smart-charging-advanced.html","id":"the-ev-demand-is-pushed-to-the-end-of-the-optimization-window","dir":"Articles","previous_headings":"","what":"The EV demand is pushed to the end of the optimization window","title":"Advanced smart charging","text":"Usually applying smart_charging() function default configuration prevent EV users surpass setpoints, due lack flexibility EV sessions. happens, normally results higher demand end optimization window smart charging algorithm tries match setpoint ’s flexibility EV users EV must charged. , see examples situations 2 types setpoints smart_charging() function can consider (grid capacity setpoint optimization setpoint), deal .","code":""},{"path":"https://mcanigueral.github.io/flextools/articles/smart-charging-advanced.html","id":"setpoint-as-grid-capacity","dir":"Articles","previous_headings":"The EV demand is pushed to the end of the optimization window","what":"Setpoint as grid capacity","title":"Advanced smart charging","text":"Imagine ’s maximum grid connection reduced 4 kW, can charge one EV time: configure grid capacity setpoint EV user profile: demand postponed smart charging algorithm match setpoint possible hours, end optimization window reaching, vehicle must charge accomplish energy requirements EV user. means EV users able charge requirements grid conditions. Therefore, scenarios grid stability priority assume EV can completely charged, able simulate impact EV user. scenario can configured parameter energy_min, required minimum ratio energy required EV user. energy_min = 0 algorithm considers EVs may disconnect without charging energy requirements, energy_min = 1 algorithm make sure EV users charge energy requirements, even though setpoint achieved. Let’s try value energy_min = 0 see algorithm works corresponding impact vehicles: Now see grid capacity constraint completely respected. price? can calculate impact EV user terms percentage energy charged function summarise_energy_charged(): Percentage energy charged (%) see , achieve setpoint, EV users can charge bit 50% energy requirements. can also check setting energy_min = 0.7, example, results surpassing setpoint , EV users charge least 70% energy requirements: Percentage energy charged (%) - energy_min = 0.7","code":"grid_capacity <- 4 opt_data <- tibble(   datetime = ev_demand$datetime, # Same date-time sequence than the demand   HomeEV = grid_capacity ) head(opt_data) ## # A tibble: 6 × 2 ##   datetime            HomeEV ##   <dttm>               <dbl> ## 1 2023-05-01 00:00:00      4 ## 2 2023-05-01 00:15:00      4 ## 3 2023-05-01 00:30:00      4 ## 4 2023-05-01 00:45:00      4 ## 5 2023-05-01 01:00:00      4 ## 6 2023-05-01 01:15:00      4 sc_results <- smart_charging(   sessions = ev_sessions,   opt_data = opt_data,    opt_objective = \"none\",   method = \"curtail\",   window_days = 1,    window_start_hour = 6 ) plot(sc_results, sessions = ev_sessions) sc_results <- smart_charging(   sessions = ev_sessions,   opt_data = opt_data,    opt_objective = \"none\",   method = \"curtail\",   window_days = 1,    window_start_hour = 6,   energy_min = 0 ) plot(sc_results, sessions = ev_sessions) summarise_energy_charged(sc_results, sessions = ev_sessions) %>%    knitr::kable(caption = \"Percentage of energy charged (%)\") sc_results <- smart_charging(   sessions = ev_sessions,   opt_data = opt_data,    opt_objective = \"none\",   method = \"curtail\",   window_days = 1,    window_start_hour = 6,   energy_min = 0.7 ) plot(sc_results, sessions = ev_sessions) summarise_energy_charged(sc_results, sessions = ev_sessions) %>%    knitr::kable(caption = \"Percentage of energy charged (%) - `energy_min = 0.7`\")"},{"path":"https://mcanigueral.github.io/flextools/articles/smart-charging-advanced.html","id":"setpoint-as-optimal-demand","dir":"Articles","previous_headings":"The EV demand is pushed to the end of the optimization window","what":"Setpoint as optimal demand","title":"Advanced smart charging","text":"Let’s consider grid optimization EV demand context following energy flows: plot see time EV demand can adapted setpoint second optimization window, EV demand charged morning charged night surpassing setpoint. setpoint calculated optimization objective (e.g. \"grid\" \"cost\"), surpassing setpoint may suppose risk optimal solution. Even though, situations like one avoided since can rebound effect end optimization window. solution situations parameter power_th, allows certain threshold setpoint value EV demand every time slot. See application power_th = 0.05 allow threshold 5% setpoint:","code":"energy_data %>%    left_join(ev_demand, by = \"datetime\") %>%    select(-starts_with(\"price\")) %>%    plot_ts(ylab = \"Power (kW)\", strokeWidth = 2) %>%    dySeries(\"solar\", color = \"orange\") %>%    dyStackedRibbonGroup(c(\"HomeEV\",\"building\"), color = c(\"purple\", \"navy\")) ev_sessions %>%    smart_charging(     opt_data = energy_data %>% rename(static = building, production = solar),      opt_objective = \"grid\",     method = \"curtail\",     window_days = 1,      window_start_hour = 6   ) %>%    plot() ev_sessions %>%    smart_charging(     opt_data = energy_data %>% rename(static = building, production = solar),      opt_objective = \"grid\",     method = \"curtail\",     window_days = 1,      window_start_hour = 6,     power_th = 0.05   ) %>%    plot()"},{"path":"https://mcanigueral.github.io/flextools/articles/smart-charging-advanced.html","id":"the-ev-model-has-a-minimum-charging-power","dir":"Articles","previous_headings":"","what":"The EV model has a minimum charging power","title":"Advanced smart charging","text":"known EV models minimum charging power, power can’t charged . Therefore, possible solution specify minimum charging power parameter charging_power_min. charging_power_min = 0 method = \"curtail\", charging power can reduced 0 kW (interrupted), value charging_power_min = 0.5 allow curtailing EV charging power 50% nominal charging power. Let’s simulate EVs must charge least 30% power requirements: Check minimum power Exploited sessions (.e. ones provided flexibility) corresponds 30% 3.7 (1.11kW): can also make histogram show distribution charging power values. visible limit 30% nominal power (1.11 kW) actually limiting flexibility, since lot sessions charged minimum charging rate: compare final EV demand setpoint, general see good result even though setpoint achieved restrictive periods:","code":"sc_results <- ev_sessions %>%    smart_charging(     opt_data = energy_data %>% rename(static = building, production = solar),      opt_objective = \"grid\",     method = \"curtail\",     window_days = 1,      window_start_hour = 6,     charging_power_min = 0.3   ) sc_results$sessions %>%    filter(Exploited) %>%    pull(Power) %>%    min() ## [1] 1.11 sc_results$sessions %>%    filter(Exploited) %>%    ggplot(aes(Power)) +    geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. plot(sc_results)"},{"path":"https://mcanigueral.github.io/flextools/articles/smart-charging.html","id":"smart-charging-algorithm","dir":"Articles","previous_headings":"","what":"Smart charging algorithm","title":"Smart charging","text":"divided smart charging algorithm contained inside smart_charging() function two different stages: Setpoint calculation aggregated EV demand curve Scheduling individual sessions match setpoint aggregated demand , briefly explain process performed one theses steps.","code":""},{"path":"https://mcanigueral.github.io/flextools/articles/smart-charging.html","id":"setpoint-calculation","dir":"Articles","previous_headings":"Smart charging algorithm","what":"Setpoint calculation","title":"Smart charging","text":"setpoint aggregated EV demand understood desired, optimal allowed power demand, depending objective characteristics control charging points. Currently, flextools allows following methods define setpoint aggregated EV demand: Setpoint maxium EV demand: maximum EV demand capacity profile can configured constrain coordinate charging sessions limits. must set every EV user profile charging sessions data set. Setpoint optimal EV demand: optinal EV demand calculated based Quadratic programming optimization minimize interaction power grid (see Net power optimization), energy cost (see Energy cost optimization) (see Combined optimization), setting parameter opt_objective accordingly. Internally, smart_charging() function making use optimize_demand() function internally, using parameters direction=\"forward\" postpone EV sessions time_horizon=NULL exploit flexibility end optimization window.","code":""},{"path":"https://mcanigueral.github.io/flextools/articles/smart-charging.html","id":"scheduling-algorithm","dir":"Articles","previous_headings":"Smart charging algorithm","what":"Scheduling algorithm","title":"Smart charging","text":"scheduling method defined parameter method smart_charging() function, can \"postpone\", \"curtail\", \"interrupt\" \"none\". method = \"none\", sessions schedule modified calculated setpoints returned optimal results. method different \"none\", obtaining setpoint OtO_t (.e. optimal load), scheduling algorithm follows sequence every time slot tt: Calculate LFtLF_t, EV demand (.e. flexible load) Get time slots LFt>OtLF_t > O_t Stop flexibility required every time slot LFt>OtLF_t > O_t 4.1. Get power difference load setpoint time slots LFt>OtLF_t > O_t 4.2. Select flexible sessions (see definition ) set priority order 4.3. Go next time slot flexibility available 4.4. Coordinate flexible sessions match setpoint Stop flexibility available Return new schedule EV sessions classify connected EV flexible session , flextools package defines following conditions according smart charging method used: Postpone: EV started charging yet, energy required can charged rest connection time nominal charging power. flexible sessions time slot, ones connecting earlier priority later sessions. Interrupt: charge completed yet, energy required can charged rest connection time nominal charging power. flexible sessions time slot, ones charging less time priority sessions already charging (rotation system). Curtail: charge completed yet completed current time slot, energy required can charged rest connection time lower power nominal charging power. energy power constraints conditions can also defined function smart_charging() parameters energy_min charging_power_min, representing minimum allowed ratios nominal values. information using parameters can found article Advanced smart charging.","code":""},{"path":"https://mcanigueral.github.io/flextools/articles/smart-charging.html","id":"smart-charging-examples","dir":"Articles","previous_headings":"","what":"Smart charging examples","title":"Smart charging","text":", examples smart_charging() illustrated grid congestion simulation, set maximum EV capacity surpass, optimization simulation, net power usage /energy cost optimized thanks smart charging. smart charging examples require optimizing EV demand, building demand, solar PV production energy prices obtained example energy_profiles object provided flextools: top energy variables, can simulate charging sessions using evsim package, provides function evsim::get_custom_ev_model create custom EV model later simulate EV sessions evsim::simulate_sessions() function. can create EV model custom time-cycles user profiles. case, consider just one EV user profile (see EV user profile concept package evprof), “HomeEV”, represent “charge--home” pattern starting average 18:00 next morning. model, simulate 5 sessions per day user profile called “HomeEV”, charging 3.7 kW, first 3 days energy_data resolution 15 minutes: Finally can calculate time-series power demand EV function evsim::get_demand(), using parameter =\"Sessions\": visible EV users tend coincide evening peak hours , coordinated, make efficient usage power grid. Following, find examples coordinate EV sessions using smart_charging() first let’s start minimal example. Let’s simulate smart charging : Optimization objective “grid” (minimizing interaction grid) Scheduling method “curtail” (reducing charging power required) contextual data optimization (opt_data just date time sequence) optimization window: starting 6:00AM length 1 day (24h) object returned function smart_charging() always list 3 objects: setpoints: time-series data frame optimal setpoints EV demand sessions: coordinated EV sessions’ data frame according setpoint log: list messages smart charging algorithm (flexibility needs availability, sessions modified, etc.). empty default filled messages include_log = TRUE. Moreover, print results see summary charging sessions participating smart charging program, differentiating Responsive, Flexible Exploited: Responsive: charging sessions accept participate smart charging sessions. ratio responsive sessions every EV user profile can configured responsive parameter smart_charging() function. default, charging sessions responsive. Flexible: charging sessions flexible specific time slot requires flexibility. depends session’s features scheduling method (described Scheduling algorithm section). flexibility required, variable FALSE even provide flexibility. Exploited: charging sessions modified scope smart charging program. Also note applying smart charging, sessions object results lot charging sessions. number total charging sessions increased, flexible sessions divided multiple time slots. allows modify charging power every time slot 0 (postpone interrupt methods) 0 nominal power (curtail method). following example can see Session “S1” different Power value different time slots: Coordinated charging sessions , setpoints object result tibble represents objective EV demand power profile algorithm tried match scheduling EV sessions: can visualise setpoint top EV demand see optimal EV demand different original demand: can visualize difference defined setpoint final EV user profile applying native plot() function smart_charging() results, equivalent use function plot_smart_charging(). Moreover, see difference flexible original EV demand, can pass sessions parameter plot() function. case, see end optimization window peaks EVs charge energy requirements end window. methods solve issue see section “EV demand pushed end optimization window” Advanced smart charging article. Finally, log object results list strings containing log messages scheduling charging sessions every timestamp EV user profile. enable log messages required configure parameter log = TRUE smart_charging() function.","code":"energy_data <- flextools::energy_profiles %>%    filter(isoweek(datetime) == 18, wday(datetime, week_start = 1) <= 5) %>%    mutate(     solar = solar*4,     building = building*2   ) head(energy_data) ## # A tibble: 6 × 7 ##   datetime            solar building price_imported price_exported price_turn_up ##   <dttm>              <dbl>    <dbl>          <dbl>          <dbl>         <dbl> ## 1 2023-05-01 00:00:00     0     3.06         0.0999          0.025        0.104  ## 2 2023-05-01 00:15:00     0     2.98         0.0999          0.025        0.0993 ## 3 2023-05-01 00:30:00     0     2.90         0.0999          0.025        0      ## 4 2023-05-01 00:45:00     0     2.82         0.0999          0.025        0      ## 5 2023-05-01 01:00:00     0     2.74         0.0955          0.025        0      ## 6 2023-05-01 01:15:00     0     2.64         0.0955          0.025        0      ## # ℹ 1 more variable: price_turn_down <dbl> # For workdays time cycle workdays_parameters <- dplyr::tibble(   profile =  \"HomeEV\",   ratio = 100,   start_mean = 18,   start_sd = 3,   duration_mean = 13,   duration_sd = 1,   energy_mean = 15,   energy_sd = 2 )  # For weekends time cycle weekends_parameters <- dplyr::tibble(   profile = \"HomeEV\",   ratio = 100,   start_mean = 12,   start_sd = 2,   duration_mean = 3,   duration_sd = 2,   energy_mean = 4,   energy_sd = 1 )  parameters_lst <- list(workdays_parameters, weekends_parameters)  # Get the whole model ev_model <- get_custom_ev_model(   names = c(\"Workdays\", \"Weekends\"),   months_lst = list(1:12, 1:12),   wdays_lst = list(1:5, 6:7),   parameters_lst = parameters_lst,   connection_log = FALSE,   energy_log = FALSE,   data_tz = \"Europe/Amsterdam\" ) set.seed(123) ev_sessions <- simulate_sessions(   evmodel = ev_model,    sessions_day = tibble(time_cycle = c(\"Workdays\", \"Weekends\"), n_sessions = c(5, 5)),   user_profiles = NULL,   charging_powers = tibble(power = 3.7, ratio = 1),    dates = unique(date(energy_data$datetime))[1:3],    resolution = 15 ) %>%    filter(Profile == \"HomeEV\") ev_demand <- ev_sessions %>%    get_demand(by = \"Session\")   ev_demand %>%    plot_ts(ylab = \"Power demand (kW)\", stackedGraph = T, fillGraph = T) sc_results <- smart_charging(   ev_sessions,    opt_data = tibble(datetime = ev_demand$datetime, production = 0),   opt_objective = \"grid\",   method = \"curtail\",   window_days = 1,   window_start_hour = 6 ) names(sc_results) ## [1] \"setpoints\" \"sessions\"  \"log\" print(sc_results) ## Smart charging results as a list of 3 objects: charging sessions, user profiles setpoints and log messages. ## Simulation from 2023-05-01 to 2023-05-05 with a time resolution of 15 minutes. ## For this time period, 15 charging sessions could participate ( 100 % of total data set), from which: ##   - Responsive sessions: 100 % ##   - Flexible sessions: 100 % ##   - Exploited sessions: 100 % ## No log messages in this simulation. head(sc_results$sessions) %>%    knitr::kable(caption = \"Coordinated charging sessions\") head(sc_results$setpoints) ## # A tibble: 6 × 2 ##   datetime            HomeEV ##   <dttm>               <dbl> ## 1 2023-05-01 00:00:00      0 ## 2 2023-05-01 00:15:00      0 ## 3 2023-05-01 00:30:00      0 ## 4 2023-05-01 00:45:00      0 ## 5 2023-05-01 01:00:00      0 ## 6 2023-05-01 01:15:00      0 ev_demand %>%    left_join(     rename(sc_results$setpoints, Setpoint = HomeEV),     by = \"datetime\"   ) %>%    plot_ts(ylab = \"Power (kW)\", legend_show = \"onmouseover\") %>%    dyStackedRibbonGroup(unique(ev_sessions$Session)) %>%    dySeries(\"Setpoint\", color = \"red\", strokePattern = \"dashed\", strokeWidth = 2) plot(sc_results, sessions = ev_sessions)"},{"path":"https://mcanigueral.github.io/flextools/articles/smart-charging.html","id":"grid-capacity-limit","dir":"Articles","previous_headings":"Smart charging examples","what":"Grid capacity limit","title":"Smart charging","text":"Imagine charge example EV charging sessions installation maximum grid connection 8 kW: Since peak goes 18kW, need use smart charging allow EV users charge grid capacity. order define grid capacity smart_charing() function, column name EV user profile sessions parameter (example “HomeEV”) must found opt_data parameter. Therefore, \"HomeEV\" column added opt_data object setpoint EV user profile “HomeEV”: Also, parameter opt_objective must set \"none\" order skip optimization, since setpoint smart charging algorithm given opt_data column named “HomeEV”. , smart charging method use? Let’s compare , considering optimization windows 24 hours 6:00AM 6:00AM. First can try postpone strategy setting method=\"postpone\": see later EV sessions shifted night instead start charging right connection time peak hours. problem EVs completely charged connection times, may suppose risk late EV connections wait previous sessions charged. issue solved interrupt strategy, rotation system designed charge similar amount energy connected EVs. Let’s see difference method=\"interrupt\": Now see aggregated result also see individual sessions interrupted enable new sessions charge, better equality among EV users. However, postpone interrupt methods provide high flexibility terms power since individual charging power can’t reduced. sense, curtail method provides higher flexibility potential adapt EV demand variable fluctuating signals flexibility markets energy prices. Let’s see difference method=\"curtail\": Now see EV demand completely adapted grid capacity, sharing full capacity among different charging EVs equal parts.","code":"grid_capacity <- 8 ev_demand %>%    plot_ts(ylab = \"Power demand (kW)\", stackedGraph = T, fillGraph = T, legend_show = \"onmouseover\") %>%    dyLimit(grid_capacity, \"Grid capacity\", color = \"red\") opt_data <- tibble(   datetime = ev_demand$datetime, # Same date-time sequence than the demand   HomeEV = grid_capacity ) head(opt_data) ## # A tibble: 6 × 2 ##   datetime            HomeEV ##   <dttm>               <dbl> ## 1 2023-05-01 00:00:00      8 ## 2 2023-05-01 00:15:00      8 ## 3 2023-05-01 00:30:00      8 ## 4 2023-05-01 00:45:00      8 ## 5 2023-05-01 01:00:00      8 ## 6 2023-05-01 01:15:00      8 sc_results <- ev_sessions %>%    smart_charging(     opt_data = opt_data,      opt_objective = \"none\",     method = \"postpone\",     window_days = 1,      window_start_hour = 6   ) ev_demand_opt <- sc_results$sessions %>%    get_demand(by = \"Session\") ev_demand_opt %>%    plot_ts(ylab = \"Power demand (kW)\", stackedGraph = T, fillGraph = T, legend_width = 150) %>%    dyLimit(grid_capacity, \"Grid capacity\", color = \"red\") %>%    dyAxis(\"y\", valueRange = c(0, 10)) sc_results <- ev_sessions %>%    smart_charging(     opt_data = opt_data,      opt_objective = \"none\",     method = \"interrupt\",     window_days = 1,      window_start_hour = 6   ) ev_demand_opt <- sc_results$sessions %>%    get_demand(by = \"Session\") ev_demand_opt %>%    plot_ts(ylab = \"Power demand (kW)\", stackedGraph = T, fillGraph = T, legend_width = 150) %>%    dyLimit(grid_capacity, \"Grid capacity\", color = \"red\") %>%    dyAxis(\"y\", valueRange = c(0, 10)) sc_results <- ev_sessions %>%    smart_charging(     opt_data = opt_data,      opt_objective = \"none\",     method = \"curtail\",     window_days = 1,      window_start_hour = 6   ) ev_demand_opt <- sc_results$sessions %>%    get_demand(by = \"Session\") ev_demand_opt %>%    plot_ts(ylab = \"Power demand (kW)\", stackedGraph = T, fillGraph = T, legend_width = 150) %>%    dyLimit(grid_capacity, \"Grid capacity\", color = \"red\") %>%    dyAxis(\"y\", valueRange = c(0, 10))"},{"path":"https://mcanigueral.github.io/flextools/articles/smart-charging.html","id":"net-power-optimization","dir":"Articles","previous_headings":"Smart charging examples","what":"Net power optimization","title":"Smart charging","text":"Imagine EV charging sessions examples building demand profile PV production. can use example data set energy_data visualize : see EV demand cause even higher demand peak evening peak hours. solve issue, EV sessions can coordinated building demand profile obtain lower aggregated peak. can done function smart_charging(), using net power optimization (.e. opt_objective = \"grid\", see information Net power optimization article. simulate using \"curtail\" method, considering optimization windows 24 hours 6:00AM 6:00AM, renaming variable \"solar\" \"production\" \"building\" \"static\" opt_data object: see EVs case match setpoint time. optimal setpoint specific power curve calculated obtain flattest possible net power curve. can check adding flexible EV profiles building (consumption = building + HomeEV) visualizing net power profile function plot_net_power(), calculates net power columns consumption production. graph see evening peak, demand can completely flat, shaving peak, EVs can coordinated match setpoint. can also compare net power profile static flexible case parameter original_df. plot clearly see added value EV flexibility reduce impact grid evening peak. However, see timeslots EV demand surpasses setpoint. happens order charge energy requirements EVs, since default energy_min = 1. set energy_min = 0.5, see can meet setpoint time slots energy required charged vehicles.","code":"ev_demand <- get_demand(ev_sessions) energy_data %>%    left_join(ev_demand, by = \"datetime\") %>%    select(-starts_with(\"price\")) %>%    plot_ts(ylab = \"Power (kW)\", strokeWidth = 2) %>%    dySeries(\"solar\", \"PV production\", \"orange\") %>%    dyStackedRibbonGroup(c(\"HomeEV\",\"building\"), color = c(\"purple\", \"navy\")) opt_data <- energy_data %>%    rename(production = solar, static = building) sc_results <- ev_sessions %>%    smart_charging(     opt_data = opt_data,      opt_objective = \"grid\",     method = \"curtail\",     window_days = 1,      window_start_hour = 6   ) plot(sc_results, sessions = ev_sessions) ev_demand_flex <- sc_results$sessions %>%    get_demand()   df_flex <- energy_data %>%    select(datetime, building, solar) %>%    left_join(     ev_demand_flex, by = \"datetime\"   ) %>%    mutate(     consumption = building + HomeEV,     production = solar   )  plot_net_power(df_flex) df_static <- energy_data %>%    select(datetime, building, solar) %>%    left_join(     ev_demand, by = \"datetime\"   ) %>%    mutate(     consumption = building + HomeEV,     production = solar   )  plot_net_power(df_flex, original_df = df_static) sc_results <- ev_sessions %>%    smart_charging(     opt_data = opt_data,      opt_objective = \"grid\",     method = \"curtail\",     window_days = 1,      window_start_hour = 6,     energy_min = 0.5   ) plot(sc_results, sessions = ev_sessions)"},{"path":"https://mcanigueral.github.io/flextools/articles/smart-charging.html","id":"energy-cost-optimization","dir":"Articles","previous_headings":"Smart charging examples","what":"Energy cost optimization","title":"Smart charging","text":"seen, EV demand “HomeEV” user profile occur mainly evening peak hours, problem grid congestion also EV user since also expensive hours (dynamic tariffs): energy cost can optimized function smart_charging(), using energy cost optimization (.e. opt_objective = \"cost\", see information Energy cost optimization article. simulate using \"curtail\" method, considering optimization windows 24 hours 6:00AM 6:00AM, renaming variable \"solar\" \"production\" \"building\" \"static\" opt_data object, keeping price_imported price_exported variables: case setpoint gets high values price_imported variable low values. 2 options solve : Use lambda value Use combined optimization case use combined optimization, setting parameter opt_objective = 0.1 meaning 90% cost minimization 10% net power minimization: can visualize difference energy cost thanks optimization using function plot_energy_cost(). function requires data frame total consumption production, well price_imported price_exported variables. Moreover, can compare static flexible cases using original_df parameter. graph see demand shifted evening peak night valley, looking cheaper hours. can check difference total energy cost using get_energy_total_cost() function: Total energy cost static scenario: Total energy cost flexible scenario:","code":"energy_data %>%    select(     datetime, solar, building, price_imported, price_exported   ) %>%    left_join(ev_demand, by = \"datetime\") %>%    plot_ts(strokeWidth = 2) %>%    dyAxis(\"y\", \"Power (kW)\") %>%    dyAxis(\"y2\", \"Price (€/kWh)\") %>%    dyStackedRibbonGroup(c(\"HomeEV\",\"building\"), color = c(\"purple\", \"navy\")) %>%    dySeries(\"solar\", \"PV production\", \"orange\") %>%    dySeries(\"price_imported\", \"Imported energy price\", axis = \"y2\", color = \"red\", strokePattern = \"dashed\") %>%    dySeries(\"price_exported\",\"Exported energy price\",  axis = \"y2\", color = \"green\", strokePattern = \"dashed\") opt_data <- energy_data %>%    select(     datetime, production = solar, static = building,      price_imported, price_exported   ) head(opt_data) ## # A tibble: 6 × 5 ##   datetime            production static price_imported price_exported ##   <dttm>                   <dbl>  <dbl>          <dbl>          <dbl> ## 1 2023-05-01 00:00:00          0   3.06         0.0999          0.025 ## 2 2023-05-01 00:15:00          0   2.98         0.0999          0.025 ## 3 2023-05-01 00:30:00          0   2.90         0.0999          0.025 ## 4 2023-05-01 00:45:00          0   2.82         0.0999          0.025 ## 5 2023-05-01 01:00:00          0   2.74         0.0955          0.025 ## 6 2023-05-01 01:15:00          0   2.64         0.0955          0.025 sc_results <- ev_sessions %>%    smart_charging(     opt_data = opt_data,      opt_objective = \"cost\",     method = \"curtail\",     window_days = 1,      window_start_hour = 6   ) plot(sc_results) sc_results <- ev_sessions %>%    smart_charging(     opt_data = opt_data,      opt_objective = 0.1,     method = \"curtail\",     window_days = 1,      window_start_hour = 6   ) plot(sc_results, sessions = ev_sessions) ev_demand_flex <- sc_results$sessions %>%    get_demand()   df_flex <- energy_data %>%    select(datetime, building, solar, price_imported, price_exported) %>%    left_join(     ev_demand_flex, by = \"datetime\"   ) %>%    mutate(     consumption = building + HomeEV,     production = solar   )  df_static <- energy_data %>%    select(datetime, building, solar, price_imported, price_exported) %>%    left_join(     ev_demand, by = \"datetime\"   ) %>%    mutate(     consumption = building + HomeEV,     production = solar   )  plot_net_power(df_flex, original_df = df_static) get_energy_total_cost(df = df_static) ## [1] 168.7046 get_energy_total_cost(df = df_flex) ## [1] 158.4462"},{"path":"https://mcanigueral.github.io/flextools/articles/smart-charging.html","id":"energy-cost-with-grid-constraints","dir":"Articles","previous_headings":"Smart charging examples","what":"Energy cost with grid constraints","title":"Smart charging","text":"Even though can talk two different objectives, situation want minimize energy cost certain grid constraints. cases, optimization objective “cost” well, can make use grid_capacity variable configurable opt_data parameter smart_charging() function. grid_capacity variable opt_data tibble represents maximum consumption, EV demand also rest static demand (consumption = building + EV): let’s assume current demand grid capacity 10 kW. can visualize import_capacity parameter plot_net_power() function see net power surpasses grid capacity: can perform cost optimization parameter opt_objective = 0.1 meaning 90% cost minimization 10% net power minimization. , also include grid_capacity variable opt_data object: Now see total consumption remains limits grid capacity. cost optimized? seems consume valley hours (night) peak hours (evening), cost still decreased. can check difference total energy cost using get_energy_total_cost() function: Total energy cost static scenario: Total energy cost flexible scenario: case, cost optimization possible grid constrained.","code":"df_static <- energy_data %>%    left_join(ev_demand, by = \"datetime\") %>%    mutate(     consumption = building + HomeEV,     production = solar   ) plot_net_power(df_static) plot_net_power(df_static, import_capacity = 10) opt_data <- energy_data %>%    select(     datetime, production = solar, static = building,      price_imported, price_exported   ) %>%    mutate(     grid_capacity = 10   ) head(opt_data) ## # A tibble: 6 × 6 ##   datetime            production static price_imported price_exported ##   <dttm>                   <dbl>  <dbl>          <dbl>          <dbl> ## 1 2023-05-01 00:00:00          0   3.06         0.0999          0.025 ## 2 2023-05-01 00:15:00          0   2.98         0.0999          0.025 ## 3 2023-05-01 00:30:00          0   2.90         0.0999          0.025 ## 4 2023-05-01 00:45:00          0   2.82         0.0999          0.025 ## 5 2023-05-01 01:00:00          0   2.74         0.0955          0.025 ## 6 2023-05-01 01:15:00          0   2.64         0.0955          0.025 ## # ℹ 1 more variable: grid_capacity <dbl> sc_results <- ev_sessions %>%    smart_charging(     opt_data = opt_data,      opt_objective = 0.1,     method = \"curtail\",     window_days = 1,      window_start_hour = 6   ) df_flex <- energy_data %>%    left_join(sc_results$setpoints, by = \"datetime\") %>%    mutate(     consumption = building + HomeEV,     production = solar   ) plot_net_power(df_flex, original_df = df_static) plot_energy_cost(df_flex, original_df = df_static) get_energy_total_cost(df = df_static) ## [1] 168.7046 get_energy_total_cost(df = df_flex) ## [1] 172.3484"},{"path":"https://mcanigueral.github.io/flextools/articles/user-profiles.html","id":"ev-charging-sessions-simulation","dir":"Articles","previous_headings":"","what":"EV charging sessions simulation","title":"User profiles in smart charging","text":"First , can simulate EV sessions using evsim package, provides function evsim::get_custom_ev_model create custom EV model later simulate EV sessions evsim::simulate_sessions() function. can create EV model custom time-cycles user profiles. case, consider two different EV user profiles: Worktime: present working days. Low-variability connection times. High flexibility potential. Visit: present whole week different behaviour weekends. High variability connection times. Low flexibility potential. model, can simulate EV sessions three different days example: Finally can calculate time-series power demand EV function evsim::get_demand(), using parameter =\"Sessions\":","code":"# For workdays time cycle workdays_parameters <- dplyr::tibble(   profile = c(\"Worktime\", \"Visit\"),   ratio = c(50, 50),   start_mean = c(9, 11),   start_sd = c(1, 4),   duration_mean = c(8, 4),   duration_sd = c(0.5, 2),   energy_mean = c(15, 6),   energy_sd = c(4, 3) )  # For weekends time cycle weekends_parameters <- dplyr::tibble(   profile = \"Visit\",   ratio = 100,   start_mean = 12,   start_sd = 4,   duration_mean = 3,   duration_sd = 2,   energy_mean = 4,   energy_sd = 4 )  parameters_lst <- list(workdays_parameters, weekends_parameters)  # Get the whole model ev_model <- get_custom_ev_model(   names = c(\"Workdays\", \"Weekends\"),   months_lst = list(1:12, 1:12),   wdays_lst = list(1:5, 6:7),   parameters_lst = parameters_lst,   connection_log = FALSE,   energy_log = FALSE,   data_tz = \"Europe/Amsterdam\" ) set.seed(1234) ev_sessions <- simulate_sessions(   evmodel = ev_model,    sessions_day = tibble(time_cycle = c(\"Workdays\", \"Weekends\"), n_sessions = c(10, 10)),   user_profiles = NULL,   charging_powers = tibble(power = 3.7, ratio = 1),    dates = seq.Date(from = dmy(\"05-08-2024\"), to = dmy(\"05-08-2024\")+days(2), by = \"day\"),    resolution = 15 ) ## # A tibble: 30 × 11 ##    Session Timecycle Profile  ConnectionStartDateTime ConnectionEndDateTime ##    <chr>   <chr>     <chr>    <dttm>                  <dttm>                ##  1 S1      Workdays  Worktime 2024-08-05 08:45:00     2024-08-05 16:58:00   ##  2 S2      Workdays  Worktime 2024-08-05 09:15:00     2024-08-05 17:04:00   ##  3 S3      Workdays  Worktime 2024-08-05 09:30:00     2024-08-05 17:37:00   ##  4 S4      Workdays  Visit    2024-08-05 09:45:00     2024-08-05 12:29:00   ##  5 S5      Workdays  Worktime 2024-08-05 09:45:00     2024-08-05 17:22:00   ##  6 S6      Workdays  Visit    2024-08-05 10:00:00     2024-08-05 14:29:00   ##  7 S7      Workdays  Visit    2024-08-05 10:45:00     2024-08-05 17:46:00   ##  8 S8      Workdays  Visit    2024-08-05 12:45:00     2024-08-05 18:29:00   ##  9 S9      Workdays  Visit    2024-08-05 14:45:00     2024-08-05 18:59:00   ## 10 S10     Workdays  Visit    2024-08-05 20:00:00     2024-08-05 23:02:00   ## # ℹ 20 more rows ## # ℹ 6 more variables: ChargingStartDateTime <dttm>, ChargingEndDateTime <dttm>, ## #   Power <dbl>, Energy <dbl>, ConnectionHours <dbl>, ChargingHours <dbl> ev_demand <- ev_sessions %>%    get_demand(by = \"Profile\")"},{"path":"https://mcanigueral.github.io/flextools/articles/user-profiles.html","id":"smart-charging-to-solve-grid-congestion","dir":"Articles","previous_headings":"","what":"Smart charging to solve grid congestion","title":"User profiles in smart charging","text":"Imagine charge EVs installation maximum grid connection 12 kW: Since peak goes 12kW, need use smart charging allow EV users charge grid capacity. case, decide use flexibility Worktime user profile, since clear flexibility potential compared Visit user profile. order define grid capacity smart_charing() function, column name EV user profile sessions parameter (example “Worktime”) must found opt_data parameter. Therefore, \"Worktime\" column added opt_data object setpoint EV user profile “Worktime”, defined difference grid capacity rest power demand (case “Visit” demand): Considering optimization windows 24 hours 6:00AM 6:00AM, \"curtail\" smart charging method: can see Worktime power demand adapted non-flexbile users, .e. Visit user profile, order surpass capacity limit 12 kW. Moreover, can define percentage every user profile responsive smart charging signals parameter responsive smart_charging() function. example, can set , working days, 60% Worktime users 30% Visit user accept participate demand-response program: see now participation EV users enough reach objective. increase participation Worktime users 90% accomplish grid capacity : can say need least 90% Worktime users participate want respect grid constraints.","code":"grid_capacity <- 12 opt_data <- tibble(   datetime = ev_demand$datetime, # Same date-time sequence than the demand   Worktime = grid_capacity - ev_demand$Visit ) opt_data %>%    dyplot(ylab = \"Power demand (kW)\", stackedGraph = T, fillGraph = T, legend_width = 200) %>%    dySeries(\"Worktime\", \"Worktime free capacity\", color = \"navy\", strokeWidth = 2, strokePattern = \"dashed\") %>%    dyLimit(grid_capacity, \"Grid capacity\", color = \"red\") sc_results <- ev_sessions %>%    smart_charging(     opt_data = opt_data,      opt_objective = \"none\",     method = \"curtail\",     window_days = 1,      window_start_hour = 6   ) ev_demand_opt <- sc_results$sessions %>%    get_demand(by = \"Profile\") sc_results <- ev_sessions %>%    smart_charging(     opt_data = opt_data,      opt_objective = \"none\",     method = \"curtail\",     window_days = 1,      window_start_hour = 6,     responsive = list(       Workdays = list(Worktime = 0.6, Visit = 0.3)     )   ) ev_demand_opt <- sc_results$sessions %>%    get_demand(by = \"Profile\") sc_results <- ev_sessions %>%    smart_charging(     opt_data = opt_data,      opt_objective = \"none\",     method = \"curtail\",     window_days = 1,      window_start_hour = 6,     responsive = list(       Workdays = list(Worktime = 0.9, Visit = 0.3)     )   ) ev_demand_opt <- sc_results$sessions %>%    get_demand(by = \"Profile\")"},{"path":"https://mcanigueral.github.io/flextools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marc Cañigueral. Author, maintainer.","code":""},{"path":"https://mcanigueral.github.io/flextools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cañigueral M (2025). flextools: Tools demand-response simulations. R package version 1.0.0, https://mcanigueral.github.io/flextools/, https://github.com/mcanigueral/flextools/.","code":"@Manual{,   title = {flextools: Tools for demand-response simulations},   author = {Marc Cañigueral},   year = {2025},   note = {R package version 1.0.0, https://mcanigueral.github.io/flextools/},   url = {https://github.com/mcanigueral/flextools/}, }"},{"path":[]},{"path":"https://mcanigueral.github.io/flextools/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Tools for demand-response simulations","text":"flextools package provides functions : Optimizing time-series power loads minimizing net power interaction grid energy cost Smart charging simulation considering different methods coordinate charging sessions, postpone, curtail interrupt Simulation battery systems optimization purposes just business--usual battery behavior","code":""},{"path":"https://mcanigueral.github.io/flextools/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Tools for demand-response simulations","text":"want test flextools data set time-series energy, best place start Get started chapter package website.","code":""},{"path":"https://mcanigueral.github.io/flextools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for demand-response simulations","text":"Since moment flextools yet CRAN, can install latest development version GitHub:","code":"# Latest development version # install.packages(\"remotes\") remotes::install_github(\"mcanigueral/flextools\")"},{"path":"https://mcanigueral.github.io/flextools/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":"Tools for demand-response simulations","text":"encounter clear bug, please open issue minimal reproducible example GitHub. questions discussion, please send mail marc.canigueral@udg.edu. technical details, can read following academic articles algorithms used package: Increasing hosting capacity low-voltage distribution network using smart charging based local dynamic capacity limits. Sustainable Energy, Grids Networks, vol. 41. Elsevier BV, p. 101626, March 2025. DOI link. Potential benefits scheduling electric vehicle sessions limiting charging power. CIRED Porto Workshop 2022: E-mobility power distribution systems. Institution Engineering Technology, 2022. DOI link. Flexibility management electric vehicles based user profiles: Arnhem case study. International Journal Electrical Power Energy Systems, vol. 133. Elsevier BV, p. 107195, Dec. 2021. DOI link.","code":""},{"path":"https://mcanigueral.github.io/flextools/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Tools for demand-response simulations","text":"work developed PhD program eXiT research group University Girona (Catalonia) collaboration Resourcefully, energy transition consulting company based Amsterdam, Netherlands.","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/add_battery_optimization.html","id":null,"dir":"Reference","previous_headings":"","what":"Battery optimal charging/discharging profile — add_battery_optimization","title":"Battery optimal charging/discharging profile — add_battery_optimization","text":"See formulation optimization problems documentation website.","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/add_battery_optimization.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Battery optimal charging/discharging profile — add_battery_optimization","text":"","code":"add_battery_optimization(   opt_data,   opt_objective = \"grid\",   Bcap,   Bc,   Bd,   SOCmin = 0,   SOCmax = 100,   SOCini = NULL,   window_days = 1,   window_start_hour = 0,   flex_window_hours = 24,   lambda = 0,   mc.cores = 1 )"},{"path":"https://mcanigueral.github.io/flextools/reference/add_battery_optimization.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Battery optimal charging/discharging profile — add_battery_optimization","text":"opt_data tibble, optimization contextual data. first column must named datetime (mandatory) containing date time sequence optimization algorithm applied. columns can (optional): static: static power demand (kW) sectors like buildings, offices, etc. grid_capacity: maximum imported power grid (kW), example contracted power energy company. production: local power generation (kW). used opt_objective = \"grid\". price_imported: price imported energy (€/kWh). used opt_objective = \"cost\". price_exported: price exported energy (€/kWh). used opt_objective = \"cost\". price_turn_down: price turn-energy use (€/kWh). used opt_objective = \"cost\". price_turn_up: price turn-energy use (€/kWh). used opt_objective = \"cost\". opt_objective character, optimization objective \"grid\" (default) \"cost\" Bcap numeric, capacity battery Bc numeric, maximum charging power Bd numeric, maximum discharging power SOCmin numeric, minimum State--Charge battery SOCmax numeric, maximum State--Charge battery SOCini numeric, required State--Charge beginning/end optimization window window_days integer, number days consider optimization window. window_start_hour integer, starting hour optimization window. flex_window_hours integer, flexibility window length, hours. optional feature lets apply flexibility hours window_start_hour. must lower window_days*24 hours. lambda numeric, penalty change flexible load. mc.cores integer, number cores use. Must least one, parallelization requires least two cores.","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/add_battery_optimization.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Battery optimal charging/discharging profile — add_battery_optimization","text":"numeric vector","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/add_battery_simple.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple battery profile — add_battery_simple","title":"Simple battery profile — add_battery_simple","text":"Charging surplus, discharging deficit","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/add_battery_simple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple battery profile — add_battery_simple","text":"","code":"add_battery_simple(G, L, Bcap, Bc, Bd, SOCini = 0)"},{"path":"https://mcanigueral.github.io/flextools/reference/add_battery_simple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple battery profile — add_battery_simple","text":"G numeric vector, renewable generation profile L numeric vector, load profile Bcap numeric, capacity battery Bc numeric, maximum charging power Bd numeric, maximum discharging power SOCini numeric, required State--Charge window beginning","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/add_battery_simple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple battery profile — add_battery_simple","text":"numeric vector","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/add_extra_days.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an extra day at the beginning and the end of datetime sequence using the last and first day of the data — add_extra_days","title":"Add an extra day at the beginning and the end of datetime sequence using the last and first day of the data — add_extra_days","text":"Add extra day beginning end datetime sequence using last first day data","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/add_extra_days.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an extra day at the beginning and the end of datetime sequence using the last and first day of the data — add_extra_days","text":"","code":"add_extra_days(df)"},{"path":"https://mcanigueral.github.io/flextools/reference/add_extra_days.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an extra day at the beginning and the end of datetime sequence using the last and first day of the data — add_extra_days","text":"df data frame, first column named datetime type datetime","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/add_extra_days.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an extra day at the beginning and the end of datetime sequence using the last and first day of the data — add_extra_days","text":"tibble","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/aggregate_timeseries.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate multiple timeseries columns to a single one — aggregate_timeseries","title":"Aggregate multiple timeseries columns to a single one — aggregate_timeseries","text":"first column datetime kept.","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/aggregate_timeseries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate multiple timeseries columns to a single one — aggregate_timeseries","text":"","code":"aggregate_timeseries(df, varname, omit = NULL)"},{"path":"https://mcanigueral.github.io/flextools/reference/aggregate_timeseries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate multiple timeseries columns to a single one — aggregate_timeseries","text":"df data.frame tibble, first column name datetime class datetime rest columns numeric varname character, name aggregation column omit character, name columns aggregate","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/aggregate_timeseries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate multiple timeseries columns to a single one — aggregate_timeseries","text":"tibble","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/aggregate_timeseries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate multiple timeseries columns to a single one — aggregate_timeseries","text":"","code":"# Example data set with 2 identical building profiles df <- dplyr::select(   energy_profiles, datetime, building1 = building, building2 = building ) head(df) #> # A tibble: 6 × 3 #>   datetime            building1 building2 #>   <dttm>                  <dbl>     <dbl> #> 1 2023-01-01 00:00:00      2.61      2.61 #> 2 2023-01-01 00:15:00      2.42      2.42 #> 3 2023-01-01 00:30:00      2.23      2.23 #> 4 2023-01-01 00:45:00      2.04      2.04 #> 5 2023-01-01 01:00:00      1.85      1.85 #> 6 2023-01-01 01:15:00      1.78      1.78  # Aggregate the total building demand head(aggregate_timeseries(df, varname = \"total_buildings\")) #> # A tibble: 6 × 2 #>   datetime            total_buildings #>   <dttm>                        <dbl> #> 1 2023-01-01 00:00:00            5.23 #> 2 2023-01-01 00:15:00            4.85 #> 3 2023-01-01 00:30:00            4.47 #> 4 2023-01-01 00:45:00            4.09 #> 5 2023-01-01 01:00:00            3.71 #> 6 2023-01-01 01:15:00            3.56"},{"path":"https://mcanigueral.github.io/flextools/reference/change_timeseries_resolution.html","id":null,"dir":"Reference","previous_headings":"","what":"Change time resolution of a time-series data frame — change_timeseries_resolution","title":"Change time resolution of a time-series data frame — change_timeseries_resolution","text":"Change time resolution time-series data frame","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/change_timeseries_resolution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change time resolution of a time-series data frame — change_timeseries_resolution","text":"","code":"change_timeseries_resolution(df, resolution_out, method)"},{"path":"https://mcanigueral.github.io/flextools/reference/change_timeseries_resolution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change time resolution of a time-series data frame — change_timeseries_resolution","text":"df tibble, first column name datetime class datetime rest columns numeric resolution_out integer, desired interval minutes two consecutive datetime values method character, interpolate, repeat divide resolution increased, average, first sum resolution decreased. See Examples information.","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/change_timeseries_resolution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change time resolution of a time-series data frame — change_timeseries_resolution","text":"tibble","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/change_timeseries_resolution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change time resolution of a time-series data frame — change_timeseries_resolution","text":"","code":"# Example time-series data set: time resolution 15 minutes head(energy_profiles) #> # A tibble: 6 × 7 #>   datetime            solar building price_imported price_exported price_turn_up #>   <dttm>              <dbl>    <dbl>          <dbl>          <dbl>         <dbl> #> 1 2023-01-01 00:00:00     0     2.61       -0.00146          0.025        0      #> 2 2023-01-01 00:15:00     0     2.42       -0.00146          0.025        0      #> 3 2023-01-01 00:30:00     0     2.23       -0.00146          0.025        0      #> 4 2023-01-01 00:45:00     0     2.04       -0.00146          0.025        0      #> 5 2023-01-01 01:00:00     0     1.85       -0.00152          0.025        0.0328 #> 6 2023-01-01 01:15:00     0     1.78       -0.00152          0.025        0.0351 #> # ℹ 1 more variable: price_turn_down <dbl>  # Change time resolution to 60 minutes # It is decreasing time resolution, so we use the `average` method head(change_timeseries_resolution(   df = energy_profiles,   resolution_out = 60,   method = \"average\" )) #> # A tibble: 6 × 7 #>   datetime            solar building price_imported price_exported price_turn_up #>   <dttm>              <dbl>    <dbl>          <dbl>          <dbl>         <dbl> #> 1 2023-01-01 00:00:00     0     2.33       -0.00146          0.025        0      #> 2 2023-01-01 01:00:00     0     1.74       -0.00152          0.025        0.0320 #> 3 2023-01-01 02:00:00     0     1.55       -0.005            0.025        0.0225 #> 4 2023-01-01 03:00:00     0     1.48       -0.0046           0.025        0      #> 5 2023-01-01 04:00:00     0     1.39       -0.00405          0.025        0      #> 6 2023-01-01 05:00:00     0     1.43       -0.0036           0.025        0      #> # ℹ 1 more variable: price_turn_down <dbl>"},{"path":"https://mcanigueral.github.io/flextools/reference/change_timeseries_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the year of a time series data frame keeping the original weekdays — change_timeseries_year","title":"Change the year of a time series data frame keeping the original weekdays — change_timeseries_year","text":"input df must contain full-week time-series profiles order arrange data according day week. example, first day df Monday last one must Sunday.","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/change_timeseries_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the year of a time series data frame keeping the original weekdays — change_timeseries_year","text":"","code":"change_timeseries_year(df, year_out)"},{"path":"https://mcanigueral.github.io/flextools/reference/change_timeseries_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the year of a time series data frame keeping the original weekdays — change_timeseries_year","text":"df tibble first column datetime year_out integer, year desired datetime","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/change_timeseries_year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change the year of a time series data frame keeping the original weekdays — change_timeseries_year","text":"tibble","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/change_timeseries_year.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the year of a time series data frame keeping the original weekdays — change_timeseries_year","text":"","code":"# Example time-series data set: year 2023 head(energy_profiles) #> # A tibble: 6 × 7 #>   datetime            solar building price_imported price_exported price_turn_up #>   <dttm>              <dbl>    <dbl>          <dbl>          <dbl>         <dbl> #> 1 2023-01-01 00:00:00     0     2.61       -0.00146          0.025        0      #> 2 2023-01-01 00:15:00     0     2.42       -0.00146          0.025        0      #> 3 2023-01-01 00:30:00     0     2.23       -0.00146          0.025        0      #> 4 2023-01-01 00:45:00     0     2.04       -0.00146          0.025        0      #> 5 2023-01-01 01:00:00     0     1.85       -0.00152          0.025        0.0328 #> 6 2023-01-01 01:15:00     0     1.78       -0.00152          0.025        0.0351 #> # ℹ 1 more variable: price_turn_down <dbl>  # Change year to 2025 # Note that the data from columns has changed according to the weekday head(change_timeseries_year(   df = energy_profiles,   year_out = 2025 )) #> # A tibble: 6 × 7 #>   datetime            solar building price_imported price_exported price_turn_up #>   <dttm>              <dbl>    <dbl>          <dbl>          <dbl>         <dbl> #> 1 2025-01-01 00:00:00     0     1.60         0.0684          0.025             0 #> 2 2025-01-01 00:15:00     0     1.56         0.0684          0.025             0 #> 3 2025-01-01 00:30:00     0     1.51         0.0684          0.025             0 #> 4 2025-01-01 00:45:00     0     1.47         0.0684          0.025             0 #> 5 2025-01-01 01:00:00     0     1.43         0.0379          0.025             0 #> 6 2025-01-01 01:15:00     0     1.41         0.0379          0.025             0 #> # ℹ 1 more variable: price_turn_down <dbl>"},{"path":"https://mcanigueral.github.io/flextools/reference/convert_time_num_to_period.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert numeric time value to a datetime period (hour-based) — convert_time_num_to_period","title":"Convert numeric time value to a datetime period (hour-based) — convert_time_num_to_period","text":"Convert numeric time value datetime period (hour-based)","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/convert_time_num_to_period.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert numeric time value to a datetime period (hour-based) — convert_time_num_to_period","text":"","code":"convert_time_num_to_period(time_num)"},{"path":"https://mcanigueral.github.io/flextools/reference/convert_time_num_to_period.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert numeric time value to a datetime period (hour-based) — convert_time_num_to_period","text":"time_num Numeric time value (hour-based)","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/decrease_numeric_resolution.html","id":null,"dir":"Reference","previous_headings":"","what":"Decrease resolution of a numeric vector — decrease_numeric_resolution","title":"Decrease resolution of a numeric vector — decrease_numeric_resolution","text":"Decrease resolution numeric vector","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/decrease_numeric_resolution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decrease resolution of a numeric vector — decrease_numeric_resolution","text":"","code":"decrease_numeric_resolution(y, n, method = c(\"average\", \"first\", \"sum\"))"},{"path":"https://mcanigueral.github.io/flextools/reference/decrease_numeric_resolution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decrease resolution of a numeric vector — decrease_numeric_resolution","text":"y original numeric vector n integer, number intra-values (counting original value first one) method character, average, first sum valid options","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/decrease_numeric_resolution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decrease resolution of a numeric vector — decrease_numeric_resolution","text":"numeric vector","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/decrease_timeseries_resolution.html","id":null,"dir":"Reference","previous_headings":"","what":"Decrease time resolution of timeseries data frame — decrease_timeseries_resolution","title":"Decrease time resolution of timeseries data frame — decrease_timeseries_resolution","text":"Decrease time resolution timeseries data frame","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/decrease_timeseries_resolution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decrease time resolution of timeseries data frame — decrease_timeseries_resolution","text":"","code":"decrease_timeseries_resolution(   df,   resolution_mins,   method = c(\"average\", \"first\", \"sum\") )"},{"path":"https://mcanigueral.github.io/flextools/reference/decrease_timeseries_resolution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decrease time resolution of timeseries data frame — decrease_timeseries_resolution","text":"df data.frame tibble, first column name datetime class datetime rest columns numeric resolution_mins integer, interval minutes two consecutive datetime values method character, average, first sum valid options","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/decrease_timeseries_resolution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decrease time resolution of timeseries data frame — decrease_timeseries_resolution","text":"tibble","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/energy_profiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Time-series profiles for consumption, production and energy prices — energy_profiles","title":"Time-series profiles for consumption, production and energy prices — energy_profiles","text":"tibble time-series profiles solar production, building consumption energy prices","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/energy_profiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time-series profiles for consumption, production and energy prices — energy_profiles","text":"","code":"energy_profiles"},{"path":"https://mcanigueral.github.io/flextools/reference/energy_profiles.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Time-series profiles for consumption, production and energy prices — energy_profiles","text":"tibble solar Solar PV production (kW) building Consumption profile building (kW) price_imported Imported energy price (€/kWh) price_exported Exported energy price (€/kWh) price_turn_up Balancing price increasing demand (€/kWh) price_turn_down Balancing price decreasing demand (€/kWh)","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_conversion_losses.html","id":null,"dir":"Reference","previous_headings":"","what":"Losses due to charging/discharging process — get_conversion_losses","title":"Losses due to charging/discharging process — get_conversion_losses","text":"Losses due charging/discharging process","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_conversion_losses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Losses due to charging/discharging process — get_conversion_losses","text":"","code":"get_conversion_losses(power, loss_charge, loss_discharge)"},{"path":"https://mcanigueral.github.io/flextools/reference/get_conversion_losses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Losses due to charging/discharging process — get_conversion_losses","text":"power numeric vector, positive charging negative discharging loss_charge numeric, charging loss percentage (%) loss_discharge numeric, discharging loss percentage (%)","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_conversion_losses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Losses due to charging/discharging process — get_conversion_losses","text":"numeric vector","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_energy_balance.html","id":null,"dir":"Reference","previous_headings":"","what":"Get energy balance time-series — get_energy_balance","title":"Get energy balance time-series — get_energy_balance","text":"Input data frame must columns consumption, production. Output data frame extra columns net, local, imported, exported. Column net positive consumption production","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_energy_balance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get energy balance time-series — get_energy_balance","text":"","code":"get_energy_balance(df)"},{"path":"https://mcanigueral.github.io/flextools/reference/get_energy_balance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get energy balance time-series — get_energy_balance","text":"df tibble, columns datetime, consumption, production","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_energy_balance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get energy balance time-series — get_energy_balance","text":"tibble","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_energy_balance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get energy balance time-series — get_energy_balance","text":"","code":"df <- dplyr::select(   energy_profiles,   datetime,   production = solar,   consumption = building ) head(df) #> # A tibble: 6 × 3 #>   datetime            production consumption #>   <dttm>                   <dbl>       <dbl> #> 1 2023-01-01 00:00:00          0        2.61 #> 2 2023-01-01 00:15:00          0        2.42 #> 3 2023-01-01 00:30:00          0        2.23 #> 4 2023-01-01 00:45:00          0        2.04 #> 5 2023-01-01 01:00:00          0        1.85 #> 6 2023-01-01 01:15:00          0        1.78  head(get_energy_balance(df)) #> # A tibble: 6 × 7 #>   datetime            production consumption   net local imported exported #>   <dttm>                   <dbl>       <dbl> <dbl> <dbl>    <dbl>    <dbl> #> 1 2023-01-01 00:00:00          0        2.61  2.61     0     2.61        0 #> 2 2023-01-01 00:15:00          0        2.42  2.42     0     2.42        0 #> 3 2023-01-01 00:30:00          0        2.23  2.23     0     2.23        0 #> 4 2023-01-01 00:45:00          0        2.04  2.04     0     2.04        0 #> 5 2023-01-01 01:00:00          0        1.85  1.85     0     1.85        0 #> 6 2023-01-01 01:15:00          0        1.78  1.78     0     1.78        0"},{"path":"https://mcanigueral.github.io/flextools/reference/get_energy_cost.html","id":null,"dir":"Reference","previous_headings":"","what":"Get energy cost time-series — get_energy_cost","title":"Get energy cost time-series — get_energy_cost","text":"energy cost (Euros) based imported exported energy corresponding prices.","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_energy_cost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get energy cost time-series — get_energy_cost","text":"","code":"get_energy_cost(df)"},{"path":"https://mcanigueral.github.io/flextools/reference/get_energy_cost.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get energy cost time-series — get_energy_cost","text":"df tibble, columns datetime, consumption, production, price_imported price_exported","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_energy_cost.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get energy cost time-series — get_energy_cost","text":"tibble","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_energy_cost.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get energy cost time-series — get_energy_cost","text":"","code":"df <- dplyr::select(   energy_profiles,   datetime,   production = solar,   consumption = building,   price_imported,   price_exported ) df <- dplyr::slice_head(df, n = 300) head(df) #> # A tibble: 6 × 5 #>   datetime            production consumption price_imported price_exported #>   <dttm>                   <dbl>       <dbl>          <dbl>          <dbl> #> 1 2023-01-01 00:00:00          0        2.61       -0.00146          0.025 #> 2 2023-01-01 00:15:00          0        2.42       -0.00146          0.025 #> 3 2023-01-01 00:30:00          0        2.23       -0.00146          0.025 #> 4 2023-01-01 00:45:00          0        2.04       -0.00146          0.025 #> 5 2023-01-01 01:00:00          0        1.85       -0.00152          0.025 #> 6 2023-01-01 01:15:00          0        1.78       -0.00152          0.025  head(get_energy_cost(df)) #> # A tibble: 6 × 10 #>   datetime            production consumption price_imported price_exported   net #>   <dttm>                   <dbl>       <dbl>          <dbl>          <dbl> <dbl> #> 1 2023-01-01 00:00:00          0        2.61       -0.00146          0.025  2.61 #> 2 2023-01-01 00:15:00          0        2.42       -0.00146          0.025  2.42 #> 3 2023-01-01 00:30:00          0        2.23       -0.00146          0.025  2.23 #> 4 2023-01-01 00:45:00          0        2.04       -0.00146          0.025  2.04 #> 5 2023-01-01 01:00:00          0        1.85       -0.00152          0.025  1.85 #> 6 2023-01-01 01:15:00          0        1.78       -0.00152          0.025  1.78 #> # ℹ 4 more variables: local <dbl>, imported <dbl>, exported <dbl>, cost <dbl>"},{"path":"https://mcanigueral.github.io/flextools/reference/get_energy_kpis.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain a list of energy indicators given the energy profiles — get_energy_kpis","title":"Obtain a list of energy indicators given the energy profiles — get_energy_kpis","text":"Obtain list energy indicators given energy profiles","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_energy_kpis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain a list of energy indicators given the energy profiles — get_energy_kpis","text":"","code":"get_energy_kpis(df, kg_co2_kwh = 0.5)"},{"path":"https://mcanigueral.github.io/flextools/reference/get_energy_kpis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain a list of energy indicators given the energy profiles — get_energy_kpis","text":"df data.frame tibble, columns datetime, consumption, production kg_co2_kwh kg_co2_kwh factor CO2 kg emissions per kWh energy consumed distribution grid","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_energy_kpis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain a list of energy indicators given the energy profiles — get_energy_kpis","text":"named list","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_energy_kpis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain a list of energy indicators given the energy profiles — get_energy_kpis","text":"","code":"df <- dplyr::select(   energy_profiles,   datetime,   production = solar,   consumption = building ) head(df) #> # A tibble: 6 × 3 #>   datetime            production consumption #>   <dttm>                   <dbl>       <dbl> #> 1 2023-01-01 00:00:00          0        2.61 #> 2 2023-01-01 00:15:00          0        2.42 #> 3 2023-01-01 00:30:00          0        2.23 #> 4 2023-01-01 00:45:00          0        2.04 #> 5 2023-01-01 01:00:00          0        1.85 #> 6 2023-01-01 01:15:00          0        1.78  get_energy_kpis(df) #> $total_consumption #> [1] 23114 #>  #> $total_production #> [1] 7000 #>  #> $total_local #> [1] 5296.591 #>  #> $total_exported #> [1] 1703.409 #>  #> $total_imported #> [1] 17817.41 #>  #> $selfconsumption #> [1] 0.7566558 #>  #> $selfsufficiency #> [1] 0.2291508 #>  #> $peak_to_grid #> [1] 4.487642 #>  #> $peak_from_grid #> [1] 6.863723 #>  #> $peak_to_grid_dttm #> [1] \"2023-06-06 11:00:00 CEST\" #>  #> $peak_from_grid_dttm #> [1] \"2023-01-02 17:00:00 CET\" #>  #> $kg_co2 #> [1] 8908.705 #>"},{"path":"https://mcanigueral.github.io/flextools/reference/get_energy_total_cost.html","id":null,"dir":"Reference","previous_headings":"","what":"Get energy total cost (one number) — get_energy_total_cost","title":"Get energy total cost (one number) — get_energy_total_cost","text":"total energy cost (Euros) based imported exported energy corresponding prices.","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_energy_total_cost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get energy total cost (one number) — get_energy_total_cost","text":"","code":"get_energy_total_cost(df)"},{"path":"https://mcanigueral.github.io/flextools/reference/get_energy_total_cost.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get energy total cost (one number) — get_energy_total_cost","text":"df tibble, columns datetime, consumption, production, price_imported price_exported","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_energy_total_cost.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get energy total cost (one number) — get_energy_total_cost","text":"tibble","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_energy_total_cost.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get energy total cost (one number) — get_energy_total_cost","text":"","code":"df <- dplyr::select(   energy_profiles,   datetime,   production = solar,   consumption = building,   price_imported,   price_exported ) head(df) #> # A tibble: 6 × 5 #>   datetime            production consumption price_imported price_exported #>   <dttm>                   <dbl>       <dbl>          <dbl>          <dbl> #> 1 2023-01-01 00:00:00          0        2.61       -0.00146          0.025 #> 2 2023-01-01 00:15:00          0        2.42       -0.00146          0.025 #> 3 2023-01-01 00:30:00          0        2.23       -0.00146          0.025 #> 4 2023-01-01 00:45:00          0        2.04       -0.00146          0.025 #> 5 2023-01-01 01:00:00          0        1.85       -0.00152          0.025 #> 6 2023-01-01 01:15:00          0        1.78       -0.00152          0.025  get_energy_total_cost(df) #> [1] 7691.35"},{"path":"https://mcanigueral.github.io/flextools/reference/get_imbalance_income.html","id":null,"dir":"Reference","previous_headings":"","what":"Get imbalance income time-series — get_imbalance_income","title":"Get imbalance income time-series — get_imbalance_income","text":"energy income (Euros) based difference baseline final power profile certain demand. difference represents optimal changes due flexibility, function calculates income applying demand-side flexibility.","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_imbalance_income.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get imbalance income time-series — get_imbalance_income","text":"","code":"get_imbalance_income(df)"},{"path":"https://mcanigueral.github.io/flextools/reference/get_imbalance_income.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get imbalance income time-series — get_imbalance_income","text":"df tibble, columns datetime, demand_baseline, demand_final, price_turn_up price_turn_down","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_imbalance_income.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get imbalance income time-series — get_imbalance_income","text":"tibble","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_imbalance_income.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get imbalance income time-series — get_imbalance_income","text":"","code":"df <- dplyr::select(   energy_profiles,   datetime,   demand_baseline = building,   price_turn_up,   price_turn_down )  # Build another random consumption profile building_variation <- rnorm(nrow(df), mean = 0, sd = 1) df <- dplyr::mutate(   df, demand_final = demand_baseline + building_variation ) head(df) #> # A tibble: 6 × 5 #>   datetime            demand_baseline price_turn_up price_turn_down demand_final #>   <dttm>                        <dbl>         <dbl>           <dbl>        <dbl> #> 1 2023-01-01 00:00:00            2.61        0               0.209         1.21  #> 2 2023-01-01 00:15:00            2.42        0               0.0233        2.68  #> 3 2023-01-01 00:30:00            2.23        0               0.0256       -0.203 #> 4 2023-01-01 00:45:00            2.04        0               0.0406        2.04  #> 5 2023-01-01 01:00:00            1.85        0.0328          0.0406        2.48  #> 6 2023-01-01 01:15:00            1.78        0.0351          0             2.93   head(get_imbalance_income(df)) #> # A tibble: 6 × 9 #>   datetime            demand_baseline price_turn_up price_turn_down demand_final #>   <dttm>                        <dbl>         <dbl>           <dbl>        <dbl> #> 1 2023-01-01 00:00:00            2.61        0               0.209         1.21  #> 2 2023-01-01 00:15:00            2.42        0               0.0233        2.68  #> 3 2023-01-01 00:30:00            2.23        0               0.0256       -0.203 #> 4 2023-01-01 00:45:00            2.04        0               0.0406        2.04  #> 5 2023-01-01 01:00:00            1.85        0.0328          0.0406        2.48  #> 6 2023-01-01 01:15:00            1.78        0.0351          0             2.93  #> # ℹ 4 more variables: demand_diff <dbl>, demand_turn_up <dbl>, #> #   demand_turn_down <dbl>, income <dbl>"},{"path":"https://mcanigueral.github.io/flextools/reference/get_imbalance_total_income.html","id":null,"dir":"Reference","previous_headings":"","what":"Get imbalance total income (one number) — get_imbalance_total_income","title":"Get imbalance total income (one number) — get_imbalance_total_income","text":"total energy income (Euros) based difference baseline final power profile certain demand. difference represents optimal changes due flexibility, function calculates income applying demand-side flexibility.","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_imbalance_total_income.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get imbalance total income (one number) — get_imbalance_total_income","text":"","code":"get_imbalance_total_income(df)"},{"path":"https://mcanigueral.github.io/flextools/reference/get_imbalance_total_income.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get imbalance total income (one number) — get_imbalance_total_income","text":"df tibble, columns datetime, demand_baseline, demand_final, price_turn_up price_turn_down","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_imbalance_total_income.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get imbalance total income (one number) — get_imbalance_total_income","text":"tibble","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_imbalance_total_income.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get imbalance total income (one number) — get_imbalance_total_income","text":"","code":"df <- dplyr::select(   energy_profiles,   datetime,   demand_baseline = building,   price_turn_up,   price_turn_down )  # Build another random consumption profile building_variation <- rnorm(nrow(df), mean = 0, sd = 1) df <- dplyr::mutate(   df, demand_final = demand_baseline + building_variation ) head(df) #> # A tibble: 6 × 5 #>   datetime            demand_baseline price_turn_up price_turn_down demand_final #>   <dttm>                        <dbl>         <dbl>           <dbl>        <dbl> #> 1 2023-01-01 00:00:00            2.61        0               0.209         1.49  #> 2 2023-01-01 00:15:00            2.42        0               0.0233        3.00  #> 3 2023-01-01 00:30:00            2.23        0               0.0256        2.30  #> 4 2023-01-01 00:45:00            2.04        0               0.0406        0.566 #> 5 2023-01-01 01:00:00            1.85        0.0328          0.0406        2.63  #> 6 2023-01-01 01:15:00            1.78        0.0351          0             1.12   get_imbalance_total_income(df) #> [1] 1424.484"},{"path":"https://mcanigueral.github.io/flextools/reference/get_load_duration_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Load duration curve table — get_load_duration_curve","title":"Load duration curve table — get_load_duration_curve","text":"Load Duration Curve (LDC) represents percentage time specific value power used electrical grid specific time period. widely used power system planning grid reliability assessments.","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_load_duration_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load duration curve table — get_load_duration_curve","text":"","code":"get_load_duration_curve(df)"},{"path":"https://mcanigueral.github.io/flextools/reference/get_load_duration_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load duration curve table — get_load_duration_curve","text":"df tibble, columns datetime, consumption, production","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_load_duration_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load duration curve table — get_load_duration_curve","text":"dygraphs plot","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_load_duration_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load duration curve table — get_load_duration_curve","text":"","code":"df <- dplyr::select(   energy_profiles,   datetime,   consumption = building )  head(df) #> # A tibble: 6 × 2 #>   datetime            consumption #>   <dttm>                    <dbl> #> 1 2023-01-01 00:00:00        2.61 #> 2 2023-01-01 00:15:00        2.42 #> 3 2023-01-01 00:30:00        2.23 #> 4 2023-01-01 00:45:00        2.04 #> 5 2023-01-01 01:00:00        1.85 #> 6 2023-01-01 01:15:00        1.78  get_load_duration_curve(df) #> # A tibble: 7 × 2 #>      pct power #>    <dbl> <dbl> #> 1   0.01 6.78  #> 2   0.37 5.78  #> 3   4.77 4.78  #> 4  14.2  3.78  #> 5  41.1  2.78  #> 6  73.8  1.78  #> 7 100    0.775"},{"path":"https://mcanigueral.github.io/flextools/reference/get_percentage_hours.html","id":null,"dir":"Reference","previous_headings":"","what":"Get percentage of hours for load duration curve — get_percentage_hours","title":"Get percentage of hours for load duration curve — get_percentage_hours","text":"percentage hours certain threshold power surpassed","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_percentage_hours.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get percentage of hours for load duration curve — get_percentage_hours","text":"","code":"get_percentage_hours(vct, threshold)"},{"path":"https://mcanigueral.github.io/flextools/reference/get_percentage_hours.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get percentage of hours for load duration curve — get_percentage_hours","text":"vct numeric vector power threshold numeric, threshold power","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_percentage_hours.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get percentage of hours for load duration curve — get_percentage_hours","text":"numeric","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_storage_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Accumulated storage level — get_storage_level","title":"Accumulated storage level — get_storage_level","text":"Accumulated storage level","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_storage_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accumulated storage level — get_storage_level","text":"","code":"get_storage_level(power, init = 0, loss = 0)"},{"path":"https://mcanigueral.github.io/flextools/reference/get_storage_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accumulated storage level — get_storage_level","text":"power numeric vector, positive charging negative discharging init numeric, initial storage level (energy units, %) loss numeric, hourly storage loss percentage (%/hour), passed get_storage_losses function","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_storage_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accumulated storage level — get_storage_level","text":"numeric vector","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_storage_losses.html","id":null,"dir":"Reference","previous_headings":"","what":"Storage losses over time — get_storage_losses","title":"Storage losses over time — get_storage_losses","text":"Storage losses time","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_storage_losses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Storage losses over time — get_storage_losses","text":"","code":"get_storage_losses(power, loss)"},{"path":"https://mcanigueral.github.io/flextools/reference/get_storage_losses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Storage losses over time — get_storage_losses","text":"power numeric vector, positive charging negative discharging loss numeric, hourly storage loss percentage (%/hour)","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_storage_losses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Storage losses over time — get_storage_losses","text":"numeric vector","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_time_resolution.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the time resolution of a datetime sequence — get_time_resolution","title":"Return the time resolution of a datetime sequence — get_time_resolution","text":"Return time resolution datetime sequence","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_time_resolution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the time resolution of a datetime sequence — get_time_resolution","text":"","code":"get_time_resolution(dttm_seq, units = \"mins\")"},{"path":"https://mcanigueral.github.io/flextools/reference/get_time_resolution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the time resolution of a datetime sequence — get_time_resolution","text":"dttm_seq datetime sequence units character one \"auto\", \"secs\", \"mins\", \"hours\", \"days\" \"weeks\"","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_time_resolution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the time resolution of a datetime sequence — get_time_resolution","text":"numeric","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/get_time_resolution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the time resolution of a datetime sequence — get_time_resolution","text":"","code":"resolution <- get_time_resolution(energy_profiles$datetime) print(resolution) #> [1] 15"},{"path":"https://mcanigueral.github.io/flextools/reference/increase_datetime_resolution.html","id":null,"dir":"Reference","previous_headings":"","what":"Increase datetime vector resolution — increase_datetime_resolution","title":"Increase datetime vector resolution — increase_datetime_resolution","text":"Increase datetime vector resolution","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/increase_datetime_resolution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Increase datetime vector resolution — increase_datetime_resolution","text":"","code":"increase_datetime_resolution(y, resolution_mins)"},{"path":"https://mcanigueral.github.io/flextools/reference/increase_datetime_resolution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Increase datetime vector resolution — increase_datetime_resolution","text":"y vector datetime values resolution_mins integer, interval minutes two consecutive datetime values","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/increase_datetime_resolution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Increase datetime vector resolution — increase_datetime_resolution","text":"datetime vector","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/increase_numeric_resolution.html","id":null,"dir":"Reference","previous_headings":"","what":"Increase numeric vector resolution — increase_numeric_resolution","title":"Increase numeric vector resolution — increase_numeric_resolution","text":"Increase numeric vector resolution","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/increase_numeric_resolution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Increase numeric vector resolution — increase_numeric_resolution","text":"","code":"increase_numeric_resolution(   y,   n,   method = c(\"interpolate\", \"repeat\", \"divide\") )"},{"path":"https://mcanigueral.github.io/flextools/reference/increase_numeric_resolution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Increase numeric vector resolution — increase_numeric_resolution","text":"y original numeric vector n integer, number intra-values (counting original value first one) method character, interpolate, repeat divide valid options","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/increase_numeric_resolution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Increase numeric vector resolution — increase_numeric_resolution","text":"numeric vector","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/increase_numeric_resolution.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Increase numeric vector resolution — increase_numeric_resolution","text":"vector v = c(1, 2), choose interpolate method, : increase_numeric_resolution(v, 4, 'interpolate') returns c(1, 1.25, 1.5, 1.75, 2) choose repeat method, : increase_numeric_resolution(v, 4, 'repeat') returns c(1, 1, 1, 1, 2)","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/increase_timeseries_resolution.html","id":null,"dir":"Reference","previous_headings":"","what":"Increase time resolution of a timeseries data frame — increase_timeseries_resolution","title":"Increase time resolution of a timeseries data frame — increase_timeseries_resolution","text":"Increase time resolution timeseries data frame","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/increase_timeseries_resolution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Increase time resolution of a timeseries data frame — increase_timeseries_resolution","text":"","code":"increase_timeseries_resolution(   df,   resolution_mins,   method = c(\"interpolate\", \"repeat\", \"divide\") )"},{"path":"https://mcanigueral.github.io/flextools/reference/increase_timeseries_resolution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Increase time resolution of a timeseries data frame — increase_timeseries_resolution","text":"df data.frame tibble, first column name datetime class datetime rest columns numeric resolution_mins integer, interval minutes two consecutive datetime values method character, interpolate, repeat divide valid options. See increase_numeric_resolution function information.","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/increase_timeseries_resolution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Increase time resolution of a timeseries data frame — increase_timeseries_resolution","text":"tibble","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/interpolation.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolate n values between two numeric values — interpolation","title":"Interpolate n values between two numeric values — interpolation","text":"Interpolate n values two numeric values","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/interpolation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolate n values between two numeric values — interpolation","text":"","code":"interpolation(y1, y2, n)"},{"path":"https://mcanigueral.github.io/flextools/reference/interpolation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolate n values between two numeric values — interpolation","text":"y1 first value y2 second value n integer, number intra-values (counting original value first one)","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/interpolation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpolate n values between two numeric values — interpolation","text":"numeric vector","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/mclapply.windows.html","id":null,"dir":"Reference","previous_headings":"","what":"Parallel processing for windows — mclapply.windows","title":"Parallel processing for windows — mclapply.windows","text":"mclapply version works windows","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/mclapply.windows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parallel processing for windows — mclapply.windows","text":"","code":"mclapply.windows(X, FUN, ..., mc.cores)"},{"path":"https://mcanigueral.github.io/flextools/reference/mclapply.windows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parallel processing for windows — mclapply.windows","text":"X vector (atomic list) expressions vector. objects (including classed objects) coerced .list. FUN function applied (mclapply) element X. ... mclapply, optional named arguments FUN. mc.cores integer, number cores used. overruled number items list lower.","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/mclapply.windows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parallel processing for windows — mclapply.windows","text":"list","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/mclapply.windows.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parallel processing for windows — mclapply.windows","text":"workaround allow parallel processing windows since parallel package works linux distributions. Source: https://www.r-bloggers.com/2014/07/implementing-mclapply--windows--primer--embarrassingly-parallel-computation--multicore-systems--r/","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/minimize_cost_window.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimization of the cost (just a window) — minimize_cost_window","title":"Minimization of the cost (just a window) — minimize_cost_window","text":"Minimization cost (just window)","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/minimize_cost_window.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimization of the cost (just a window) — minimize_cost_window","text":"","code":"minimize_cost_window(   G,   LF,   LS,   PI,   PE,   PTD,   PTU,   direction,   time_horizon,   LFmax,   grid_capacity,   lambda = 0 )"},{"path":"https://mcanigueral.github.io/flextools/reference/minimize_cost_window.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimization of the cost (just a window) — minimize_cost_window","text":"G numeric vector, renewable generation power profile LF numeric vector, flexible load power profile LS numeric vector, static load power profile PI numeric vector, electricity prices imported energy PE numeric vector, electricity prices exported energy PTD numeric vector, prices turn-energy use PTU numeric vector, prices turn-energy use direction character, forward backward. direction energy can shifted time_horizon integer, maximum number positions shift energy LFmax numeric, value maximum power (kW) flexible load LF grid_capacity numeric numeric vector, grid maximum power capacity limit maximum optimized demand lambda numeric, penalty change flexible load.","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/minimize_cost_window.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimization of the cost (just a window) — minimize_cost_window","text":"numeric vector","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/minimize_cost_window_battery.html","id":null,"dir":"Reference","previous_headings":"","what":"Battery optimal charging/discharging profile to minimize cost (just a window) — minimize_cost_window_battery","title":"Battery optimal charging/discharging profile to minimize cost (just a window) — minimize_cost_window_battery","text":"Battery optimal charging/discharging profile minimize cost (just window)","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/minimize_cost_window_battery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Battery optimal charging/discharging profile to minimize cost (just a window) — minimize_cost_window_battery","text":"","code":"minimize_cost_window_battery(   G,   L,   PE,   PI,   PTD,   PTU,   Bcap,   Bc,   Bd,   SOCmin,   SOCmax,   SOCini,   grid_capacity,   lambda = 0 )"},{"path":"https://mcanigueral.github.io/flextools/reference/minimize_cost_window_battery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Battery optimal charging/discharging profile to minimize cost (just a window) — minimize_cost_window_battery","text":"G numeric vector, renewable generation profile L numeric vector, load profile PE numeric vector, electricity prices exported energy PI numeric vector, electricity prices imported energy PTD numeric vector, prices turn-energy use PTU numeric vector, prices turn-energy use Bcap numeric, capacity battery Bc numeric, maximum charging power Bd numeric, maximum discharging power SOCmin numeric, minimum State--Charge battery SOCmax numeric, maximum State--Charge battery SOCini numeric, required State--Charge beginning/end optimization window grid_capacity numeric numeric vector, grid maximum power capacity limit maximum optimized demand lambda numeric, penalty change flexible load.","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/minimize_cost_window_battery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Battery optimal charging/discharging profile to minimize cost (just a window) — minimize_cost_window_battery","text":"numeric vector","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/minimize_net_power_window.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimization of net power (just a window) — minimize_net_power_window","title":"Minimization of net power (just a window) — minimize_net_power_window","text":"Minimization net power (just window)","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/minimize_net_power_window.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimization of net power (just a window) — minimize_net_power_window","text":"","code":"minimize_net_power_window(   G,   LF,   LS,   direction,   time_horizon,   LFmax,   grid_capacity,   lambda = 0 )"},{"path":"https://mcanigueral.github.io/flextools/reference/minimize_net_power_window.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimization of net power (just a window) — minimize_net_power_window","text":"G numeric vector, renewable generation profile LF numeric vector, flexible load profile LS numeric vector, static load profile direction character, forward backward. direction energy can shifted time_horizon integer, maximum number positions shift energy LFmax numeric, value maximum power (kW) flexible load LF grid_capacity numeric numeric vector, grid maximum power capacity limit maximum optimized demand lambda numeric, penalty change flexible load.","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/minimize_net_power_window.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimization of net power (just a window) — minimize_net_power_window","text":"numeric vector","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/minimize_net_power_window_battery.html","id":null,"dir":"Reference","previous_headings":"","what":"Battery optimal charging/discharging profile to minimize grid interaction (just a window) — minimize_net_power_window_battery","title":"Battery optimal charging/discharging profile to minimize grid interaction (just a window) — minimize_net_power_window_battery","text":"Battery optimal charging/discharging profile minimize grid interaction (just window)","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/minimize_net_power_window_battery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Battery optimal charging/discharging profile to minimize grid interaction (just a window) — minimize_net_power_window_battery","text":"","code":"minimize_net_power_window_battery(   G,   L,   Bcap,   Bc,   Bd,   SOCmin,   SOCmax,   SOCini,   grid_capacity,   lambda = 0 )"},{"path":"https://mcanigueral.github.io/flextools/reference/minimize_net_power_window_battery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Battery optimal charging/discharging profile to minimize grid interaction (just a window) — minimize_net_power_window_battery","text":"G numeric vector, renewable generation profile L numeric vector, load profile Bcap numeric, capacity battery Bc numeric, maximum charging power Bd numeric, maximum discharging power SOCmin numeric, minimum State--Charge battery SOCmax numeric, maximum State--Charge battery SOCini numeric, required State--Charge beginning/end optimization window grid_capacity numeric numeric vector, grid maximum power capacity limit maximum optimized demand lambda numeric, penalty change flexible load.","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/minimize_net_power_window_battery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Battery optimal charging/discharging profile to minimize grid interaction (just a window) — minimize_net_power_window_battery","text":"numeric vector","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize between 0 and 1 — normalize","title":"Normalize between 0 and 1 — normalize","text":"Normalize 0 1","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize between 0 and 1 — normalize","text":"","code":"normalize(x)"},{"path":"https://mcanigueral.github.io/flextools/reference/normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize between 0 and 1 — normalize","text":"x numeric value vector","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/optimize_battery_window.html","id":null,"dir":"Reference","previous_headings":"","what":"Battery optimal charging/discharging profile to minimize net power and cost (just a window) — optimize_battery_window","title":"Battery optimal charging/discharging profile to minimize net power and cost (just a window) — optimize_battery_window","text":"Battery optimal charging/discharging profile minimize net power cost (just window)","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/optimize_battery_window.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Battery optimal charging/discharging profile to minimize net power and cost (just a window) — optimize_battery_window","text":"","code":"optimize_battery_window(   G,   L,   PE,   PI,   PTD,   PTU,   Bcap,   Bc,   Bd,   SOCmin,   SOCmax,   SOCini,   grid_capacity,   w,   lambda )"},{"path":"https://mcanigueral.github.io/flextools/reference/optimize_battery_window.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Battery optimal charging/discharging profile to minimize net power and cost (just a window) — optimize_battery_window","text":"G numeric vector, renewable generation profile L numeric vector, load profile PE numeric vector, electricity prices exported energy PI numeric vector, electricity prices imported energy PTD numeric vector, prices turn-energy use PTU numeric vector, prices turn-energy use Bcap numeric, capacity battery Bc numeric, maximum charging power Bd numeric, maximum discharging power SOCmin numeric, minimum State--Charge battery SOCmax numeric, maximum State--Charge battery SOCini numeric, required State--Charge beginning/end optimization window grid_capacity numeric numeric vector, grid maximum power capacity limit maximum optimized demand w numeric, optimization objective weight (w=1 minimizes net power w=0 minimizes cost). lambda numeric, penalty change flexible load.","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/optimize_battery_window.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Battery optimal charging/discharging profile to minimize net power and cost (just a window) — optimize_battery_window","text":"numeric vector","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/optimize_demand.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimize a vector of flexible demand — optimize_demand","title":"Optimize a vector of flexible demand — optimize_demand","text":"See formulation optimization problems documentation website.","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/optimize_demand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimize a vector of flexible demand — optimize_demand","text":"","code":"optimize_demand(   opt_data,   opt_objective = \"grid\",   direction = \"forward\",   time_horizon = NULL,   window_days = 1,   window_start_hour = 0,   flex_window_hours = NULL,   lambda = 0,   mc.cores = 1 )"},{"path":"https://mcanigueral.github.io/flextools/reference/optimize_demand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimize a vector of flexible demand — optimize_demand","text":"opt_data tibble, optimization contextual data. first column must named datetime (mandatory) containing date time sequence optimization algorithm applied. second column must named flexible (mandatory), power demand (kW) vector optimized. columns can (optional): static: static power demand (kW) sectors like buildings, offices, etc. grid_capacity: maximum imported power grid (kW), example contracted power energy company. load_capacity: maximum power flexible load can consume (kW). production: local power generation (kW). used opt_objective = \"grid\". price_imported: price imported energy (€/kWh). used opt_objective = \"cost\". price_exported: price exported energy (€/kWh). used opt_objective = \"cost\". price_turn_down: price turn-energy use (€/kWh). used opt_objective = \"cost\". price_turn_up: price turn-energy use (€/kWh). used opt_objective = \"cost\". opt_objective character, optimization objective \"grid\" (default), \"cost\" value 0 (cost) 1 (grid). direction character, forward backward. direction energy can shifted time_horizon integer, maximum number positions shift energy . NULL, time_horizon number rows op_data. window_days integer, number days consider optimization window. window_start_hour integer, starting hour optimization window. flex_window_hours integer, flexibility window length, hours. optional feature lets apply flexibility hours window_start_hour. must lower window_days*24 hours. lambda numeric, penalty change flexible load. mc.cores integer, number cores use. Must least one, parallelization requires least two cores.","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/optimize_demand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimize a vector of flexible demand — optimize_demand","text":"numeric vector","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/optimize_demand_window.html","id":null,"dir":"Reference","previous_headings":"","what":"Combined optimization (just a window) — optimize_demand_window","title":"Combined optimization (just a window) — optimize_demand_window","text":"Combined optimization (just window)","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/optimize_demand_window.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combined optimization (just a window) — optimize_demand_window","text":"","code":"optimize_demand_window(   G,   LF,   LS,   PI,   PE,   PTD,   PTU,   direction,   time_horizon,   LFmax,   grid_capacity,   w,   lambda )"},{"path":"https://mcanigueral.github.io/flextools/reference/optimize_demand_window.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combined optimization (just a window) — optimize_demand_window","text":"G numeric vector, renewable generation power profile LF numeric vector, flexible load power profile LS numeric vector, static load power profile PI numeric vector, electricity prices imported energy PE numeric vector, electricity prices exported energy PTD numeric vector, prices turn-energy use PTU numeric vector, prices turn-energy use direction character, forward backward. direction energy can shifted time_horizon integer, maximum number positions shift energy LFmax numeric, value maximum power (kW) flexible load LF grid_capacity numeric numeric vector, grid maximum power capacity limit maximum optimized demand w numeric, optimization objective weight (w=1 minimizes net power w=0 minimizes cost). lambda numeric, penalty change flexible load.","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/optimize_demand_window.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combined optimization (just a window) — optimize_demand_window","text":"numeric vector","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/plot.SmartCharging.html","id":null,"dir":"Reference","previous_headings":"","what":"plot method for SmartCharging object class — plot.SmartCharging","title":"plot method for SmartCharging object class — plot.SmartCharging","text":"plot method SmartCharging object class","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/plot.SmartCharging.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot method for SmartCharging object class — plot.SmartCharging","text":"","code":"# S3 method for class 'SmartCharging' plot(x, ...)"},{"path":"https://mcanigueral.github.io/flextools/reference/plot.SmartCharging.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot method for SmartCharging object class — plot.SmartCharging","text":"x SmartCharging object returned smart_charging  function ... arguments passed methods.","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/plot.SmartCharging.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot method for SmartCharging object class — plot.SmartCharging","text":"HTML interctive plot","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/plot_energy_cost.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot hourly energy cost — plot_energy_cost","title":"Plot hourly energy cost — plot_energy_cost","text":"HTML interactive plot showing hourly energy cost. Also, comparison original scenario done original_df NULL.","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/plot_energy_cost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot hourly energy cost — plot_energy_cost","text":"","code":"plot_energy_cost(df, original_df = NULL, ...)"},{"path":"https://mcanigueral.github.io/flextools/reference/plot_energy_cost.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot hourly energy cost — plot_energy_cost","text":"df tibble, columns datetime, consumption, production, price_imported price_exported. imbalance = TRUE, columns demand_baseline, demand_final, price_turn_up price_turn_down also required. original_df tibble columns df corresponding original scenario (e.g. without flexibility). ... extra arguments pass dygraphs::dyOptions function.","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/plot_energy_cost.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot hourly energy cost — plot_energy_cost","text":"dygraphs plot","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/plot_energy_cost.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot hourly energy cost — plot_energy_cost","text":"","code":"df <- dplyr::select(   energy_profiles,   datetime,   production = solar,   consumption = building,   price_imported,   price_exported ) df <- dplyr::slice_head(df, n = 300) head(df) #> # A tibble: 6 × 5 #>   datetime            production consumption price_imported price_exported #>   <dttm>                   <dbl>       <dbl>          <dbl>          <dbl> #> 1 2023-01-01 00:00:00          0        2.61       -0.00146          0.025 #> 2 2023-01-01 00:15:00          0        2.42       -0.00146          0.025 #> 3 2023-01-01 00:30:00          0        2.23       -0.00146          0.025 #> 4 2023-01-01 00:45:00          0        2.04       -0.00146          0.025 #> 5 2023-01-01 01:00:00          0        1.85       -0.00152          0.025 #> 6 2023-01-01 01:15:00          0        1.78       -0.00152          0.025  plot_energy_cost(df)  {\"x\":{\"attrs\":{\"ylabel\":\"Cost (Euros)\",\"labels\":[\"minute\",\"Cost\"],\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawAxis\":true},\"y\":{\"drawAxis\":true}},\"legend\":\"auto\",\"labelsDivWidth\":250,\"labelsShowZeroValues\":false,\"labelsSeparateLines\":false,\"hideOverlayOnMouseOut\":true,\"stackedGraph\":false,\"fillGraph\":true,\"fillAlpha\":0.15,\"stepPlot\":false,\"drawPoints\":false,\"pointSize\":1,\"drawGapEdgePoints\":false,\"connectSeparatedPoints\":false,\"strokeWidth\":2,\"strokeBorderColor\":\"white\",\"colorValue\":0.5,\"colorSaturation\":1,\"includeZero\":false,\"drawAxesAtZero\":false,\"logscale\":false,\"axisTickSize\":3,\"axisLineColor\":\"black\",\"axisLineWidth\":0.3,\"axisLabelColor\":\"black\",\"axisLabelFontSize\":14,\"axisLabelWidth\":60,\"drawGrid\":true,\"gridLineWidth\":0.3,\"rightGap\":5,\"digitsAfterDecimal\":2,\"labelsKMB\":false,\"labelsKMG2\":false,\"labelsUTC\":false,\"maxNumberWidth\":6,\"animatedZooms\":false,\"mobileDisableYTouch\":true,\"retainDateWindow\":true,\"disableZoom\":false,\"colors\":[\"navy\",\"navy\"],\"series\":{\"Cost\":{\"axis\":\"y\"}}},\"scale\":\"minute\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"2022-12-31T23:00:00.000Z\",\"2022-12-31T23:15:00.000Z\",\"2022-12-31T23:30:00.000Z\",\"2022-12-31T23:45:00.000Z\",\"2023-01-01T00:00:00.000Z\",\"2023-01-01T00:15:00.000Z\",\"2023-01-01T00:30:00.000Z\",\"2023-01-01T00:45:00.000Z\",\"2023-01-01T01:00:00.000Z\",\"2023-01-01T01:15:00.000Z\",\"2023-01-01T01:30:00.000Z\",\"2023-01-01T01:45:00.000Z\",\"2023-01-01T02:00:00.000Z\",\"2023-01-01T02:15:00.000Z\",\"2023-01-01T02:30:00.000Z\",\"2023-01-01T02:45:00.000Z\",\"2023-01-01T03:00:00.000Z\",\"2023-01-01T03:15:00.000Z\",\"2023-01-01T03:30:00.000Z\",\"2023-01-01T03:45:00.000Z\",\"2023-01-01T04:00:00.000Z\",\"2023-01-01T04:15:00.000Z\",\"2023-01-01T04:30:00.000Z\",\"2023-01-01T04:45:00.000Z\",\"2023-01-01T05:00:00.000Z\",\"2023-01-01T05:15:00.000Z\",\"2023-01-01T05:30:00.000Z\",\"2023-01-01T05:45:00.000Z\",\"2023-01-01T06:00:00.000Z\",\"2023-01-01T06:15:00.000Z\",\"2023-01-01T06:30:00.000Z\",\"2023-01-01T06:45:00.000Z\",\"2023-01-01T07:00:00.000Z\",\"2023-01-01T07:15:00.000Z\",\"2023-01-01T07:30:00.000Z\",\"2023-01-01T07:45:00.000Z\",\"2023-01-01T08:00:00.000Z\",\"2023-01-01T08:15:00.000Z\",\"2023-01-01T08:30:00.000Z\",\"2023-01-01T08:45:00.000Z\",\"2023-01-01T09:00:00.000Z\",\"2023-01-01T09:15:00.000Z\",\"2023-01-01T09:30:00.000Z\",\"2023-01-01T09:45:00.000Z\",\"2023-01-01T10:00:00.000Z\",\"2023-01-01T10:15:00.000Z\",\"2023-01-01T10:30:00.000Z\",\"2023-01-01T10:45:00.000Z\",\"2023-01-01T11:00:00.000Z\",\"2023-01-01T11:15:00.000Z\",\"2023-01-01T11:30:00.000Z\",\"2023-01-01T11:45:00.000Z\",\"2023-01-01T12:00:00.000Z\",\"2023-01-01T12:15:00.000Z\",\"2023-01-01T12:30:00.000Z\",\"2023-01-01T12:45:00.000Z\",\"2023-01-01T13:00:00.000Z\",\"2023-01-01T13:15:00.000Z\",\"2023-01-01T13:30:00.000Z\",\"2023-01-01T13:45:00.000Z\",\"2023-01-01T14:00:00.000Z\",\"2023-01-01T14:15:00.000Z\",\"2023-01-01T14:30:00.000Z\",\"2023-01-01T14:45:00.000Z\",\"2023-01-01T15:00:00.000Z\",\"2023-01-01T15:15:00.000Z\",\"2023-01-01T15:30:00.000Z\",\"2023-01-01T15:45:00.000Z\",\"2023-01-01T16:00:00.000Z\",\"2023-01-01T16:15:00.000Z\",\"2023-01-01T16:30:00.000Z\",\"2023-01-01T16:45:00.000Z\",\"2023-01-01T17:00:00.000Z\",\"2023-01-01T17:15:00.000Z\",\"2023-01-01T17:30:00.000Z\",\"2023-01-01T17:45:00.000Z\",\"2023-01-01T18:00:00.000Z\",\"2023-01-01T18:15:00.000Z\",\"2023-01-01T18:30:00.000Z\",\"2023-01-01T18:45:00.000Z\",\"2023-01-01T19:00:00.000Z\",\"2023-01-01T19:15:00.000Z\",\"2023-01-01T19:30:00.000Z\",\"2023-01-01T19:45:00.000Z\",\"2023-01-01T20:00:00.000Z\",\"2023-01-01T20:15:00.000Z\",\"2023-01-01T20:30:00.000Z\",\"2023-01-01T20:45:00.000Z\",\"2023-01-01T21:00:00.000Z\",\"2023-01-01T21:15:00.000Z\",\"2023-01-01T21:30:00.000Z\",\"2023-01-01T21:45:00.000Z\",\"2023-01-01T22:00:00.000Z\",\"2023-01-01T22:15:00.000Z\",\"2023-01-01T22:30:00.000Z\",\"2023-01-01T22:45:00.000Z\",\"2023-01-01T23:00:00.000Z\",\"2023-01-01T23:15:00.000Z\",\"2023-01-01T23:30:00.000Z\",\"2023-01-01T23:45:00.000Z\",\"2023-01-02T00:00:00.000Z\",\"2023-01-02T00:15:00.000Z\",\"2023-01-02T00:30:00.000Z\",\"2023-01-02T00:45:00.000Z\",\"2023-01-02T01:00:00.000Z\",\"2023-01-02T01:15:00.000Z\",\"2023-01-02T01:30:00.000Z\",\"2023-01-02T01:45:00.000Z\",\"2023-01-02T02:00:00.000Z\",\"2023-01-02T02:15:00.000Z\",\"2023-01-02T02:30:00.000Z\",\"2023-01-02T02:45:00.000Z\",\"2023-01-02T03:00:00.000Z\",\"2023-01-02T03:15:00.000Z\",\"2023-01-02T03:30:00.000Z\",\"2023-01-02T03:45:00.000Z\",\"2023-01-02T04:00:00.000Z\",\"2023-01-02T04:15:00.000Z\",\"2023-01-02T04:30:00.000Z\",\"2023-01-02T04:45:00.000Z\",\"2023-01-02T05:00:00.000Z\",\"2023-01-02T05:15:00.000Z\",\"2023-01-02T05:30:00.000Z\",\"2023-01-02T05:45:00.000Z\",\"2023-01-02T06:00:00.000Z\",\"2023-01-02T06:15:00.000Z\",\"2023-01-02T06:30:00.000Z\",\"2023-01-02T06:45:00.000Z\",\"2023-01-02T07:00:00.000Z\",\"2023-01-02T07:15:00.000Z\",\"2023-01-02T07:30:00.000Z\",\"2023-01-02T07:45:00.000Z\",\"2023-01-02T08:00:00.000Z\",\"2023-01-02T08:15:00.000Z\",\"2023-01-02T08:30:00.000Z\",\"2023-01-02T08:45:00.000Z\",\"2023-01-02T09:00:00.000Z\",\"2023-01-02T09:15:00.000Z\",\"2023-01-02T09:30:00.000Z\",\"2023-01-02T09:45:00.000Z\",\"2023-01-02T10:00:00.000Z\",\"2023-01-02T10:15:00.000Z\",\"2023-01-02T10:30:00.000Z\",\"2023-01-02T10:45:00.000Z\",\"2023-01-02T11:00:00.000Z\",\"2023-01-02T11:15:00.000Z\",\"2023-01-02T11:30:00.000Z\",\"2023-01-02T11:45:00.000Z\",\"2023-01-02T12:00:00.000Z\",\"2023-01-02T12:15:00.000Z\",\"2023-01-02T12:30:00.000Z\",\"2023-01-02T12:45:00.000Z\",\"2023-01-02T13:00:00.000Z\",\"2023-01-02T13:15:00.000Z\",\"2023-01-02T13:30:00.000Z\",\"2023-01-02T13:45:00.000Z\",\"2023-01-02T14:00:00.000Z\",\"2023-01-02T14:15:00.000Z\",\"2023-01-02T14:30:00.000Z\",\"2023-01-02T14:45:00.000Z\",\"2023-01-02T15:00:00.000Z\",\"2023-01-02T15:15:00.000Z\",\"2023-01-02T15:30:00.000Z\",\"2023-01-02T15:45:00.000Z\",\"2023-01-02T16:00:00.000Z\",\"2023-01-02T16:15:00.000Z\",\"2023-01-02T16:30:00.000Z\",\"2023-01-02T16:45:00.000Z\",\"2023-01-02T17:00:00.000Z\",\"2023-01-02T17:15:00.000Z\",\"2023-01-02T17:30:00.000Z\",\"2023-01-02T17:45:00.000Z\",\"2023-01-02T18:00:00.000Z\",\"2023-01-02T18:15:00.000Z\",\"2023-01-02T18:30:00.000Z\",\"2023-01-02T18:45:00.000Z\",\"2023-01-02T19:00:00.000Z\",\"2023-01-02T19:15:00.000Z\",\"2023-01-02T19:30:00.000Z\",\"2023-01-02T19:45:00.000Z\",\"2023-01-02T20:00:00.000Z\",\"2023-01-02T20:15:00.000Z\",\"2023-01-02T20:30:00.000Z\",\"2023-01-02T20:45:00.000Z\",\"2023-01-02T21:00:00.000Z\",\"2023-01-02T21:15:00.000Z\",\"2023-01-02T21:30:00.000Z\",\"2023-01-02T21:45:00.000Z\",\"2023-01-02T22:00:00.000Z\",\"2023-01-02T22:15:00.000Z\",\"2023-01-02T22:30:00.000Z\",\"2023-01-02T22:45:00.000Z\",\"2023-01-02T23:00:00.000Z\",\"2023-01-02T23:15:00.000Z\",\"2023-01-02T23:30:00.000Z\",\"2023-01-02T23:45:00.000Z\",\"2023-01-03T00:00:00.000Z\",\"2023-01-03T00:15:00.000Z\",\"2023-01-03T00:30:00.000Z\",\"2023-01-03T00:45:00.000Z\",\"2023-01-03T01:00:00.000Z\",\"2023-01-03T01:15:00.000Z\",\"2023-01-03T01:30:00.000Z\",\"2023-01-03T01:45:00.000Z\",\"2023-01-03T02:00:00.000Z\",\"2023-01-03T02:15:00.000Z\",\"2023-01-03T02:30:00.000Z\",\"2023-01-03T02:45:00.000Z\",\"2023-01-03T03:00:00.000Z\",\"2023-01-03T03:15:00.000Z\",\"2023-01-03T03:30:00.000Z\",\"2023-01-03T03:45:00.000Z\",\"2023-01-03T04:00:00.000Z\",\"2023-01-03T04:15:00.000Z\",\"2023-01-03T04:30:00.000Z\",\"2023-01-03T04:45:00.000Z\",\"2023-01-03T05:00:00.000Z\",\"2023-01-03T05:15:00.000Z\",\"2023-01-03T05:30:00.000Z\",\"2023-01-03T05:45:00.000Z\",\"2023-01-03T06:00:00.000Z\",\"2023-01-03T06:15:00.000Z\",\"2023-01-03T06:30:00.000Z\",\"2023-01-03T06:45:00.000Z\",\"2023-01-03T07:00:00.000Z\",\"2023-01-03T07:15:00.000Z\",\"2023-01-03T07:30:00.000Z\",\"2023-01-03T07:45:00.000Z\",\"2023-01-03T08:00:00.000Z\",\"2023-01-03T08:15:00.000Z\",\"2023-01-03T08:30:00.000Z\",\"2023-01-03T08:45:00.000Z\",\"2023-01-03T09:00:00.000Z\",\"2023-01-03T09:15:00.000Z\",\"2023-01-03T09:30:00.000Z\",\"2023-01-03T09:45:00.000Z\",\"2023-01-03T10:00:00.000Z\",\"2023-01-03T10:15:00.000Z\",\"2023-01-03T10:30:00.000Z\",\"2023-01-03T10:45:00.000Z\",\"2023-01-03T11:00:00.000Z\",\"2023-01-03T11:15:00.000Z\",\"2023-01-03T11:30:00.000Z\",\"2023-01-03T11:45:00.000Z\",\"2023-01-03T12:00:00.000Z\",\"2023-01-03T12:15:00.000Z\",\"2023-01-03T12:30:00.000Z\",\"2023-01-03T12:45:00.000Z\",\"2023-01-03T13:00:00.000Z\",\"2023-01-03T13:15:00.000Z\",\"2023-01-03T13:30:00.000Z\",\"2023-01-03T13:45:00.000Z\",\"2023-01-03T14:00:00.000Z\",\"2023-01-03T14:15:00.000Z\",\"2023-01-03T14:30:00.000Z\",\"2023-01-03T14:45:00.000Z\",\"2023-01-03T15:00:00.000Z\",\"2023-01-03T15:15:00.000Z\",\"2023-01-03T15:30:00.000Z\",\"2023-01-03T15:45:00.000Z\",\"2023-01-03T16:00:00.000Z\",\"2023-01-03T16:15:00.000Z\",\"2023-01-03T16:30:00.000Z\",\"2023-01-03T16:45:00.000Z\",\"2023-01-03T17:00:00.000Z\",\"2023-01-03T17:15:00.000Z\",\"2023-01-03T17:30:00.000Z\",\"2023-01-03T17:45:00.000Z\",\"2023-01-03T18:00:00.000Z\",\"2023-01-03T18:15:00.000Z\",\"2023-01-03T18:30:00.000Z\",\"2023-01-03T18:45:00.000Z\",\"2023-01-03T19:00:00.000Z\",\"2023-01-03T19:15:00.000Z\",\"2023-01-03T19:30:00.000Z\",\"2023-01-03T19:45:00.000Z\",\"2023-01-03T20:00:00.000Z\",\"2023-01-03T20:15:00.000Z\",\"2023-01-03T20:30:00.000Z\",\"2023-01-03T20:45:00.000Z\",\"2023-01-03T21:00:00.000Z\",\"2023-01-03T21:15:00.000Z\",\"2023-01-03T21:30:00.000Z\",\"2023-01-03T21:45:00.000Z\",\"2023-01-03T22:00:00.000Z\",\"2023-01-03T22:15:00.000Z\",\"2023-01-03T22:30:00.000Z\",\"2023-01-03T22:45:00.000Z\",\"2023-01-03T23:00:00.000Z\",\"2023-01-03T23:15:00.000Z\",\"2023-01-03T23:30:00.000Z\",\"2023-01-03T23:45:00.000Z\",\"2023-01-04T00:00:00.000Z\",\"2023-01-04T00:15:00.000Z\",\"2023-01-04T00:30:00.000Z\",\"2023-01-04T00:45:00.000Z\",\"2023-01-04T01:00:00.000Z\",\"2023-01-04T01:15:00.000Z\",\"2023-01-04T01:30:00.000Z\",\"2023-01-04T01:45:00.000Z\"],[-0.003815097954720664,-0.003538210761202038,-0.003261323567683395,-0.002984436374164758,-0.002818818325056233,-0.002704335865576378,-0.002589853406096528,-0.002475370946616673,-0.007766080549792164,-0.007744738127703034,-0.007723395705613915,-0.007702053283524786,-0.007066253992520803,-0.006880113924028255,-0.006693973855535708,-0.006507833787043169,-0.005565839034810873,-0.005599376516881726,-0.005632913998952588,-0.005666451481023441,-0.005066656856083825,-0.005116905454650469,-0.005167154053217112,-0.005217402651783754,0,0,0,0,0,0,0,0,0,0,0,0,0.002238307222251035,0.00220033161053307,0.002162355998815106,0.002124380387097141,0.001222338151232245,0.001156351285710552,0.001090364420188874,0.001024377554667195,6.609590959624161e-05,6.864387252864872e-05,7.119183546105588e-05,7.373979839346213e-05,0,0,0,0,0.002884216313953781,0.002885974581326706,0.002887732848699611,0.002889491116072517,0.08003658587349557,0.08106606961659782,0.08209555335970008,0.08312503710280232,0.1306844960352466,0.1479699179012728,0.1652553397672991,0.1825407616333253,0.2517241167617721,0.2522555906653929,0.2527870645690137,0.2533185384726345,0.5509366985963047,0.531528119775397,0.5121195409544916,0.4927109621335863,0.2603399996299469,0.2610295860931008,0.2617191725562534,0.2624087590194059,0.2968534562314582,0.2899779522706019,0.2831024483097441,0.2762269443488877,0.2299479312861049,0.2223306716589637,0.2147134120318238,0.2070961524046827,0.1732108428501013,0.1631821445688331,0.1531534462875649,0.1431247480062968,0.1013568698950392,0.09577838760938316,0.09019990532372632,0.0846214230380703,0.248194833962579,0.2313820592418962,0.2145692845212134,0.1977565098005306,0.1562471379351917,0.1549529099830426,0.1536586820308935,0.1523644540787444,0.08425866247503372,0.07972535936310807,0.07519205625118242,0.07065875313925678,0.05516908885711208,0.05477324668614052,0.05437740451516906,0.05398156234419761,0.06076931309499924,0.06129731437312162,0.06182531565124412,0.0623533169293665,0.09679554354263813,0.09909071935243519,0.1013858951622322,0.1036810709720293,0.1444543262658491,0.165992849358708,0.1875313724515667,0.2090698955444254,0.3086483440916221,0.3273693123308135,0.3460902805700014,0.3648112488091924,0.4429818923303427,0.477543050017554,0.5121042077047656,0.5466653653919771,0.6440579546555892,0.6143708450535234,0.5846837354514535,0.5549966258493836,0.4249462147820664,0.4423355903695727,0.4597249659570823,0.477114341544592,0.4868285684423204,0.5175400768419472,0.5482515852415742,0.5789630936412011,0.6140552427112261,0.5847429392872149,0.5554306358632003,0.5261183324391889,0.4946726328523444,0.5109337754006419,0.5271949179489394,0.5434560604972335,0.5770039614033646,0.5525369351326461,0.5280699088619243,0.5036028825912058,0.5022197295602192,0.5280958946285931,0.5539720596969669,0.5798482247653408,0.6394927252010377,0.7488061354205928,0.8581195456401479,0.967432955859703,1.219086983253638,1.232929256494387,1.246771529735136,1.260613802975881,1.19936694721076,1.179422250588612,1.159477553966464,1.139532857344312,1.088577478005584,1.028156148407418,0.9677348188092469,0.9073134892110766,0.7626515622176295,0.7501549124693587,0.7376582627210876,0.7251616129728203,0.659890492418444,0.6387042607903143,0.6175180291621846,0.5963317975340549,0.5477016185245175,0.5200228483695586,0.4923440782145997,0.464665308059644,0.4023605940146763,0.3689189163691834,0.3354772387236905,0.3020355610781976,0.2811132731048623,0.2603721790937003,0.2396310850825384,0.2188899910713763,0.1828926055474634,0.1846623191870941,0.1864320328267246,0.1882017464663551,0.1880084216848904,0.1830557623884566,0.1781031030920229,0.1731504437955889,0.1628725599309772,0.1555094243102278,0.1481462886894782,0.1407831530687288,0.1318305789792514,0.1318160281427194,0.1318014773061876,0.1317869264696557,0.1348338829082397,0.1420376292657675,0.149241375623295,0.1564451219808225,0.195528518014652,0.2163509354043668,0.2371733527940816,0.2579957701837962,0.320966056412006,0.3485812878287387,0.3761965192454696,0.4038117506622023,0.4563813316551616,0.444686845060869,0.4329923584665802,0.4212978718722877,0.4144701039894024,0.4261980570683239,0.4379260101472454,0.4496539632261709,0.4543471762562764,0.4393653345143769,0.4243834927724734,0.4094016510305738,0.3965724237784742,0.3925251481366034,0.3884778724947365,0.3844305968528658,0.3691843550605307,0.4081534462952561,0.4471225375299777,0.486091628764703,0.5136019480553677,0.5046290052443573,0.4956560624333466,0.4866831196223361,0.4840931044115017,0.4923190290698384,0.500544953728179,0.5087708783865195,0.528823112840992,0.5519271582068677,0.5750312035727431,0.5981352489386186,0.6204198648138352,0.7061737496352833,0.7919276344567352,0.8776815192781834,0.9880172643831366,0.9823992213570502,0.9767811783309599,0.9711631353048694,0.954975081023883,0.9729644282593451,0.9909537754948031,1.008943122730265,0.9785490283502921,0.9186506954456894,0.8587523625410869,0.798854029636488,0.6867665777068431,0.6846941563846012,0.6826217350623591,0.6805493137401205,0.5923635640726337,0.5691036088076674,0.5458436535427013,0.5225836982777351,0.4373621884369644,0.4133377930721256,0.3893133977072843,0.3652890023424455,0.2758272229792766,0.2507566861108952,0.2256861492425117,0.2006156123741286,0.1519884753000112,0.1459595193650165,0.1399305634300217,0.1339016074950268,0.1092994164202398,0.1064613241806431,0.1036232319410467,0.1007851397014502,0.05426873231667874,0.05358244197719319,0.05289615163770763,0.05220986129822206,0,0,0,0]],\"fixedtz\":true,\"tzone\":\"Europe/Amsterdam\",\"css\":\"/* Dygraph styling */\\n\\n.dygraph-title {\\n  text-align: left;\\n  font-weight: normal;\\n  font-size: 70%;\\n}\\n\\n.dygraph-legend {\\n  color: white;\\n  background-color: #BABABA !important;\\n    padding-left:5px;\\n  border-color:#BABABA;\\n    border-style:solid;\\n  border-width:thin;\\n  transition:0s 4s;\\n  z-index: 20 !important;\\n  box-shadow: 2px 2px 5px rgba(0, 0, 0, .3);\\n  border-radius: 3px;\\n}\\n\\n.dygraph-legend:hover{\\n  transform: translate(-110%);\\n  transition: 0s;\\n}\\n\\n.dygraph-legend > span {\\n  color: black;\\n  padding-left:5px;\\n  margin-left:-5px;\\n  background-color: white !important;\\n  display: block;\\n}\\n\\n.dygraph-legend > span > span{\\n  display: inline;\\n}\\n\\n.highlight {\\n  border-left: 2px solid #BABABA;\\n  padding-left:3px !important;\\n\\n}\"},\"evals\":[],\"jsHooks\":[]} # Build another random building profile building_variation <- rnorm(nrow(df), mean = 0, sd = 1) df2 <- dplyr::mutate(df, consumption = consumption + building_variation) plot_energy_cost(df2, original_df = df)  {\"x\":{\"attrs\":{\"ylabel\":\"Cost (Euros)\",\"labels\":[\"minute\",\"Original case\",\"Flexible case\"],\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawAxis\":true},\"y\":{\"drawAxis\":true}},\"legend\":\"auto\",\"labelsDivWidth\":250,\"labelsShowZeroValues\":false,\"labelsSeparateLines\":false,\"hideOverlayOnMouseOut\":true,\"stackedGraph\":false,\"fillGraph\":false,\"fillAlpha\":0.15,\"stepPlot\":false,\"drawPoints\":false,\"pointSize\":1,\"drawGapEdgePoints\":false,\"connectSeparatedPoints\":false,\"strokeWidth\":1,\"strokeBorderColor\":\"white\",\"colorValue\":0.5,\"colorSaturation\":1,\"includeZero\":false,\"drawAxesAtZero\":false,\"logscale\":false,\"axisTickSize\":3,\"axisLineColor\":\"black\",\"axisLineWidth\":0.3,\"axisLabelColor\":\"black\",\"axisLabelFontSize\":14,\"axisLabelWidth\":60,\"drawGrid\":true,\"gridLineWidth\":0.3,\"rightGap\":5,\"digitsAfterDecimal\":2,\"labelsKMB\":false,\"labelsKMG2\":false,\"labelsUTC\":false,\"maxNumberWidth\":6,\"animatedZooms\":false,\"mobileDisableYTouch\":true,\"retainDateWindow\":true,\"disableZoom\":false,\"colors\":[\"red\",\"darkgreen\"],\"customBars\":true,\"series\":{\"Original case\":{\"axis\":\"y\",\"strokePattern\":[7,3]},\"Flexible case\":{\"axis\":\"y\",\"strokeWidth\":2}}},\"scale\":\"minute\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"2022-12-31T23:00:00.000Z\",\"2022-12-31T23:15:00.000Z\",\"2022-12-31T23:30:00.000Z\",\"2022-12-31T23:45:00.000Z\",\"2023-01-01T00:00:00.000Z\",\"2023-01-01T00:15:00.000Z\",\"2023-01-01T00:30:00.000Z\",\"2023-01-01T00:45:00.000Z\",\"2023-01-01T01:00:00.000Z\",\"2023-01-01T01:15:00.000Z\",\"2023-01-01T01:30:00.000Z\",\"2023-01-01T01:45:00.000Z\",\"2023-01-01T02:00:00.000Z\",\"2023-01-01T02:15:00.000Z\",\"2023-01-01T02:30:00.000Z\",\"2023-01-01T02:45:00.000Z\",\"2023-01-01T03:00:00.000Z\",\"2023-01-01T03:15:00.000Z\",\"2023-01-01T03:30:00.000Z\",\"2023-01-01T03:45:00.000Z\",\"2023-01-01T04:00:00.000Z\",\"2023-01-01T04:15:00.000Z\",\"2023-01-01T04:30:00.000Z\",\"2023-01-01T04:45:00.000Z\",\"2023-01-01T05:00:00.000Z\",\"2023-01-01T05:15:00.000Z\",\"2023-01-01T05:30:00.000Z\",\"2023-01-01T05:45:00.000Z\",\"2023-01-01T06:00:00.000Z\",\"2023-01-01T06:15:00.000Z\",\"2023-01-01T06:30:00.000Z\",\"2023-01-01T06:45:00.000Z\",\"2023-01-01T07:00:00.000Z\",\"2023-01-01T07:15:00.000Z\",\"2023-01-01T07:30:00.000Z\",\"2023-01-01T07:45:00.000Z\",\"2023-01-01T08:00:00.000Z\",\"2023-01-01T08:15:00.000Z\",\"2023-01-01T08:30:00.000Z\",\"2023-01-01T08:45:00.000Z\",\"2023-01-01T09:00:00.000Z\",\"2023-01-01T09:15:00.000Z\",\"2023-01-01T09:30:00.000Z\",\"2023-01-01T09:45:00.000Z\",\"2023-01-01T10:00:00.000Z\",\"2023-01-01T10:15:00.000Z\",\"2023-01-01T10:30:00.000Z\",\"2023-01-01T10:45:00.000Z\",\"2023-01-01T11:00:00.000Z\",\"2023-01-01T11:15:00.000Z\",\"2023-01-01T11:30:00.000Z\",\"2023-01-01T11:45:00.000Z\",\"2023-01-01T12:00:00.000Z\",\"2023-01-01T12:15:00.000Z\",\"2023-01-01T12:30:00.000Z\",\"2023-01-01T12:45:00.000Z\",\"2023-01-01T13:00:00.000Z\",\"2023-01-01T13:15:00.000Z\",\"2023-01-01T13:30:00.000Z\",\"2023-01-01T13:45:00.000Z\",\"2023-01-01T14:00:00.000Z\",\"2023-01-01T14:15:00.000Z\",\"2023-01-01T14:30:00.000Z\",\"2023-01-01T14:45:00.000Z\",\"2023-01-01T15:00:00.000Z\",\"2023-01-01T15:15:00.000Z\",\"2023-01-01T15:30:00.000Z\",\"2023-01-01T15:45:00.000Z\",\"2023-01-01T16:00:00.000Z\",\"2023-01-01T16:15:00.000Z\",\"2023-01-01T16:30:00.000Z\",\"2023-01-01T16:45:00.000Z\",\"2023-01-01T17:00:00.000Z\",\"2023-01-01T17:15:00.000Z\",\"2023-01-01T17:30:00.000Z\",\"2023-01-01T17:45:00.000Z\",\"2023-01-01T18:00:00.000Z\",\"2023-01-01T18:15:00.000Z\",\"2023-01-01T18:30:00.000Z\",\"2023-01-01T18:45:00.000Z\",\"2023-01-01T19:00:00.000Z\",\"2023-01-01T19:15:00.000Z\",\"2023-01-01T19:30:00.000Z\",\"2023-01-01T19:45:00.000Z\",\"2023-01-01T20:00:00.000Z\",\"2023-01-01T20:15:00.000Z\",\"2023-01-01T20:30:00.000Z\",\"2023-01-01T20:45:00.000Z\",\"2023-01-01T21:00:00.000Z\",\"2023-01-01T21:15:00.000Z\",\"2023-01-01T21:30:00.000Z\",\"2023-01-01T21:45:00.000Z\",\"2023-01-01T22:00:00.000Z\",\"2023-01-01T22:15:00.000Z\",\"2023-01-01T22:30:00.000Z\",\"2023-01-01T22:45:00.000Z\",\"2023-01-01T23:00:00.000Z\",\"2023-01-01T23:15:00.000Z\",\"2023-01-01T23:30:00.000Z\",\"2023-01-01T23:45:00.000Z\",\"2023-01-02T00:00:00.000Z\",\"2023-01-02T00:15:00.000Z\",\"2023-01-02T00:30:00.000Z\",\"2023-01-02T00:45:00.000Z\",\"2023-01-02T01:00:00.000Z\",\"2023-01-02T01:15:00.000Z\",\"2023-01-02T01:30:00.000Z\",\"2023-01-02T01:45:00.000Z\",\"2023-01-02T02:00:00.000Z\",\"2023-01-02T02:15:00.000Z\",\"2023-01-02T02:30:00.000Z\",\"2023-01-02T02:45:00.000Z\",\"2023-01-02T03:00:00.000Z\",\"2023-01-02T03:15:00.000Z\",\"2023-01-02T03:30:00.000Z\",\"2023-01-02T03:45:00.000Z\",\"2023-01-02T04:00:00.000Z\",\"2023-01-02T04:15:00.000Z\",\"2023-01-02T04:30:00.000Z\",\"2023-01-02T04:45:00.000Z\",\"2023-01-02T05:00:00.000Z\",\"2023-01-02T05:15:00.000Z\",\"2023-01-02T05:30:00.000Z\",\"2023-01-02T05:45:00.000Z\",\"2023-01-02T06:00:00.000Z\",\"2023-01-02T06:15:00.000Z\",\"2023-01-02T06:30:00.000Z\",\"2023-01-02T06:45:00.000Z\",\"2023-01-02T07:00:00.000Z\",\"2023-01-02T07:15:00.000Z\",\"2023-01-02T07:30:00.000Z\",\"2023-01-02T07:45:00.000Z\",\"2023-01-02T08:00:00.000Z\",\"2023-01-02T08:15:00.000Z\",\"2023-01-02T08:30:00.000Z\",\"2023-01-02T08:45:00.000Z\",\"2023-01-02T09:00:00.000Z\",\"2023-01-02T09:15:00.000Z\",\"2023-01-02T09:30:00.000Z\",\"2023-01-02T09:45:00.000Z\",\"2023-01-02T10:00:00.000Z\",\"2023-01-02T10:15:00.000Z\",\"2023-01-02T10:30:00.000Z\",\"2023-01-02T10:45:00.000Z\",\"2023-01-02T11:00:00.000Z\",\"2023-01-02T11:15:00.000Z\",\"2023-01-02T11:30:00.000Z\",\"2023-01-02T11:45:00.000Z\",\"2023-01-02T12:00:00.000Z\",\"2023-01-02T12:15:00.000Z\",\"2023-01-02T12:30:00.000Z\",\"2023-01-02T12:45:00.000Z\",\"2023-01-02T13:00:00.000Z\",\"2023-01-02T13:15:00.000Z\",\"2023-01-02T13:30:00.000Z\",\"2023-01-02T13:45:00.000Z\",\"2023-01-02T14:00:00.000Z\",\"2023-01-02T14:15:00.000Z\",\"2023-01-02T14:30:00.000Z\",\"2023-01-02T14:45:00.000Z\",\"2023-01-02T15:00:00.000Z\",\"2023-01-02T15:15:00.000Z\",\"2023-01-02T15:30:00.000Z\",\"2023-01-02T15:45:00.000Z\",\"2023-01-02T16:00:00.000Z\",\"2023-01-02T16:15:00.000Z\",\"2023-01-02T16:30:00.000Z\",\"2023-01-02T16:45:00.000Z\",\"2023-01-02T17:00:00.000Z\",\"2023-01-02T17:15:00.000Z\",\"2023-01-02T17:30:00.000Z\",\"2023-01-02T17:45:00.000Z\",\"2023-01-02T18:00:00.000Z\",\"2023-01-02T18:15:00.000Z\",\"2023-01-02T18:30:00.000Z\",\"2023-01-02T18:45:00.000Z\",\"2023-01-02T19:00:00.000Z\",\"2023-01-02T19:15:00.000Z\",\"2023-01-02T19:30:00.000Z\",\"2023-01-02T19:45:00.000Z\",\"2023-01-02T20:00:00.000Z\",\"2023-01-02T20:15:00.000Z\",\"2023-01-02T20:30:00.000Z\",\"2023-01-02T20:45:00.000Z\",\"2023-01-02T21:00:00.000Z\",\"2023-01-02T21:15:00.000Z\",\"2023-01-02T21:30:00.000Z\",\"2023-01-02T21:45:00.000Z\",\"2023-01-02T22:00:00.000Z\",\"2023-01-02T22:15:00.000Z\",\"2023-01-02T22:30:00.000Z\",\"2023-01-02T22:45:00.000Z\",\"2023-01-02T23:00:00.000Z\",\"2023-01-02T23:15:00.000Z\",\"2023-01-02T23:30:00.000Z\",\"2023-01-02T23:45:00.000Z\",\"2023-01-03T00:00:00.000Z\",\"2023-01-03T00:15:00.000Z\",\"2023-01-03T00:30:00.000Z\",\"2023-01-03T00:45:00.000Z\",\"2023-01-03T01:00:00.000Z\",\"2023-01-03T01:15:00.000Z\",\"2023-01-03T01:30:00.000Z\",\"2023-01-03T01:45:00.000Z\",\"2023-01-03T02:00:00.000Z\",\"2023-01-03T02:15:00.000Z\",\"2023-01-03T02:30:00.000Z\",\"2023-01-03T02:45:00.000Z\",\"2023-01-03T03:00:00.000Z\",\"2023-01-03T03:15:00.000Z\",\"2023-01-03T03:30:00.000Z\",\"2023-01-03T03:45:00.000Z\",\"2023-01-03T04:00:00.000Z\",\"2023-01-03T04:15:00.000Z\",\"2023-01-03T04:30:00.000Z\",\"2023-01-03T04:45:00.000Z\",\"2023-01-03T05:00:00.000Z\",\"2023-01-03T05:15:00.000Z\",\"2023-01-03T05:30:00.000Z\",\"2023-01-03T05:45:00.000Z\",\"2023-01-03T06:00:00.000Z\",\"2023-01-03T06:15:00.000Z\",\"2023-01-03T06:30:00.000Z\",\"2023-01-03T06:45:00.000Z\",\"2023-01-03T07:00:00.000Z\",\"2023-01-03T07:15:00.000Z\",\"2023-01-03T07:30:00.000Z\",\"2023-01-03T07:45:00.000Z\",\"2023-01-03T08:00:00.000Z\",\"2023-01-03T08:15:00.000Z\",\"2023-01-03T08:30:00.000Z\",\"2023-01-03T08:45:00.000Z\",\"2023-01-03T09:00:00.000Z\",\"2023-01-03T09:15:00.000Z\",\"2023-01-03T09:30:00.000Z\",\"2023-01-03T09:45:00.000Z\",\"2023-01-03T10:00:00.000Z\",\"2023-01-03T10:15:00.000Z\",\"2023-01-03T10:30:00.000Z\",\"2023-01-03T10:45:00.000Z\",\"2023-01-03T11:00:00.000Z\",\"2023-01-03T11:15:00.000Z\",\"2023-01-03T11:30:00.000Z\",\"2023-01-03T11:45:00.000Z\",\"2023-01-03T12:00:00.000Z\",\"2023-01-03T12:15:00.000Z\",\"2023-01-03T12:30:00.000Z\",\"2023-01-03T12:45:00.000Z\",\"2023-01-03T13:00:00.000Z\",\"2023-01-03T13:15:00.000Z\",\"2023-01-03T13:30:00.000Z\",\"2023-01-03T13:45:00.000Z\",\"2023-01-03T14:00:00.000Z\",\"2023-01-03T14:15:00.000Z\",\"2023-01-03T14:30:00.000Z\",\"2023-01-03T14:45:00.000Z\",\"2023-01-03T15:00:00.000Z\",\"2023-01-03T15:15:00.000Z\",\"2023-01-03T15:30:00.000Z\",\"2023-01-03T15:45:00.000Z\",\"2023-01-03T16:00:00.000Z\",\"2023-01-03T16:15:00.000Z\",\"2023-01-03T16:30:00.000Z\",\"2023-01-03T16:45:00.000Z\",\"2023-01-03T17:00:00.000Z\",\"2023-01-03T17:15:00.000Z\",\"2023-01-03T17:30:00.000Z\",\"2023-01-03T17:45:00.000Z\",\"2023-01-03T18:00:00.000Z\",\"2023-01-03T18:15:00.000Z\",\"2023-01-03T18:30:00.000Z\",\"2023-01-03T18:45:00.000Z\",\"2023-01-03T19:00:00.000Z\",\"2023-01-03T19:15:00.000Z\",\"2023-01-03T19:30:00.000Z\",\"2023-01-03T19:45:00.000Z\",\"2023-01-03T20:00:00.000Z\",\"2023-01-03T20:15:00.000Z\",\"2023-01-03T20:30:00.000Z\",\"2023-01-03T20:45:00.000Z\",\"2023-01-03T21:00:00.000Z\",\"2023-01-03T21:15:00.000Z\",\"2023-01-03T21:30:00.000Z\",\"2023-01-03T21:45:00.000Z\",\"2023-01-03T22:00:00.000Z\",\"2023-01-03T22:15:00.000Z\",\"2023-01-03T22:30:00.000Z\",\"2023-01-03T22:45:00.000Z\",\"2023-01-03T23:00:00.000Z\",\"2023-01-03T23:15:00.000Z\",\"2023-01-03T23:30:00.000Z\",\"2023-01-03T23:45:00.000Z\",\"2023-01-04T00:00:00.000Z\",\"2023-01-04T00:15:00.000Z\",\"2023-01-04T00:30:00.000Z\",\"2023-01-04T00:45:00.000Z\",\"2023-01-04T01:00:00.000Z\",\"2023-01-04T01:15:00.000Z\",\"2023-01-04T01:30:00.000Z\",\"2023-01-04T01:45:00.000Z\"],[[-0.004303855496168829,-0.003815097954720664,-0.003815097954720664],[-0.003538210761202038,-0.003538210761202038,-0.001034404470171823],[-0.003261323567683395,-0.003261323567683395,-0.001990664550461964],[-0.005443908472667934,-0.002984436374164758,-0.002984436374164758],[-0.006398049271222223,-0.002818818325056233,-0.002818818325056233],[-0.002704335865576378,-0.002704335865576378,-0.001888590982998737],[-0.02346499979435765,-0.002589853406096528,-0.002589853406096528],[-0.002475370946616673,-0.002475370946616673,-0.001332934768871109],[-0.007766080549792164,-0.007766080549792164,-0.007096013724540111],[-0.01534071561773137,-0.007744738127703034,-0.007744738127703034],[-0.007723395705613915,-0.007723395705613915,-0.001484002604932438],[-0.007702053283524786,-0.007702053283524786,-0.003822838644077756],[-0.009062510312346731,-0.007066253992520803,-0.007066253992520803],[-0.01324567484058586,-0.006880113924028255,-0.006880113924028255],[-0.006693973855535708,-0.006693973855535708,-0.004464111602868647],[-0.007333879684567047,-0.006507833787043169,-0.006507833787043169],[-0.008693931792831811,-0.005565839034810873,-0.005565839034810873],[-0.00863424182950699,-0.005599376516881726,-0.005599376516881726],[-0.005632913998952588,-0.005632913998952588,-0.00100731719604223],[-0.005666451481023441,-0.005666451481023441,-0.002231168822967787],[-0.005066656856083825,-0.005066656856083825,-0.004245169467736043],[-0.008213072530033711,-0.005116905454650469,-0.005116905454650469],[-0.00948010164679081,-0.005167154053217112,-0.005167154053217112],[-0.005217402651783754,-0.005217402651783754,-0.000454735605308709],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[-0.03005814738190923,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0.001152662470435186,0.002238307222251035,0.002238307222251035],[0.001697073565422803,0.00220033161053307,0.00220033161053307],[0.002162355998815106,0.002162355998815106,0.004198968943035493],[0.001420442128329176,0.002124380387097141,0.002124380387097141],[0.001222338151232245,0.001222338151232245,0.001646399391259842],[0.001156351285710552,0.001156351285710552,0.002482377292345848],[0.0001775515336697998,0.001090364420188874,0.001090364420188874],[4.348114167004466e-05,0.001024377554667195,0.001024377554667195],[6.609590959624161e-05,6.609590959624161e-05,8.451469714599529e-05],[6.864387252864872e-05,6.864387252864872e-05,8.097950783121854e-05],[7.119183546105588e-05,7.119183546105588e-05,0.0001000011525379495],[7.373979839346213e-05,7.373979839346213e-05,0.0001134641004958729],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0.002843219567725518,0.002884216313953781,0.002884216313953781],[0.002455871923852425,0.002885974581326706,0.002885974581326706],[0.002645479221890098,0.002887732848699611,0.002887732848699611],[0.002502296504131871,0.002889491116072517,0.002889491116072517],[0.0446584383199138,0.08003658587349557,0.08003658587349557],[0.08106606961659782,0.08106606961659782,0.08795792251038755],[0.08209555335970008,0.08209555335970008,0.10472272920459],[0.07522381328725333,0.08312503710280232,0.08312503710280232],[0.1306844960352466,0.1306844960352466,0.2341925340852834],[0.147398081064084,0.1479699179012728,0.1479699179012728],[0.1652553397672991,0.1652553397672991,0.1833059747208628],[0.1250320992399635,0.1825407616333253,0.1825407616333253],[0.2187864114314122,0.2517241167617721,0.2517241167617721],[0.2197270528127813,0.2522555906653929,0.2522555906653929],[0.2057000952593982,0.2527870645690137,0.2527870645690137],[0.2533185384726345,0.2533185384726345,0.2668912431346518],[0.5509366985963047,0.5509366985963047,0.613454411677207],[0.4253411995346852,0.531528119775397,0.531528119775397],[0.4256594785420024,0.5121195409544916,0.5121195409544916],[0.178341202214561,0.4927109621335863,0.4927109621335863],[0.2454176954558889,0.2603399996299469,0.2603399996299469],[0.2575984298147386,0.2610295860931008,0.2610295860931008],[0.2617191725562534,0.2617191725562534,0.2680196663913003],[0.2624087590194059,0.2624087590194059,0.3836054899010868],[0.2968534562314582,0.2968534562314582,0.4077819839542964],[0.2899779522706019,0.2899779522706019,0.3343790019719929],[0.2831024483097441,0.2831024483097441,0.3313523695251828],[0.2762269443488877,0.2762269443488877,0.2946220481643055],[0.2299479312861049,0.2299479312861049,0.2492459076363413],[0.2223306716589637,0.2223306716589637,0.2711304375640541],[0.1504277447130758,0.2147134120318238,0.2147134120318238],[0.1235638092172242,0.2070961524046827,0.2070961524046827],[0.1530918322936146,0.1732108428501013,0.1732108428501013],[0.04648008955821571,0.1631821445688331,0.1631821445688331],[0.1531534462875649,0.1531534462875649,0.1689615137269336],[0.1431247480062968,0.1431247480062968,0.1693939688544463],[0.09221877272944101,0.1013568698950392,0.1013568698950392],[0.08515624208266546,0.09577838760938316,0.09577838760938316],[0.09019990532372632,0.09019990532372632,0.09420321165955753],[0.08041735293796218,0.0846214230380703,0.0846214230380703],[0.05194664491095238,0.248194833962579,0.248194833962579],[-0.007894802992126804,0.2313820592418962,0.2313820592418962],[0.1957405264995986,0.2145692845212134,0.2145692845212134],[0.1881199898350125,0.1977565098005306,0.1977565098005306],[0.1562471379351917,0.1562471379351917,0.1958924163636969],[0.1247072420632153,0.1549529099830426,0.1549529099830426],[0.07925697991628204,0.1536586820308935,0.1536586820308935],[0.1523644540787444,0.1523644540787444,0.1770886217374594],[0.08425866247503372,0.08425866247503372,0.1328934828135296],[0.07260719057144591,0.07972535936310807,0.07972535936310807],[0.04229378264137733,0.07519205625118242,0.07519205625118242],[0.04885381089746537,0.07065875313925678,0.07065875313925678],[0.0486676512774426,0.05516908885711208,0.05516908885711208],[0.05477324668614052,0.05477324668614052,0.06661511822098704],[0.05437740451516906,0.05437740451516906,0.05621831478577432],[0.05398156234419761,0.05398156234419761,0.132458045026896],[-0.02127095024840542,0.06076931309499924,0.06076931309499924],[0.06129731437312162,0.06129731437312162,0.06547394772579267],[0.06182531565124412,0.06182531565124412,0.0634259248085306],[0.03336902394550743,0.0623533169293665,0.0623533169293665],[0.09679554354263813,0.09679554354263813,0.2500336678709443],[0.09909071935243519,0.09909071935243519,0.1365739939337405],[0.05883480145091505,0.1013858951622322,0.1013858951622322],[-0.003559146866042018,0.1036810709720293,0.1036810709720293],[0.1444543262658491,0.1444543262658491,0.2897526942919109],[0.09437384348087559,0.165992849358708,0.165992849358708],[0.1875313724515667,0.1875313724515667,0.2370404997171378],[0.2090698955444254,0.2090698955444254,0.2186381357007623],[0.1129280241233684,0.3086483440916221,0.3086483440916221],[0.3224745703990859,0.3273693123308135,0.3273693123308135],[0.3460902805700014,0.3460902805700014,0.3704742243575497],[0.2663331258329801,0.3648112488091924,0.3648112488091924],[0.4429818923303427,0.4429818923303427,0.5156821663792556],[0.477543050017554,0.477543050017554,0.7174970365632868],[0.2633261285662284,0.5121042077047656,0.5121042077047656],[0.442793235575096,0.5466653653919771,0.5466653653919771],[0.6440579546555892,0.6440579546555892,0.8255275936480854],[0.6143708450535234,0.6143708450535234,0.7159498159353223],[0.5846837354514535,0.5846837354514535,0.8159757174693123],[0.4424860090866327,0.5549966258493836,0.5549966258493836],[0.4249462147820664,0.4249462147820664,0.4484121050011175],[0.4423355903695727,0.4423355903695727,0.5363191751519002],[0.4597249659570823,0.4597249659570823,0.5596371158546944],[0.3582054534574975,0.477114341544592,0.477114341544592],[0.4868285684423204,0.4868285684423204,0.6060810947391683],[0.4938267874176097,0.5175400768419472,0.5175400768419472],[0.5482515852415742,0.5482515852415742,0.6746548375318469],[0.5789630936412011,0.5789630936412011,0.6217804365566421],[0.6140552427112261,0.6140552427112261,0.7929528611793342],[0.5847429392872149,0.5847429392872149,0.7693970607413098],[0.4766600981309962,0.5554306358632003,0.5554306358632003],[0.4551135315211123,0.5261183324391889,0.5261183324391889],[0.4946726328523444,0.4946726328523444,0.5056551605177949],[0.5109337754006419,0.5109337754006419,0.631612656608411],[0.457176911552708,0.5271949179489394,0.5271949179489394],[0.5434560604972335,0.5434560604972335,0.5439512729618929],[0.5770039614033646,0.5770039614033646,0.6840681383883142],[0.4105640714810079,0.5525369351326461,0.5525369351326461],[0.5280699088619243,0.5280699088619243,0.6024819570768994],[0.4917044246827272,0.5036028825912058,0.5036028825912058],[0.5022197295602192,0.5022197295602192,0.5397707968614803],[0.5280958946285931,0.5280958946285931,0.7316629234774097],[0.5539720596969669,0.5539720596969669,0.6931757456378381],[0.5000830261140973,0.5798482247653408,0.5798482247653408],[0.6394927252010377,0.6394927252010377,0.7250804615547862],[0.7488061354205928,0.7488061354205928,0.9620410198570786],[0.8581195456401479,0.8581195456401479,1.144530852812834],[0.8095703199979075,0.967432955859703,0.967432955859703],[1.219086983253638,1.219086983253638,1.341541153958813],[1.232929256494387,1.232929256494387,1.348090250748232],[1.065422424350793,1.246771529735136,1.246771529735136],[1.227459003453413,1.260613802975881,1.260613802975881],[1.146023297008228,1.19936694721076,1.19936694721076],[1.032474905900034,1.179422250588612,1.179422250588612],[0.95282402119186,1.159477553966464,1.159477553966464],[0.6772202354849014,1.139532857344312,1.139532857344312],[1.088577478005584,1.088577478005584,1.186175403758158],[0.9177339798763045,1.028156148407418,1.028156148407418],[0.7901989655111392,0.9677348188092469,0.9677348188092469],[0.7608284019819614,0.9073134892110766,0.9073134892110766],[0.7626515622176295,0.7626515622176295,0.7869717518813539],[0.6566144358879688,0.7501549124693587,0.7501549124693587],[0.7376582627210876,0.7376582627210876,0.8261900560615881],[0.7251616129728203,0.7251616129728203,0.8729579314116904],[0.659890492418444,0.659890492418444,0.7529260603288371],[0.6005670869431436,0.6387042607903143,0.6387042607903143],[0.5964545236446711,0.6175180291621846,0.6175180291621846],[0.5963317975340549,0.5963317975340549,0.7456124909341278],[0.5477016185245175,0.5477016185245175,0.6949605072113236],[0.4038615769138327,0.5200228483695586,0.5200228483695586],[0.4923440782145997,0.4923440782145997,0.5337742640045924],[0.323301087465133,0.464665308059644,0.464665308059644],[0.2452870385940775,0.4023605940146763,0.4023605940146763],[0.3302849879167995,0.3689189163691834,0.3689189163691834],[0.3235587076758804,0.3354772387236905,0.3354772387236905],[0.3020355610781976,0.3020355610781976,0.3468338012817571],[0.2811132731048623,0.2811132731048623,0.3252733037415121],[0.2603721790937003,0.2603721790937003,0.279874887073321],[-0.005813357963112409,0.2396310850825384,0.2396310850825384],[0.07162250077083004,0.2188899910713763,0.2188899910713763],[0.06679527966087316,0.1828926055474634,0.1828926055474634],[0.1116264214392553,0.1846623191870941,0.1846623191870941],[0.1864320328267246,0.1864320328267246,0.2470181151414016],[0.1882017464663551,0.1882017464663551,0.4009443732699035],[0.1880084216848904,0.1880084216848904,0.2825055025621925],[0.1830557623884566,0.1830557623884566,0.2577151340537471],[0.1468488538633711,0.1781031030920229,0.1781031030920229],[0.08500164468605999,0.1731504437955889,0.1731504437955889],[0.09189502482075067,0.1628725599309772,0.1628725599309772],[0.1555094243102278,0.1555094243102278,0.2083687553307551],[0.1437855515670582,0.1481462886894782,0.1481462886894782],[0.1342043484426708,0.1407831530687288,0.1407831530687288],[0.03499573221102358,0.1318305789792514,0.1318305789792514],[0.1318160281427194,0.1318160281427194,0.1384714176770022],[0.1318014773061876,0.1318014773061876,0.1680909077671763],[0.1317869264696557,0.1317869264696557,0.2237560305547707],[0.08207697044131382,0.1348338829082397,0.1348338829082397],[0.1420376292657675,0.1420376292657675,0.1552350077185657],[0.149241375623295,0.149241375623295,0.2042065316724439],[0.1204569670328015,0.1564451219808225,0.1564451219808225],[0.180226227408037,0.195528518014652,0.195528518014652],[0.2163509354043668,0.2163509354043668,0.2930466039426615],[0.1635985038412791,0.2371733527940816,0.2371733527940816],[0.1869609389480166,0.2579957701837962,0.2579957701837962],[-0.002284616781175719,0.320966056412006,0.320966056412006],[0.1913957958623808,0.3485812878287387,0.3485812878287387],[0.2793236690448796,0.3761965192454696,0.3761965192454696],[0.3519794796501909,0.4038117506622023,0.4038117506622023],[0.390944249258438,0.4563813316551616,0.4563813316551616],[0.444686845060869,0.444686845060869,0.6644782733234874],[0.3041693732507726,0.4329923584665802,0.4329923584665802],[0.4212978718722877,0.4212978718722877,0.454592994258388],[0.4144701039894024,0.4144701039894024,0.4674095630581786],[0.1373969423272117,0.4261980570683239,0.4261980570683239],[0.2174756144872316,0.4379260101472454,0.4379260101472454],[0.4496539632261709,0.4496539632261709,0.4830611068615678],[0.4543471762562764,0.4543471762562764,0.7196168836025866],[0.01932389070962973,0.4393653345143769,0.4393653345143769],[0.4243834927724734,0.4243834927724734,0.426721066974596],[0.4094016510305738,0.4094016510305738,0.4525062967414022],[0.09351648023179977,0.3965724237784742,0.3965724237784742],[0.3923266388944106,0.3925251481366034,0.3925251481366034],[0.3776976896387987,0.3884778724947365,0.3884778724947365],[0.008744491261482549,0.3844305968528658,0.3844305968528658],[0.2977969809704423,0.3691843550605307,0.3691843550605307],[0.379380604662374,0.4081534462952561,0.4081534462952561],[0.4471225375299777,0.4471225375299777,0.6441564892168626],[0.3286321581610369,0.486091628764703,0.486091628764703],[0.5136019480553677,0.5136019480553677,0.7109183927432384],[0.5046290052443573,0.5046290052443573,0.5518789232801878],[0.4807325210438938,0.4956560624333466,0.4956560624333466],[0.4866831196223361,0.4866831196223361,0.5965617536336129],[0.3035198203734114,0.4840931044115017,0.4840931044115017],[0.4923190290698384,0.4923190290698384,0.5544235361980472],[0.500544953728179,0.500544953728179,0.689980417274992],[0.3169066801101665,0.5087708783865195,0.5087708783865195],[0.528823112840992,0.528823112840992,0.5342086398833337],[0.5519271582068677,0.5519271582068677,0.788426599349606],[0.5750312035727431,0.5750312035727431,0.76120544670792],[0.5981352489386186,0.5981352489386186,0.8481668508489106],[0.6204198648138352,0.6204198648138352,0.8374802718509877],[0.7061737496352833,0.7061737496352833,0.8646265565709181],[0.4012906305044608,0.7919276344567352,0.7919276344567352],[0.6690022343613109,0.8776815192781834,0.8776815192781834],[0.9880172643831366,0.9880172643831366,1.253809778816552],[0.9330790951725489,0.9823992213570502,0.9823992213570502],[0.9767811783309599,0.9767811783309599,1.100745665911436],[0.9711631353048694,0.9711631353048694,1.022181585532056],[0.954975081023883,0.954975081023883,1.027680187201881],[0.8460226953882762,0.9729644282593451,0.9729644282593451],[0.9642592570419536,0.9909537754948031,0.9909537754948031],[1.008943122730265,1.008943122730265,1.104516743693576],[0.9350766544922975,0.9785490283502921,0.9785490283502921],[0.8756644005175177,0.9186506954456894,0.9186506954456894],[0.8587523625410869,0.8587523625410869,1.169832885854888],[0.7862976010868856,0.798854029636488,0.798854029636488],[0.6867665777068431,0.6867665777068431,0.6968137514119904],[0.6846941563846012,0.6846941563846012,0.9310507958645819],[0.6826217350623591,0.6826217350623591,0.6946440496117996],[0.6436463657015166,0.6805493137401205,0.6805493137401205],[0.5923635640726337,0.5923635640726337,0.6209501310418742],[0.5691036088076674,0.5691036088076674,0.7202859407360948],[0.3307259824513301,0.5458436535427013,0.5458436535427013],[0.5225836982777351,0.5225836982777351,0.5243571552555665],[0.4373621884369644,0.4373621884369644,0.5393414321498581],[0.1718587198117622,0.4133377930721256,0.4133377930721256],[0.3274490625336418,0.3893133977072843,0.3893133977072843],[0.3350667809879995,0.3652890023424455,0.3652890023424455],[0.2526564751090232,0.2758272229792766,0.2758272229792766],[0.1638658251048443,0.2507566861108952,0.2507566861108952],[0.2256861492425117,0.2256861492425117,0.3204025590486704],[0.07862413548106319,0.2006156123741286,0.2006156123741286],[0.1019270050129902,0.1519884753000112,0.1519884753000112],[0.1310119870255904,0.1459595193650165,0.1459595193650165],[0.05792577235445145,0.1399305634300217,0.1399305634300217],[0.1339016074950268,0.1339016074950268,0.1504919896915274],[0.05197189617117245,0.1092994164202398,0.1092994164202398],[0.1064613241806431,0.1064613241806431,0.1289979298206191],[0.1036232319410467,0.1036232319410467,0.1291828935121305],[0.1007851397014502,0.1007851397014502,0.135899854176109],[0.05426873231667874,0.05426873231667874,0.09713131456148082],[0.03156075228670956,0.05358244197719319,0.05358244197719319],[0.05289615163770763,0.05289615163770763,0.06182546829141567],[0.04333981200981633,0.05220986129822206,0.05220986129822206],[-0.009460696242321726,0,0],[0,0,0],[0,0,0],[0,0,0]],[[-0.004303855496168829,-0.004303855496168829,-0.004303855496168829],[-0.001034404470171823,-0.001034404470171823,-0.001034404470171823],[-0.001990664550461964,-0.001990664550461964,-0.001990664550461964],[-0.005443908472667934,-0.005443908472667934,-0.005443908472667934],[-0.006398049271222223,-0.006398049271222223,-0.006398049271222223],[-0.001888590982998737,-0.001888590982998737,-0.001888590982998737],[-0.02346499979435765,-0.02346499979435765,-0.02346499979435765],[-0.001332934768871109,-0.001332934768871109,-0.001332934768871109],[-0.007096013724540111,-0.007096013724540111,-0.007096013724540111],[-0.01534071561773137,-0.01534071561773137,-0.01534071561773137],[-0.001484002604932438,-0.001484002604932438,-0.001484002604932438],[-0.003822838644077756,-0.003822838644077756,-0.003822838644077756],[-0.009062510312346731,-0.009062510312346731,-0.009062510312346731],[-0.01324567484058586,-0.01324567484058586,-0.01324567484058586],[-0.004464111602868647,-0.004464111602868647,-0.004464111602868647],[-0.007333879684567047,-0.007333879684567047,-0.007333879684567047],[-0.008693931792831811,-0.008693931792831811,-0.008693931792831811],[-0.00863424182950699,-0.00863424182950699,-0.00863424182950699],[-0.00100731719604223,-0.00100731719604223,-0.00100731719604223],[-0.002231168822967787,-0.002231168822967787,-0.002231168822967787],[-0.004245169467736043,-0.004245169467736043,-0.004245169467736043],[-0.008213072530033711,-0.008213072530033711,-0.008213072530033711],[-0.00948010164679081,-0.00948010164679081,-0.00948010164679081],[-0.000454735605308709,-0.000454735605308709,-0.000454735605308709],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[-0.03005814738190923,-0.03005814738190923,-0.03005814738190923],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0.001152662470435186,0.001152662470435186,0.001152662470435186],[0.001697073565422803,0.001697073565422803,0.001697073565422803],[0.004198968943035493,0.004198968943035493,0.004198968943035493],[0.001420442128329176,0.001420442128329176,0.001420442128329176],[0.001646399391259842,0.001646399391259842,0.001646399391259842],[0.002482377292345848,0.002482377292345848,0.002482377292345848],[0.0001775515336697998,0.0001775515336697998,0.0001775515336697998],[4.348114167004466e-05,4.348114167004466e-05,4.348114167004466e-05],[8.451469714599529e-05,8.451469714599529e-05,8.451469714599529e-05],[8.097950783121854e-05,8.097950783121854e-05,8.097950783121854e-05],[0.0001000011525379495,0.0001000011525379495,0.0001000011525379495],[0.0001134641004958729,0.0001134641004958729,0.0001134641004958729],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0.002843219567725518,0.002843219567725518,0.002843219567725518],[0.002455871923852425,0.002455871923852425,0.002455871923852425],[0.002645479221890098,0.002645479221890098,0.002645479221890098],[0.002502296504131871,0.002502296504131871,0.002502296504131871],[0.0446584383199138,0.0446584383199138,0.0446584383199138],[0.08795792251038755,0.08795792251038755,0.08795792251038755],[0.10472272920459,0.10472272920459,0.10472272920459],[0.07522381328725333,0.07522381328725333,0.07522381328725333],[0.2341925340852834,0.2341925340852834,0.2341925340852834],[0.147398081064084,0.147398081064084,0.147398081064084],[0.1833059747208628,0.1833059747208628,0.1833059747208628],[0.1250320992399635,0.1250320992399635,0.1250320992399635],[0.2187864114314122,0.2187864114314122,0.2187864114314122],[0.2197270528127813,0.2197270528127813,0.2197270528127813],[0.2057000952593982,0.2057000952593982,0.2057000952593982],[0.2668912431346518,0.2668912431346518,0.2668912431346518],[0.613454411677207,0.613454411677207,0.613454411677207],[0.4253411995346852,0.4253411995346852,0.4253411995346852],[0.4256594785420024,0.4256594785420024,0.4256594785420024],[0.178341202214561,0.178341202214561,0.178341202214561],[0.2454176954558889,0.2454176954558889,0.2454176954558889],[0.2575984298147386,0.2575984298147386,0.2575984298147386],[0.2680196663913003,0.2680196663913003,0.2680196663913003],[0.3836054899010868,0.3836054899010868,0.3836054899010868],[0.4077819839542964,0.4077819839542964,0.4077819839542964],[0.3343790019719929,0.3343790019719929,0.3343790019719929],[0.3313523695251828,0.3313523695251828,0.3313523695251828],[0.2946220481643055,0.2946220481643055,0.2946220481643055],[0.2492459076363413,0.2492459076363413,0.2492459076363413],[0.2711304375640541,0.2711304375640541,0.2711304375640541],[0.1504277447130758,0.1504277447130758,0.1504277447130758],[0.1235638092172242,0.1235638092172242,0.1235638092172242],[0.1530918322936146,0.1530918322936146,0.1530918322936146],[0.04648008955821571,0.04648008955821571,0.04648008955821571],[0.1689615137269336,0.1689615137269336,0.1689615137269336],[0.1693939688544463,0.1693939688544463,0.1693939688544463],[0.09221877272944101,0.09221877272944101,0.09221877272944101],[0.08515624208266546,0.08515624208266546,0.08515624208266546],[0.09420321165955753,0.09420321165955753,0.09420321165955753],[0.08041735293796218,0.08041735293796218,0.08041735293796218],[0.05194664491095238,0.05194664491095238,0.05194664491095238],[-0.007894802992126804,-0.007894802992126804,-0.007894802992126804],[0.1957405264995986,0.1957405264995986,0.1957405264995986],[0.1881199898350125,0.1881199898350125,0.1881199898350125],[0.1958924163636969,0.1958924163636969,0.1958924163636969],[0.1247072420632153,0.1247072420632153,0.1247072420632153],[0.07925697991628204,0.07925697991628204,0.07925697991628204],[0.1770886217374594,0.1770886217374594,0.1770886217374594],[0.1328934828135296,0.1328934828135296,0.1328934828135296],[0.07260719057144591,0.07260719057144591,0.07260719057144591],[0.04229378264137733,0.04229378264137733,0.04229378264137733],[0.04885381089746537,0.04885381089746537,0.04885381089746537],[0.0486676512774426,0.0486676512774426,0.0486676512774426],[0.06661511822098704,0.06661511822098704,0.06661511822098704],[0.05621831478577432,0.05621831478577432,0.05621831478577432],[0.132458045026896,0.132458045026896,0.132458045026896],[-0.02127095024840542,-0.02127095024840542,-0.02127095024840542],[0.06547394772579267,0.06547394772579267,0.06547394772579267],[0.0634259248085306,0.0634259248085306,0.0634259248085306],[0.03336902394550743,0.03336902394550743,0.03336902394550743],[0.2500336678709443,0.2500336678709443,0.2500336678709443],[0.1365739939337405,0.1365739939337405,0.1365739939337405],[0.05883480145091505,0.05883480145091505,0.05883480145091505],[-0.003559146866042018,-0.003559146866042018,-0.003559146866042018],[0.2897526942919109,0.2897526942919109,0.2897526942919109],[0.09437384348087559,0.09437384348087559,0.09437384348087559],[0.2370404997171378,0.2370404997171378,0.2370404997171378],[0.2186381357007623,0.2186381357007623,0.2186381357007623],[0.1129280241233684,0.1129280241233684,0.1129280241233684],[0.3224745703990859,0.3224745703990859,0.3224745703990859],[0.3704742243575497,0.3704742243575497,0.3704742243575497],[0.2663331258329801,0.2663331258329801,0.2663331258329801],[0.5156821663792556,0.5156821663792556,0.5156821663792556],[0.7174970365632868,0.7174970365632868,0.7174970365632868],[0.2633261285662284,0.2633261285662284,0.2633261285662284],[0.442793235575096,0.442793235575096,0.442793235575096],[0.8255275936480854,0.8255275936480854,0.8255275936480854],[0.7159498159353223,0.7159498159353223,0.7159498159353223],[0.8159757174693123,0.8159757174693123,0.8159757174693123],[0.4424860090866327,0.4424860090866327,0.4424860090866327],[0.4484121050011175,0.4484121050011175,0.4484121050011175],[0.5363191751519002,0.5363191751519002,0.5363191751519002],[0.5596371158546944,0.5596371158546944,0.5596371158546944],[0.3582054534574975,0.3582054534574975,0.3582054534574975],[0.6060810947391683,0.6060810947391683,0.6060810947391683],[0.4938267874176097,0.4938267874176097,0.4938267874176097],[0.6746548375318469,0.6746548375318469,0.6746548375318469],[0.6217804365566421,0.6217804365566421,0.6217804365566421],[0.7929528611793342,0.7929528611793342,0.7929528611793342],[0.7693970607413098,0.7693970607413098,0.7693970607413098],[0.4766600981309962,0.4766600981309962,0.4766600981309962],[0.4551135315211123,0.4551135315211123,0.4551135315211123],[0.5056551605177949,0.5056551605177949,0.5056551605177949],[0.631612656608411,0.631612656608411,0.631612656608411],[0.457176911552708,0.457176911552708,0.457176911552708],[0.5439512729618929,0.5439512729618929,0.5439512729618929],[0.6840681383883142,0.6840681383883142,0.6840681383883142],[0.4105640714810079,0.4105640714810079,0.4105640714810079],[0.6024819570768994,0.6024819570768994,0.6024819570768994],[0.4917044246827272,0.4917044246827272,0.4917044246827272],[0.5397707968614803,0.5397707968614803,0.5397707968614803],[0.7316629234774097,0.7316629234774097,0.7316629234774097],[0.6931757456378381,0.6931757456378381,0.6931757456378381],[0.5000830261140973,0.5000830261140973,0.5000830261140973],[0.7250804615547862,0.7250804615547862,0.7250804615547862],[0.9620410198570786,0.9620410198570786,0.9620410198570786],[1.144530852812834,1.144530852812834,1.144530852812834],[0.8095703199979075,0.8095703199979075,0.8095703199979075],[1.341541153958813,1.341541153958813,1.341541153958813],[1.348090250748232,1.348090250748232,1.348090250748232],[1.065422424350793,1.065422424350793,1.065422424350793],[1.227459003453413,1.227459003453413,1.227459003453413],[1.146023297008228,1.146023297008228,1.146023297008228],[1.032474905900034,1.032474905900034,1.032474905900034],[0.95282402119186,0.95282402119186,0.95282402119186],[0.6772202354849014,0.6772202354849014,0.6772202354849014],[1.186175403758158,1.186175403758158,1.186175403758158],[0.9177339798763045,0.9177339798763045,0.9177339798763045],[0.7901989655111392,0.7901989655111392,0.7901989655111392],[0.7608284019819614,0.7608284019819614,0.7608284019819614],[0.7869717518813539,0.7869717518813539,0.7869717518813539],[0.6566144358879688,0.6566144358879688,0.6566144358879688],[0.8261900560615881,0.8261900560615881,0.8261900560615881],[0.8729579314116904,0.8729579314116904,0.8729579314116904],[0.7529260603288371,0.7529260603288371,0.7529260603288371],[0.6005670869431436,0.6005670869431436,0.6005670869431436],[0.5964545236446711,0.5964545236446711,0.5964545236446711],[0.7456124909341278,0.7456124909341278,0.7456124909341278],[0.6949605072113236,0.6949605072113236,0.6949605072113236],[0.4038615769138327,0.4038615769138327,0.4038615769138327],[0.5337742640045924,0.5337742640045924,0.5337742640045924],[0.323301087465133,0.323301087465133,0.323301087465133],[0.2452870385940775,0.2452870385940775,0.2452870385940775],[0.3302849879167995,0.3302849879167995,0.3302849879167995],[0.3235587076758804,0.3235587076758804,0.3235587076758804],[0.3468338012817571,0.3468338012817571,0.3468338012817571],[0.3252733037415121,0.3252733037415121,0.3252733037415121],[0.279874887073321,0.279874887073321,0.279874887073321],[-0.005813357963112409,-0.005813357963112409,-0.005813357963112409],[0.07162250077083004,0.07162250077083004,0.07162250077083004],[0.06679527966087316,0.06679527966087316,0.06679527966087316],[0.1116264214392553,0.1116264214392553,0.1116264214392553],[0.2470181151414016,0.2470181151414016,0.2470181151414016],[0.4009443732699035,0.4009443732699035,0.4009443732699035],[0.2825055025621925,0.2825055025621925,0.2825055025621925],[0.2577151340537471,0.2577151340537471,0.2577151340537471],[0.1468488538633711,0.1468488538633711,0.1468488538633711],[0.08500164468605999,0.08500164468605999,0.08500164468605999],[0.09189502482075067,0.09189502482075067,0.09189502482075067],[0.2083687553307551,0.2083687553307551,0.2083687553307551],[0.1437855515670582,0.1437855515670582,0.1437855515670582],[0.1342043484426708,0.1342043484426708,0.1342043484426708],[0.03499573221102358,0.03499573221102358,0.03499573221102358],[0.1384714176770022,0.1384714176770022,0.1384714176770022],[0.1680909077671763,0.1680909077671763,0.1680909077671763],[0.2237560305547707,0.2237560305547707,0.2237560305547707],[0.08207697044131382,0.08207697044131382,0.08207697044131382],[0.1552350077185657,0.1552350077185657,0.1552350077185657],[0.2042065316724439,0.2042065316724439,0.2042065316724439],[0.1204569670328015,0.1204569670328015,0.1204569670328015],[0.180226227408037,0.180226227408037,0.180226227408037],[0.2930466039426615,0.2930466039426615,0.2930466039426615],[0.1635985038412791,0.1635985038412791,0.1635985038412791],[0.1869609389480166,0.1869609389480166,0.1869609389480166],[-0.002284616781175719,-0.002284616781175719,-0.002284616781175719],[0.1913957958623808,0.1913957958623808,0.1913957958623808],[0.2793236690448796,0.2793236690448796,0.2793236690448796],[0.3519794796501909,0.3519794796501909,0.3519794796501909],[0.390944249258438,0.390944249258438,0.390944249258438],[0.6644782733234874,0.6644782733234874,0.6644782733234874],[0.3041693732507726,0.3041693732507726,0.3041693732507726],[0.454592994258388,0.454592994258388,0.454592994258388],[0.4674095630581786,0.4674095630581786,0.4674095630581786],[0.1373969423272117,0.1373969423272117,0.1373969423272117],[0.2174756144872316,0.2174756144872316,0.2174756144872316],[0.4830611068615678,0.4830611068615678,0.4830611068615678],[0.7196168836025866,0.7196168836025866,0.7196168836025866],[0.01932389070962973,0.01932389070962973,0.01932389070962973],[0.426721066974596,0.426721066974596,0.426721066974596],[0.4525062967414022,0.4525062967414022,0.4525062967414022],[0.09351648023179977,0.09351648023179977,0.09351648023179977],[0.3923266388944106,0.3923266388944106,0.3923266388944106],[0.3776976896387987,0.3776976896387987,0.3776976896387987],[0.008744491261482549,0.008744491261482549,0.008744491261482549],[0.2977969809704423,0.2977969809704423,0.2977969809704423],[0.379380604662374,0.379380604662374,0.379380604662374],[0.6441564892168626,0.6441564892168626,0.6441564892168626],[0.3286321581610369,0.3286321581610369,0.3286321581610369],[0.7109183927432384,0.7109183927432384,0.7109183927432384],[0.5518789232801878,0.5518789232801878,0.5518789232801878],[0.4807325210438938,0.4807325210438938,0.4807325210438938],[0.5965617536336129,0.5965617536336129,0.5965617536336129],[0.3035198203734114,0.3035198203734114,0.3035198203734114],[0.5544235361980472,0.5544235361980472,0.5544235361980472],[0.689980417274992,0.689980417274992,0.689980417274992],[0.3169066801101665,0.3169066801101665,0.3169066801101665],[0.5342086398833337,0.5342086398833337,0.5342086398833337],[0.788426599349606,0.788426599349606,0.788426599349606],[0.76120544670792,0.76120544670792,0.76120544670792],[0.8481668508489106,0.8481668508489106,0.8481668508489106],[0.8374802718509877,0.8374802718509877,0.8374802718509877],[0.8646265565709181,0.8646265565709181,0.8646265565709181],[0.4012906305044608,0.4012906305044608,0.4012906305044608],[0.6690022343613109,0.6690022343613109,0.6690022343613109],[1.253809778816552,1.253809778816552,1.253809778816552],[0.9330790951725489,0.9330790951725489,0.9330790951725489],[1.100745665911436,1.100745665911436,1.100745665911436],[1.022181585532056,1.022181585532056,1.022181585532056],[1.027680187201881,1.027680187201881,1.027680187201881],[0.8460226953882762,0.8460226953882762,0.8460226953882762],[0.9642592570419536,0.9642592570419536,0.9642592570419536],[1.104516743693576,1.104516743693576,1.104516743693576],[0.9350766544922975,0.9350766544922975,0.9350766544922975],[0.8756644005175177,0.8756644005175177,0.8756644005175177],[1.169832885854888,1.169832885854888,1.169832885854888],[0.7862976010868856,0.7862976010868856,0.7862976010868856],[0.6968137514119904,0.6968137514119904,0.6968137514119904],[0.9310507958645819,0.9310507958645819,0.9310507958645819],[0.6946440496117996,0.6946440496117996,0.6946440496117996],[0.6436463657015166,0.6436463657015166,0.6436463657015166],[0.6209501310418742,0.6209501310418742,0.6209501310418742],[0.7202859407360948,0.7202859407360948,0.7202859407360948],[0.3307259824513301,0.3307259824513301,0.3307259824513301],[0.5243571552555665,0.5243571552555665,0.5243571552555665],[0.5393414321498581,0.5393414321498581,0.5393414321498581],[0.1718587198117622,0.1718587198117622,0.1718587198117622],[0.3274490625336418,0.3274490625336418,0.3274490625336418],[0.3350667809879995,0.3350667809879995,0.3350667809879995],[0.2526564751090232,0.2526564751090232,0.2526564751090232],[0.1638658251048443,0.1638658251048443,0.1638658251048443],[0.3204025590486704,0.3204025590486704,0.3204025590486704],[0.07862413548106319,0.07862413548106319,0.07862413548106319],[0.1019270050129902,0.1019270050129902,0.1019270050129902],[0.1310119870255904,0.1310119870255904,0.1310119870255904],[0.05792577235445145,0.05792577235445145,0.05792577235445145],[0.1504919896915274,0.1504919896915274,0.1504919896915274],[0.05197189617117245,0.05197189617117245,0.05197189617117245],[0.1289979298206191,0.1289979298206191,0.1289979298206191],[0.1291828935121305,0.1291828935121305,0.1291828935121305],[0.135899854176109,0.135899854176109,0.135899854176109],[0.09713131456148082,0.09713131456148082,0.09713131456148082],[0.03156075228670956,0.03156075228670956,0.03156075228670956],[0.06182546829141567,0.06182546829141567,0.06182546829141567],[0.04333981200981633,0.04333981200981633,0.04333981200981633],[-0.009460696242321726,-0.009460696242321726,-0.009460696242321726],[0,0,0],[0,0,0],[0,0,0]]],\"fixedtz\":true,\"tzone\":\"Europe/Amsterdam\",\"css\":\"/* Dygraph styling */\\n\\n.dygraph-title {\\n  text-align: left;\\n  font-weight: normal;\\n  font-size: 70%;\\n}\\n\\n.dygraph-legend {\\n  color: white;\\n  background-color: #BABABA !important;\\n    padding-left:5px;\\n  border-color:#BABABA;\\n    border-style:solid;\\n  border-width:thin;\\n  transition:0s 4s;\\n  z-index: 20 !important;\\n  box-shadow: 2px 2px 5px rgba(0, 0, 0, .3);\\n  border-radius: 3px;\\n}\\n\\n.dygraph-legend:hover{\\n  transform: translate(-110%);\\n  transition: 0s;\\n}\\n\\n.dygraph-legend > span {\\n  color: black;\\n  padding-left:5px;\\n  margin-left:-5px;\\n  background-color: white !important;\\n  display: block;\\n}\\n\\n.dygraph-legend > span > span{\\n  display: inline;\\n}\\n\\n.highlight {\\n  border-left: 2px solid #BABABA;\\n  padding-left:3px !important;\\n\\n}\"},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://mcanigueral.github.io/flextools/reference/plot_load_duration_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot of the load duration curve — plot_load_duration_curve","title":"Plot of the load duration curve — plot_load_duration_curve","text":"HTML interactive plot showing graphical representation load duration curve. Load Duration Curve (LDC) represents percentage time specific value power used electrical grid specific time period. widely used power system planning grid reliability assessments. Also, comparison original scenario done original_df NULL.","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/plot_load_duration_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot of the load duration curve — plot_load_duration_curve","text":"","code":"plot_load_duration_curve(df, original_df = NULL)"},{"path":"https://mcanigueral.github.io/flextools/reference/plot_load_duration_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot of the load duration curve — plot_load_duration_curve","text":"df tibble, columns datetime, consumption, production original_df tibble columns df corresponding original scenario (e.g. without flexibility).","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/plot_load_duration_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot of the load duration curve — plot_load_duration_curve","text":"dygraphs plot","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/plot_load_duration_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot of the load duration curve — plot_load_duration_curve","text":"","code":"df <- dplyr::select(   energy_profiles,   datetime,   consumption = building ) head(df) #> # A tibble: 6 × 2 #>   datetime            consumption #>   <dttm>                    <dbl> #> 1 2023-01-01 00:00:00        2.61 #> 2 2023-01-01 00:15:00        2.42 #> 3 2023-01-01 00:30:00        2.23 #> 4 2023-01-01 00:45:00        2.04 #> 5 2023-01-01 01:00:00        1.85 #> 6 2023-01-01 01:15:00        1.78  plot_load_duration_curve(df)   # Build another random building profile building_variation <- rnorm(nrow(df), mean = 0, sd = 1) df2 <- dplyr::mutate(df, consumption = consumption + building_variation) plot_load_duration_curve(df2, original_df = df)"},{"path":"https://mcanigueral.github.io/flextools/reference/plot_net_power.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot net power interaction with the grid — plot_net_power","title":"Plot net power interaction with the grid — plot_net_power","text":"HTML interactive plot showing hourly energy cost. Also, comparison original scenario done original_df NULL.","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/plot_net_power.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot net power interaction with the grid — plot_net_power","text":"","code":"plot_net_power(   df,   original_df = NULL,   import_capacity = NULL,   export_capacity = NULL,   ... )"},{"path":"https://mcanigueral.github.io/flextools/reference/plot_net_power.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot net power interaction with the grid — plot_net_power","text":"df tibble, columns datetime, consumption, production original_df tibble columns df corresponding original scenario (e.g. without flexibility) import_capacity numeric, maximum power import grid (kW) export_capacity numeric, maximum power export grid (kW, positive). ... extra arguments pass dygraphs::dyOptions function","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/plot_net_power.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot net power interaction with the grid — plot_net_power","text":"dygraphs plot","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/plot_net_power.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot net power interaction with the grid — plot_net_power","text":"","code":"df <- dplyr::select(   energy_profiles,   datetime,   production = solar,   consumption = building ) df <- dplyr::slice_head(df, n = 300) head(df) #> # A tibble: 6 × 3 #>   datetime            production consumption #>   <dttm>                   <dbl>       <dbl> #> 1 2023-01-01 00:00:00          0        2.61 #> 2 2023-01-01 00:15:00          0        2.42 #> 3 2023-01-01 00:30:00          0        2.23 #> 4 2023-01-01 00:45:00          0        2.04 #> 5 2023-01-01 01:00:00          0        1.85 #> 6 2023-01-01 01:15:00          0        1.78  plot_net_power(df)  {\"x\":{\"attrs\":{\"ylabel\":\"Power demand (kW)\",\"labels\":[\"minute\",\"Production\",\"Consumption\",\"Net power\"],\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawAxis\":true},\"y\":{\"drawAxis\":true}},\"legend\":\"auto\",\"labelsDivWidth\":250,\"labelsShowZeroValues\":false,\"labelsSeparateLines\":false,\"hideOverlayOnMouseOut\":true,\"stackedGraph\":false,\"fillGraph\":true,\"fillAlpha\":0.15,\"stepPlot\":false,\"drawPoints\":false,\"pointSize\":1,\"drawGapEdgePoints\":false,\"connectSeparatedPoints\":false,\"strokeWidth\":2,\"strokeBorderColor\":\"white\",\"colorValue\":0.5,\"colorSaturation\":1,\"includeZero\":false,\"drawAxesAtZero\":false,\"logscale\":false,\"axisTickSize\":3,\"axisLineColor\":\"black\",\"axisLineWidth\":0.3,\"axisLabelColor\":\"black\",\"axisLabelFontSize\":14,\"axisLabelWidth\":60,\"drawGrid\":true,\"gridLineWidth\":0.3,\"rightGap\":5,\"digitsAfterDecimal\":2,\"labelsKMB\":false,\"labelsKMG2\":false,\"labelsUTC\":false,\"maxNumberWidth\":6,\"animatedZooms\":false,\"mobileDisableYTouch\":true,\"retainDateWindow\":true,\"disableZoom\":false,\"colors\":[\"orange\",\"navy\",\"brown\"],\"series\":{\"Production\":{\"axis\":\"y\"},\"Consumption\":{\"axis\":\"y\"},\"Net power\":{\"axis\":\"y\",\"fillGraph\":false}}},\"scale\":\"minute\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"2022-12-31T23:00:00.000Z\",\"2022-12-31T23:15:00.000Z\",\"2022-12-31T23:30:00.000Z\",\"2022-12-31T23:45:00.000Z\",\"2023-01-01T00:00:00.000Z\",\"2023-01-01T00:15:00.000Z\",\"2023-01-01T00:30:00.000Z\",\"2023-01-01T00:45:00.000Z\",\"2023-01-01T01:00:00.000Z\",\"2023-01-01T01:15:00.000Z\",\"2023-01-01T01:30:00.000Z\",\"2023-01-01T01:45:00.000Z\",\"2023-01-01T02:00:00.000Z\",\"2023-01-01T02:15:00.000Z\",\"2023-01-01T02:30:00.000Z\",\"2023-01-01T02:45:00.000Z\",\"2023-01-01T03:00:00.000Z\",\"2023-01-01T03:15:00.000Z\",\"2023-01-01T03:30:00.000Z\",\"2023-01-01T03:45:00.000Z\",\"2023-01-01T04:00:00.000Z\",\"2023-01-01T04:15:00.000Z\",\"2023-01-01T04:30:00.000Z\",\"2023-01-01T04:45:00.000Z\",\"2023-01-01T05:00:00.000Z\",\"2023-01-01T05:15:00.000Z\",\"2023-01-01T05:30:00.000Z\",\"2023-01-01T05:45:00.000Z\",\"2023-01-01T06:00:00.000Z\",\"2023-01-01T06:15:00.000Z\",\"2023-01-01T06:30:00.000Z\",\"2023-01-01T06:45:00.000Z\",\"2023-01-01T07:00:00.000Z\",\"2023-01-01T07:15:00.000Z\",\"2023-01-01T07:30:00.000Z\",\"2023-01-01T07:45:00.000Z\",\"2023-01-01T08:00:00.000Z\",\"2023-01-01T08:15:00.000Z\",\"2023-01-01T08:30:00.000Z\",\"2023-01-01T08:45:00.000Z\",\"2023-01-01T09:00:00.000Z\",\"2023-01-01T09:15:00.000Z\",\"2023-01-01T09:30:00.000Z\",\"2023-01-01T09:45:00.000Z\",\"2023-01-01T10:00:00.000Z\",\"2023-01-01T10:15:00.000Z\",\"2023-01-01T10:30:00.000Z\",\"2023-01-01T10:45:00.000Z\",\"2023-01-01T11:00:00.000Z\",\"2023-01-01T11:15:00.000Z\",\"2023-01-01T11:30:00.000Z\",\"2023-01-01T11:45:00.000Z\",\"2023-01-01T12:00:00.000Z\",\"2023-01-01T12:15:00.000Z\",\"2023-01-01T12:30:00.000Z\",\"2023-01-01T12:45:00.000Z\",\"2023-01-01T13:00:00.000Z\",\"2023-01-01T13:15:00.000Z\",\"2023-01-01T13:30:00.000Z\",\"2023-01-01T13:45:00.000Z\",\"2023-01-01T14:00:00.000Z\",\"2023-01-01T14:15:00.000Z\",\"2023-01-01T14:30:00.000Z\",\"2023-01-01T14:45:00.000Z\",\"2023-01-01T15:00:00.000Z\",\"2023-01-01T15:15:00.000Z\",\"2023-01-01T15:30:00.000Z\",\"2023-01-01T15:45:00.000Z\",\"2023-01-01T16:00:00.000Z\",\"2023-01-01T16:15:00.000Z\",\"2023-01-01T16:30:00.000Z\",\"2023-01-01T16:45:00.000Z\",\"2023-01-01T17:00:00.000Z\",\"2023-01-01T17:15:00.000Z\",\"2023-01-01T17:30:00.000Z\",\"2023-01-01T17:45:00.000Z\",\"2023-01-01T18:00:00.000Z\",\"2023-01-01T18:15:00.000Z\",\"2023-01-01T18:30:00.000Z\",\"2023-01-01T18:45:00.000Z\",\"2023-01-01T19:00:00.000Z\",\"2023-01-01T19:15:00.000Z\",\"2023-01-01T19:30:00.000Z\",\"2023-01-01T19:45:00.000Z\",\"2023-01-01T20:00:00.000Z\",\"2023-01-01T20:15:00.000Z\",\"2023-01-01T20:30:00.000Z\",\"2023-01-01T20:45:00.000Z\",\"2023-01-01T21:00:00.000Z\",\"2023-01-01T21:15:00.000Z\",\"2023-01-01T21:30:00.000Z\",\"2023-01-01T21:45:00.000Z\",\"2023-01-01T22:00:00.000Z\",\"2023-01-01T22:15:00.000Z\",\"2023-01-01T22:30:00.000Z\",\"2023-01-01T22:45:00.000Z\",\"2023-01-01T23:00:00.000Z\",\"2023-01-01T23:15:00.000Z\",\"2023-01-01T23:30:00.000Z\",\"2023-01-01T23:45:00.000Z\",\"2023-01-02T00:00:00.000Z\",\"2023-01-02T00:15:00.000Z\",\"2023-01-02T00:30:00.000Z\",\"2023-01-02T00:45:00.000Z\",\"2023-01-02T01:00:00.000Z\",\"2023-01-02T01:15:00.000Z\",\"2023-01-02T01:30:00.000Z\",\"2023-01-02T01:45:00.000Z\",\"2023-01-02T02:00:00.000Z\",\"2023-01-02T02:15:00.000Z\",\"2023-01-02T02:30:00.000Z\",\"2023-01-02T02:45:00.000Z\",\"2023-01-02T03:00:00.000Z\",\"2023-01-02T03:15:00.000Z\",\"2023-01-02T03:30:00.000Z\",\"2023-01-02T03:45:00.000Z\",\"2023-01-02T04:00:00.000Z\",\"2023-01-02T04:15:00.000Z\",\"2023-01-02T04:30:00.000Z\",\"2023-01-02T04:45:00.000Z\",\"2023-01-02T05:00:00.000Z\",\"2023-01-02T05:15:00.000Z\",\"2023-01-02T05:30:00.000Z\",\"2023-01-02T05:45:00.000Z\",\"2023-01-02T06:00:00.000Z\",\"2023-01-02T06:15:00.000Z\",\"2023-01-02T06:30:00.000Z\",\"2023-01-02T06:45:00.000Z\",\"2023-01-02T07:00:00.000Z\",\"2023-01-02T07:15:00.000Z\",\"2023-01-02T07:30:00.000Z\",\"2023-01-02T07:45:00.000Z\",\"2023-01-02T08:00:00.000Z\",\"2023-01-02T08:15:00.000Z\",\"2023-01-02T08:30:00.000Z\",\"2023-01-02T08:45:00.000Z\",\"2023-01-02T09:00:00.000Z\",\"2023-01-02T09:15:00.000Z\",\"2023-01-02T09:30:00.000Z\",\"2023-01-02T09:45:00.000Z\",\"2023-01-02T10:00:00.000Z\",\"2023-01-02T10:15:00.000Z\",\"2023-01-02T10:30:00.000Z\",\"2023-01-02T10:45:00.000Z\",\"2023-01-02T11:00:00.000Z\",\"2023-01-02T11:15:00.000Z\",\"2023-01-02T11:30:00.000Z\",\"2023-01-02T11:45:00.000Z\",\"2023-01-02T12:00:00.000Z\",\"2023-01-02T12:15:00.000Z\",\"2023-01-02T12:30:00.000Z\",\"2023-01-02T12:45:00.000Z\",\"2023-01-02T13:00:00.000Z\",\"2023-01-02T13:15:00.000Z\",\"2023-01-02T13:30:00.000Z\",\"2023-01-02T13:45:00.000Z\",\"2023-01-02T14:00:00.000Z\",\"2023-01-02T14:15:00.000Z\",\"2023-01-02T14:30:00.000Z\",\"2023-01-02T14:45:00.000Z\",\"2023-01-02T15:00:00.000Z\",\"2023-01-02T15:15:00.000Z\",\"2023-01-02T15:30:00.000Z\",\"2023-01-02T15:45:00.000Z\",\"2023-01-02T16:00:00.000Z\",\"2023-01-02T16:15:00.000Z\",\"2023-01-02T16:30:00.000Z\",\"2023-01-02T16:45:00.000Z\",\"2023-01-02T17:00:00.000Z\",\"2023-01-02T17:15:00.000Z\",\"2023-01-02T17:30:00.000Z\",\"2023-01-02T17:45:00.000Z\",\"2023-01-02T18:00:00.000Z\",\"2023-01-02T18:15:00.000Z\",\"2023-01-02T18:30:00.000Z\",\"2023-01-02T18:45:00.000Z\",\"2023-01-02T19:00:00.000Z\",\"2023-01-02T19:15:00.000Z\",\"2023-01-02T19:30:00.000Z\",\"2023-01-02T19:45:00.000Z\",\"2023-01-02T20:00:00.000Z\",\"2023-01-02T20:15:00.000Z\",\"2023-01-02T20:30:00.000Z\",\"2023-01-02T20:45:00.000Z\",\"2023-01-02T21:00:00.000Z\",\"2023-01-02T21:15:00.000Z\",\"2023-01-02T21:30:00.000Z\",\"2023-01-02T21:45:00.000Z\",\"2023-01-02T22:00:00.000Z\",\"2023-01-02T22:15:00.000Z\",\"2023-01-02T22:30:00.000Z\",\"2023-01-02T22:45:00.000Z\",\"2023-01-02T23:00:00.000Z\",\"2023-01-02T23:15:00.000Z\",\"2023-01-02T23:30:00.000Z\",\"2023-01-02T23:45:00.000Z\",\"2023-01-03T00:00:00.000Z\",\"2023-01-03T00:15:00.000Z\",\"2023-01-03T00:30:00.000Z\",\"2023-01-03T00:45:00.000Z\",\"2023-01-03T01:00:00.000Z\",\"2023-01-03T01:15:00.000Z\",\"2023-01-03T01:30:00.000Z\",\"2023-01-03T01:45:00.000Z\",\"2023-01-03T02:00:00.000Z\",\"2023-01-03T02:15:00.000Z\",\"2023-01-03T02:30:00.000Z\",\"2023-01-03T02:45:00.000Z\",\"2023-01-03T03:00:00.000Z\",\"2023-01-03T03:15:00.000Z\",\"2023-01-03T03:30:00.000Z\",\"2023-01-03T03:45:00.000Z\",\"2023-01-03T04:00:00.000Z\",\"2023-01-03T04:15:00.000Z\",\"2023-01-03T04:30:00.000Z\",\"2023-01-03T04:45:00.000Z\",\"2023-01-03T05:00:00.000Z\",\"2023-01-03T05:15:00.000Z\",\"2023-01-03T05:30:00.000Z\",\"2023-01-03T05:45:00.000Z\",\"2023-01-03T06:00:00.000Z\",\"2023-01-03T06:15:00.000Z\",\"2023-01-03T06:30:00.000Z\",\"2023-01-03T06:45:00.000Z\",\"2023-01-03T07:00:00.000Z\",\"2023-01-03T07:15:00.000Z\",\"2023-01-03T07:30:00.000Z\",\"2023-01-03T07:45:00.000Z\",\"2023-01-03T08:00:00.000Z\",\"2023-01-03T08:15:00.000Z\",\"2023-01-03T08:30:00.000Z\",\"2023-01-03T08:45:00.000Z\",\"2023-01-03T09:00:00.000Z\",\"2023-01-03T09:15:00.000Z\",\"2023-01-03T09:30:00.000Z\",\"2023-01-03T09:45:00.000Z\",\"2023-01-03T10:00:00.000Z\",\"2023-01-03T10:15:00.000Z\",\"2023-01-03T10:30:00.000Z\",\"2023-01-03T10:45:00.000Z\",\"2023-01-03T11:00:00.000Z\",\"2023-01-03T11:15:00.000Z\",\"2023-01-03T11:30:00.000Z\",\"2023-01-03T11:45:00.000Z\",\"2023-01-03T12:00:00.000Z\",\"2023-01-03T12:15:00.000Z\",\"2023-01-03T12:30:00.000Z\",\"2023-01-03T12:45:00.000Z\",\"2023-01-03T13:00:00.000Z\",\"2023-01-03T13:15:00.000Z\",\"2023-01-03T13:30:00.000Z\",\"2023-01-03T13:45:00.000Z\",\"2023-01-03T14:00:00.000Z\",\"2023-01-03T14:15:00.000Z\",\"2023-01-03T14:30:00.000Z\",\"2023-01-03T14:45:00.000Z\",\"2023-01-03T15:00:00.000Z\",\"2023-01-03T15:15:00.000Z\",\"2023-01-03T15:30:00.000Z\",\"2023-01-03T15:45:00.000Z\",\"2023-01-03T16:00:00.000Z\",\"2023-01-03T16:15:00.000Z\",\"2023-01-03T16:30:00.000Z\",\"2023-01-03T16:45:00.000Z\",\"2023-01-03T17:00:00.000Z\",\"2023-01-03T17:15:00.000Z\",\"2023-01-03T17:30:00.000Z\",\"2023-01-03T17:45:00.000Z\",\"2023-01-03T18:00:00.000Z\",\"2023-01-03T18:15:00.000Z\",\"2023-01-03T18:30:00.000Z\",\"2023-01-03T18:45:00.000Z\",\"2023-01-03T19:00:00.000Z\",\"2023-01-03T19:15:00.000Z\",\"2023-01-03T19:30:00.000Z\",\"2023-01-03T19:45:00.000Z\",\"2023-01-03T20:00:00.000Z\",\"2023-01-03T20:15:00.000Z\",\"2023-01-03T20:30:00.000Z\",\"2023-01-03T20:45:00.000Z\",\"2023-01-03T21:00:00.000Z\",\"2023-01-03T21:15:00.000Z\",\"2023-01-03T21:30:00.000Z\",\"2023-01-03T21:45:00.000Z\",\"2023-01-03T22:00:00.000Z\",\"2023-01-03T22:15:00.000Z\",\"2023-01-03T22:30:00.000Z\",\"2023-01-03T22:45:00.000Z\",\"2023-01-03T23:00:00.000Z\",\"2023-01-03T23:15:00.000Z\",\"2023-01-03T23:30:00.000Z\",\"2023-01-03T23:45:00.000Z\",\"2023-01-04T00:00:00.000Z\",\"2023-01-04T00:15:00.000Z\",\"2023-01-04T00:30:00.000Z\",\"2023-01-04T00:45:00.000Z\",\"2023-01-04T01:00:00.000Z\",\"2023-01-04T01:15:00.000Z\",\"2023-01-04T01:30:00.000Z\",\"2023-01-04T01:45:00.000Z\"],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.1122994778905532,0.2245989557811064,0.3368984336716597,0.4491979115622127,0.5765987862351142,0.7039996609080155,0.831400535580917,0.9588014102538184,1.035448919237233,1.112096428220649,1.188743937204064,1.265391446187479,1.272065629940237,1.278739813692994,1.285413997445753,1.29208818119851,1.209949255203332,1.127810329208154,1.045671403212976,0.9635324772177991,0.8224875433541321,0.6814426094904662,0.5403976756267997,0.3993527417631333,0.2995145563223499,0.1996763708815667,0.09983818544078334,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.371692252312033e-17,0.1266827662944401,0.2533655325888802,0.3800482988833203,0.5067310651777603,0.4836037512243739,0.4604764372709875,0.437349123317601,0.4142218093642145,0.408709271517791,0.4031967336713674,0.3976841958249437,0.39217165797852,0.305512873365968,0.2188540887534159,0.1321953041408637,0.04553651952831157,0.0372360315066852,0.02893554348505884,0.02063505546343248,0.0123345674418061,0.009250925581354576,0.00616728372090305,0.003083641860451525,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.929230630780084e-18,0.0467404071039673,0.09348081420793464,0.1402212213119019,0.1869616284158693,0.2930515809161982,0.3991415334165271,0.5052314859168558,0.6113214384171849,0.6310694188248709,0.6508173992325572,0.6705653796402432,0.6903133600479293,0.8085900341474399,0.9268667082469507,1.045143382346462,1.163420056445972,1.010209521817784,0.8569989871895964,0.7037884525614088,0.5505779179332217,0.5245148079620082,0.4984516979907946,0.4723885880195811,0.4463254780483674,0.3379122337353696,0.2294989894223717,0.1210857451093739,0.01267250079637613,0.009504375597282096,0.006336250398188067,0.003168125199094033,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2.613080790904565,2.423432028220574,2.233783265536572,2.044134502852574,1.854485740168574,1.779168332616038,1.703850925063505,1.628533517510969,1.553216109958433,1.548947625540607,1.544679141122783,1.540410656704957,1.536142172287131,1.495676940006142,1.455211707725154,1.414746475444167,1.374281243163179,1.38256210293376,1.390842962704343,1.399123822474924,1.407404682245507,1.421362626291797,1.435320570338087,1.449278514384376,1.463236458430668,1.540602738503758,1.617969018576851,1.695335298649942,1.772701578723034,1.961176508192129,2.149651437661226,2.33812636713033,2.526601296599422,2.699880421541043,2.873159546482687,3.046438671424331,3.219717796365975,3.25800610159387,3.296294406821765,3.33458271204966,3.372871017277556,3.265774743234293,3.158678469191053,3.051582195147813,2.94448592110455,2.92604606841955,2.907606215734551,2.889166363049529,2.87072651036453,3.101181984082933,3.331637457801361,3.562092931519765,3.792548405238169,3.694778769647886,3.597009134057579,3.499239498467274,3.40146986287699,3.445221828159703,3.488973793442417,3.53272575872513,3.576477724007843,4.049532509613378,4.522587295218913,4.995642080824448,5.468696866429983,5.480243116780207,5.491789367130431,5.503335617480654,5.514881867830877,5.320601799553524,5.126321731276192,4.932041662998862,4.737761594721508,4.750310938909932,4.762860283098332,4.775409627286732,4.787958971475132,4.67706374630003,4.566168521124905,4.455273295949802,4.344378070774701,4.200466118627692,4.056554166480707,3.912642214333699,3.768730262186713,3.550525338747458,3.332320415308202,3.114115491868946,2.89591056842969,2.73652536026809,2.577140152106466,2.417754943944865,2.258369735783249,2.105387254248373,1.952404772713497,1.799422291178622,1.646439809643748,1.632802001928795,1.619164194213841,1.605526386498887,1.591888578783936,1.506241438940262,1.420594299096588,1.334947159252915,1.249300019409241,1.240336202131805,1.231372384854372,1.222408567576939,1.213444750299506,1.223987906811534,1.234531063323565,1.245074219835593,1.255617376347621,1.285390055161956,1.315162733976291,1.344935412790625,1.37470809160496,1.579680713348954,1.784653335092946,1.989625956836937,2.194598578580931,2.327711265150836,2.460823951720715,2.593936638290617,2.727049324860519,2.93981193066704,3.152574536473563,3.365337142280085,3.578099748086607,3.539854127702903,3.501608507319177,3.463362886935451,3.425117266551748,3.521414275017881,3.617711283484037,3.714008291950195,3.810305300416328,4.019034188448012,4.227763076479699,4.436491964511383,4.645220852543045,4.355540157527312,4.065859462511556,3.776178767495823,3.486498072480067,3.591310707359787,3.696123342239507,3.800935977119202,3.905748611998923,3.737570325936592,3.569392039874238,3.401213753811907,3.233035467749577,3.399613072155228,3.566190676560879,3.73276828096653,3.899345885372181,4.565891069637761,5.232436253903341,5.898981438168921,6.5655266224345,6.64007570279183,6.714624783149159,6.789173863506467,6.863722943863796,6.749583670531143,6.63544439719849,6.521305123865814,6.40716585053316,6.051537071262022,5.695908291990859,5.340279512719698,4.984650733448559,4.902973284113456,4.821295834778351,4.73961838544327,4.657940936108167,4.508394584529642,4.358848232951116,4.209301881372591,4.059755529794066,3.854590826251268,3.649426122708471,3.444261419165696,3.239096715622897,2.969883403390625,2.700670091158352,2.431456778926079,2.162243466693811,2.002708861577573,1.843174256461337,1.683639651345099,1.524105046228861,1.538852659892451,1.553600273556038,1.568347887219626,1.583095500883213,1.541392408121056,1.4996893153589,1.457986222596741,1.416283129834584,1.352255863567198,1.28822859729981,1.224201331032424,1.160174064765039,1.160046010232504,1.15991795569997,1.159789901167436,1.159661846634899,1.221618897959641,1.283575949284381,1.345533000609121,1.407490051933861,1.557377882265814,1.707265712597766,1.857153542929716,2.007041373261669,2.17972291038481,2.352404447507939,2.52508598463108,2.697767521754221,2.675379320982723,2.652991120211247,2.630602919439748,2.608214718668249,2.782817073779406,2.957419428890562,3.132021784001743,3.306624139112898,3.237496033966218,3.168367928819515,3.099239823672834,3.030111718526153,3.124509251426356,3.218906784326581,3.313304317226784,3.40770185012701,3.491385487138489,3.575069124149947,3.658752761161427,3.742436398172907,3.660609551883189,3.578782705593471,3.496955859303753,3.415129013014035,3.357162994619942,3.299196976225873,3.241230957831804,3.183264939437734,3.318618580326988,3.453972221216241,3.589325862105495,3.724679502994748,4.239501408628705,4.754323314262684,5.26914521989664,5.783967125530597,5.751078453091266,5.718189780651914,5.68530110821256,5.652412435773205,5.758889779575882,5.865367123378533,5.971844467181209,6.078321810983862,5.706259366704077,5.334196922424292,4.96213447814453,4.590072033864745,4.576220801928894,4.562369569993043,4.548518338057215,4.534667106121363,4.356607278631765,4.178547451142167,4.000487623652569,3.822427796162947,3.61246104765011,3.402494299137251,3.192527550624414,2.982560802111554,2.711469356735459,2.440377911359339,2.169286465983224,1.89819502060711,1.822898955476665,1.747602890346218,1.672306825215771,1.597010760085327,1.555542433966147,1.514074107846971,1.472605781727794,1.431137455608616,1.413039081677036,1.394940707745454,1.376842333813873,1.358743959882294,1.318577521510552,1.278411083138812,1.238244644767073],[2.613080790904565,2.423432028220574,2.233783265536572,2.044134502852574,1.854485740168574,1.779168332616038,1.703850925063505,1.628533517510969,1.553216109958433,1.548947625540607,1.544679141122783,1.540410656704957,1.536142172287131,1.495676940006142,1.455211707725154,1.414746475444167,1.374281243163179,1.38256210293376,1.390842962704343,1.399123822474924,1.407404682245507,1.421362626291797,1.435320570338087,1.449278514384376,1.463236458430668,1.540602738503758,1.617969018576851,1.695335298649942,1.772701578723034,1.848877030301576,1.92505248188012,2.00122793345867,2.077403385037209,2.123281635305929,2.169159885574671,2.215038135843414,2.260916386112157,2.222557182356637,2.184197978601117,2.145838774845597,2.107479571090078,1.993709113294056,1.879938655498059,1.76616819770206,1.65239773990604,1.716096813216218,1.779795886526397,1.843494959836553,1.907194033146731,2.278694440728801,2.650194848310895,3.021695255892965,3.393195663475036,3.395264213325536,3.397332763176013,3.399401313026491,3.40146986287699,3.445221828159703,3.488973793442417,3.53272575872513,3.576477724007843,4.049532509613378,4.522587295218913,4.995642080824448,5.468696866429983,5.480243116780207,5.491789367130431,5.503335617480654,5.514881867830877,5.320601799553524,5.126321731276192,4.932041662998862,4.737761594721508,4.750310938909932,4.762860283098332,4.775409627286732,4.787958971475132,4.67706374630003,4.566168521124905,4.455273295949802,4.344378070774701,4.200466118627692,4.056554166480707,3.912642214333699,3.768730262186713,3.550525338747458,3.332320415308202,3.114115491868946,2.89591056842969,2.73652536026809,2.577140152106466,2.417754943944865,2.258369735783249,2.105387254248373,1.952404772713497,1.799422291178622,1.646439809643748,1.632802001928795,1.619164194213841,1.605526386498887,1.591888578783936,1.506241438940262,1.420594299096588,1.334947159252915,1.249300019409241,1.240336202131805,1.231372384854372,1.222408567576939,1.213444750299506,1.223987906811534,1.234531063323565,1.245074219835593,1.255617376347621,1.285390055161956,1.315162733976291,1.344935412790625,1.37470809160496,1.579680713348954,1.784653335092946,1.989625956836937,2.194598578580931,2.327711265150836,2.460823951720715,2.593936638290617,2.727049324860519,2.93981193066704,3.152574536473563,3.365337142280085,3.578099748086607,3.413171361408463,3.248242974730297,3.083314588052131,2.918386201373988,3.037810523793507,3.15723484621305,3.276659168632594,3.396083491052113,3.610324916930221,3.824566342808331,4.038807768686439,4.253049194564525,4.050027284161344,3.84700537375814,3.643983463354959,3.440961552951756,3.554074675853102,3.667187798754448,3.78030092165577,3.893414044557117,3.728319400355237,3.563224756153335,3.398130111951456,3.233035467749577,3.399613072155228,3.566190676560879,3.73276828096653,3.899345885372181,4.565891069637761,5.232436253903341,5.898981438168921,6.5655266224345,6.64007570279183,6.714624783149159,6.789173863506467,6.863722943863796,6.749583670531143,6.63544439719849,6.521305123865814,6.40716585053316,6.051537071262022,5.695908291990859,5.340279512719698,4.984650733448559,4.902973284113456,4.821295834778351,4.73961838544327,4.657940936108167,4.508394584529642,4.358848232951116,4.209301881372591,4.059755529794066,3.854590826251268,3.649426122708471,3.444261419165696,3.239096715622897,2.969883403390625,2.700670091158352,2.431456778926079,2.162243466693811,2.002708861577573,1.843174256461337,1.683639651345099,1.524105046228861,1.538852659892451,1.553600273556038,1.568347887219626,1.583095500883213,1.541392408121056,1.4996893153589,1.457986222596741,1.416283129834584,1.352255863567198,1.28822859729981,1.224201331032424,1.160174064765039,1.160046010232504,1.15991795569997,1.159789901167436,1.159661846634899,1.221618897959641,1.283575949284381,1.345533000609121,1.407490051933861,1.557377882265814,1.707265712597766,1.857153542929716,2.007041373261669,2.17972291038481,2.352404447507939,2.52508598463108,2.697767521754221,2.628638913878755,2.559510306003312,2.490381698127846,2.42125309025238,2.489765492863208,2.558277895474035,2.626790298084887,2.695302700695713,2.606426615141347,2.517550529586957,2.428674444032591,2.339798358478224,2.315919217278916,2.29204007607963,2.268160934880322,2.244281793681038,2.481175965320706,2.718070136960351,2.954964308600018,3.191858480239685,3.136094743921181,3.080331007602676,3.024567271284172,2.968803534965667,3.019250760884573,3.069697986803501,3.12014521272243,3.170592438641358,3.309114204729706,3.447635970818053,3.586157736906401,3.724679502994748,4.239501408628705,4.754323314262684,5.26914521989664,5.783967125530597,5.751078453091266,5.718189780651914,5.68530110821256,5.652412435773205,5.758889779575882,5.865367123378533,5.971844467181209,6.078321810983862,5.706259366704077,5.334196922424292,4.96213447814453,4.590072033864745,4.576220801928894,4.562369569993043,4.548518338057215,4.534667106121363,4.356607278631765,4.178547451142167,4.000487623652569,3.822427796162947,3.61246104765011,3.402494299137251,3.192527550624414,2.982560802111554,2.711469356735459,2.440377911359339,2.169286465983224,1.89819502060711,1.822898955476665,1.747602890346218,1.672306825215771,1.597010760085327,1.555542433966147,1.514074107846971,1.472605781727794,1.431137455608616,1.413039081677036,1.394940707745454,1.376842333813873,1.358743959882294,1.318577521510552,1.278411083138812,1.238244644767073]],\"fixedtz\":true,\"tzone\":\"Europe/Amsterdam\",\"css\":\"/* Dygraph styling */\\n\\n.dygraph-title {\\n  text-align: left;\\n  font-weight: normal;\\n  font-size: 70%;\\n}\\n\\n.dygraph-legend {\\n  color: white;\\n  background-color: #BABABA !important;\\n    padding-left:5px;\\n  border-color:#BABABA;\\n    border-style:solid;\\n  border-width:thin;\\n  transition:0s 4s;\\n  z-index: 20 !important;\\n  box-shadow: 2px 2px 5px rgba(0, 0, 0, .3);\\n  border-radius: 3px;\\n}\\n\\n.dygraph-legend:hover{\\n  transform: translate(-110%);\\n  transition: 0s;\\n}\\n\\n.dygraph-legend > span {\\n  color: black;\\n  padding-left:5px;\\n  margin-left:-5px;\\n  background-color: white !important;\\n  display: block;\\n}\\n\\n.dygraph-legend > span > span{\\n  display: inline;\\n}\\n\\n.highlight {\\n  border-left: 2px solid #BABABA;\\n  padding-left:3px !important;\\n\\n}\"},\"evals\":[],\"jsHooks\":[]} # Build another random building profile building_variation <- rnorm(nrow(df), mean = 0, sd = 1) df2 <- dplyr::mutate(df, consumption = consumption + building_variation) plot_net_power(df2, original_df = df)  {\"x\":{\"attrs\":{\"ylabel\":\"Net power (kW)\",\"labels\":[\"minute\",\"Original case\",\"Flexible case\"],\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawAxis\":true},\"y\":{\"drawAxis\":true}},\"legend\":\"auto\",\"labelsDivWidth\":250,\"labelsShowZeroValues\":false,\"labelsSeparateLines\":false,\"hideOverlayOnMouseOut\":true,\"stackedGraph\":false,\"fillGraph\":false,\"fillAlpha\":0.15,\"stepPlot\":false,\"drawPoints\":false,\"pointSize\":1,\"drawGapEdgePoints\":false,\"connectSeparatedPoints\":false,\"strokeWidth\":1,\"strokeBorderColor\":\"white\",\"colorValue\":0.5,\"colorSaturation\":1,\"includeZero\":false,\"drawAxesAtZero\":false,\"logscale\":false,\"axisTickSize\":3,\"axisLineColor\":\"black\",\"axisLineWidth\":0.3,\"axisLabelColor\":\"black\",\"axisLabelFontSize\":14,\"axisLabelWidth\":60,\"drawGrid\":true,\"gridLineWidth\":0.3,\"rightGap\":5,\"digitsAfterDecimal\":2,\"labelsKMB\":false,\"labelsKMG2\":false,\"labelsUTC\":false,\"maxNumberWidth\":6,\"animatedZooms\":false,\"mobileDisableYTouch\":true,\"retainDateWindow\":true,\"disableZoom\":false,\"colors\":[\"red\",\"darkgreen\"],\"customBars\":true,\"series\":{\"Original case\":{\"axis\":\"y\",\"strokePattern\":[7,3]},\"Flexible case\":{\"axis\":\"y\",\"strokeWidth\":2}}},\"scale\":\"minute\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"datafixedtz\":true,\"tzone\":\"Europe/Amsterdam\",\"css\":\"/* Dygraph styling */\\n\\n.dygraph-title {\\n  text-align: left;\\n  font-weight: normal;\\n  font-size: 70%;\\n}\\n\\n.dygraph-legend {\\n  color: white;\\n  background-color: #BABABA !important;\\n    padding-left:5px;\\n  border-color:#BABABA;\\n    border-style:solid;\\n  border-width:thin;\\n  transition:0s 4s;\\n  z-index: 20 !important;\\n  box-shadow: 2px 2px 5px rgba(0, 0, 0, .3);\\n  border-radius: 3px;\\n}\\n\\n.dygraph-legend:hover{\\n  transform: translate(-110%);\\n  transition: 0s;\\n}\\n\\n.dygraph-legend > span {\\n  color: black;\\n  padding-left:5px;\\n  margin-left:-5px;\\n  background-color: white !important;\\n  display: block;\\n}\\n\\n.dygraph-legend > span > span{\\n  display: inline;\\n}\\n\\n.highlight {\\n  border-left: 2px solid #BABABA;\\n  padding-left:3px !important;\\n\\n}\"},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://mcanigueral.github.io/flextools/reference/plot_smart_charging.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot smart charging results — plot_smart_charging","title":"Plot smart charging results — plot_smart_charging","text":"HTML interactive plot showing comparison smart charging setpoint actual EV demand smart charging program. Also, possible plot original EV demand.","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/plot_smart_charging.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot smart charging results — plot_smart_charging","text":"","code":"plot_smart_charging(smart_charging, sessions = NULL, ...)"},{"path":"https://mcanigueral.github.io/flextools/reference/plot_smart_charging.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot smart charging results — plot_smart_charging","text":"smart_charging SmartCharging object, returned function smart_charging() sessions tibble, sessions data set containig following variables: \"Session\", \"Timecycle\", \"Profile\", \"ConnectionStartDateTime\", \"ConnectionHours\", \"Power\" \"Energy\" ... extra arguments pass dygraphs::dyOptions function","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/plot_smart_charging.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot smart charging results — plot_smart_charging","text":"dygraphs plot","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/plot_smart_charging.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot smart charging results — plot_smart_charging","text":"","code":"library(dplyr) sessions <- evsim::california_ev_sessions_profiles %>%   slice_head(n = 50) %>%   evsim::adapt_charging_features(time_resolution = 15) sessions_demand <- evsim::get_demand(sessions, resolution = 15)  # Don't require any other variable than datetime, since we don't # care about local generation (just peak shaving objective) opt_data <- tibble(   datetime = sessions_demand$datetime,   production = 0 )  sc_results <- smart_charging(   sessions, opt_data,   opt_objective = \"grid\",   method = \"curtail\",   window_days = 1, window_start_hour = 6 )  # Plot of setpoint and final EV demand plot_smart_charging(sc_results)  {\"x\":{\"attrs\":{\"ylabel\":\"Power (kW)\",\"labels\":[\"minute\",\"Setpoint\",\"Flexible EVs\"],\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawAxis\":true},\"y\":{\"drawAxis\":true}},\"legend\":\"auto\",\"labelsDivWidth\":250,\"labelsShowZeroValues\":false,\"labelsSeparateLines\":false,\"hideOverlayOnMouseOut\":true,\"stackedGraph\":false,\"fillGraph\":false,\"fillAlpha\":0.15,\"stepPlot\":false,\"drawPoints\":false,\"pointSize\":1,\"drawGapEdgePoints\":false,\"connectSeparatedPoints\":false,\"strokeWidth\":2,\"strokeBorderColor\":\"white\",\"colorValue\":0.5,\"colorSaturation\":1,\"includeZero\":false,\"drawAxesAtZero\":false,\"logscale\":false,\"axisTickSize\":3,\"axisLineColor\":\"black\",\"axisLineWidth\":0.3,\"axisLabelColor\":\"black\",\"axisLabelFontSize\":14,\"axisLabelWidth\":60,\"drawGrid\":true,\"gridLineWidth\":0.3,\"rightGap\":5,\"digitsAfterDecimal\":2,\"labelsKMB\":false,\"labelsKMG2\":false,\"labelsUTC\":false,\"maxNumberWidth\":6,\"animatedZooms\":false,\"mobileDisableYTouch\":true,\"retainDateWindow\":true,\"disableZoom\":false,\"colors\":[\"red\",\"navy\"],\"series\":{\"Setpoint\":{\"axis\":\"y\",\"strokePattern\":[7,3]},\"Flexible EVs\":{\"axis\":\"y\"}}},\"scale\":\"minute\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"2018-10-08T07:00:00.000Z\",\"2018-10-08T07:15:00.000Z\",\"2018-10-08T07:30:00.000Z\",\"2018-10-08T07:45:00.000Z\",\"2018-10-08T08:00:00.000Z\",\"2018-10-08T08:15:00.000Z\",\"2018-10-08T08:30:00.000Z\",\"2018-10-08T08:45:00.000Z\",\"2018-10-08T09:00:00.000Z\",\"2018-10-08T09:15:00.000Z\",\"2018-10-08T09:30:00.000Z\",\"2018-10-08T09:45:00.000Z\",\"2018-10-08T10:00:00.000Z\",\"2018-10-08T10:15:00.000Z\",\"2018-10-08T10:30:00.000Z\",\"2018-10-08T10:45:00.000Z\",\"2018-10-08T11:00:00.000Z\",\"2018-10-08T11:15:00.000Z\",\"2018-10-08T11:30:00.000Z\",\"2018-10-08T11:45:00.000Z\",\"2018-10-08T12:00:00.000Z\",\"2018-10-08T12:15:00.000Z\",\"2018-10-08T12:30:00.000Z\",\"2018-10-08T12:45:00.000Z\",\"2018-10-08T13:00:00.000Z\",\"2018-10-08T13:15:00.000Z\",\"2018-10-08T13:30:00.000Z\",\"2018-10-08T13:45:00.000Z\",\"2018-10-08T14:00:00.000Z\",\"2018-10-08T14:15:00.000Z\",\"2018-10-08T14:30:00.000Z\",\"2018-10-08T14:45:00.000Z\",\"2018-10-08T15:00:00.000Z\",\"2018-10-08T15:15:00.000Z\",\"2018-10-08T15:30:00.000Z\",\"2018-10-08T15:45:00.000Z\",\"2018-10-08T16:00:00.000Z\",\"2018-10-08T16:15:00.000Z\",\"2018-10-08T16:30:00.000Z\",\"2018-10-08T16:45:00.000Z\",\"2018-10-08T17:00:00.000Z\",\"2018-10-08T17:15:00.000Z\",\"2018-10-08T17:30:00.000Z\",\"2018-10-08T17:45:00.000Z\",\"2018-10-08T18:00:00.000Z\",\"2018-10-08T18:15:00.000Z\",\"2018-10-08T18:30:00.000Z\",\"2018-10-08T18:45:00.000Z\",\"2018-10-08T19:00:00.000Z\",\"2018-10-08T19:15:00.000Z\",\"2018-10-08T19:30:00.000Z\",\"2018-10-08T19:45:00.000Z\",\"2018-10-08T20:00:00.000Z\",\"2018-10-08T20:15:00.000Z\",\"2018-10-08T20:30:00.000Z\",\"2018-10-08T20:45:00.000Z\",\"2018-10-08T21:00:00.000Z\",\"2018-10-08T21:15:00.000Z\",\"2018-10-08T21:30:00.000Z\",\"2018-10-08T21:45:00.000Z\",\"2018-10-08T22:00:00.000Z\",\"2018-10-08T22:15:00.000Z\",\"2018-10-08T22:30:00.000Z\",\"2018-10-08T22:45:00.000Z\",\"2018-10-08T23:00:00.000Z\",\"2018-10-08T23:15:00.000Z\",\"2018-10-08T23:30:00.000Z\",\"2018-10-08T23:45:00.000Z\",\"2018-10-09T00:00:00.000Z\",\"2018-10-09T00:15:00.000Z\",\"2018-10-09T00:30:00.000Z\",\"2018-10-09T00:45:00.000Z\",\"2018-10-09T01:00:00.000Z\",\"2018-10-09T01:15:00.000Z\",\"2018-10-09T01:30:00.000Z\",\"2018-10-09T01:45:00.000Z\",\"2018-10-09T02:00:00.000Z\",\"2018-10-09T02:15:00.000Z\",\"2018-10-09T02:30:00.000Z\",\"2018-10-09T02:45:00.000Z\",\"2018-10-09T03:00:00.000Z\",\"2018-10-09T03:15:00.000Z\",\"2018-10-09T03:30:00.000Z\",\"2018-10-09T03:45:00.000Z\",\"2018-10-09T04:00:00.000Z\",\"2018-10-09T04:15:00.000Z\",\"2018-10-09T04:30:00.000Z\",\"2018-10-09T04:45:00.000Z\",\"2018-10-09T05:00:00.000Z\",\"2018-10-09T05:15:00.000Z\",\"2018-10-09T05:30:00.000Z\",\"2018-10-09T05:45:00.000Z\",\"2018-10-09T06:00:00.000Z\",\"2018-10-09T06:15:00.000Z\",\"2018-10-09T06:30:00.000Z\",\"2018-10-09T06:45:00.000Z\",\"2018-10-09T07:00:00.000Z\",\"2018-10-09T07:15:00.000Z\",\"2018-10-09T07:30:00.000Z\",\"2018-10-09T07:45:00.000Z\",\"2018-10-09T08:00:00.000Z\",\"2018-10-09T08:15:00.000Z\",\"2018-10-09T08:30:00.000Z\",\"2018-10-09T08:45:00.000Z\",\"2018-10-09T09:00:00.000Z\",\"2018-10-09T09:15:00.000Z\",\"2018-10-09T09:30:00.000Z\",\"2018-10-09T09:45:00.000Z\",\"2018-10-09T10:00:00.000Z\",\"2018-10-09T10:15:00.000Z\",\"2018-10-09T10:30:00.000Z\",\"2018-10-09T10:45:00.000Z\",\"2018-10-09T11:00:00.000Z\",\"2018-10-09T11:15:00.000Z\",\"2018-10-09T11:30:00.000Z\",\"2018-10-09T11:45:00.000Z\",\"2018-10-09T12:00:00.000Z\",\"2018-10-09T12:15:00.000Z\",\"2018-10-09T12:30:00.000Z\",\"2018-10-09T12:45:00.000Z\",\"2018-10-09T13:00:00.000Z\",\"2018-10-09T13:15:00.000Z\",\"2018-10-09T13:30:00.000Z\",\"2018-10-09T13:45:00.000Z\",\"2018-10-09T14:00:00.000Z\",\"2018-10-09T14:15:00.000Z\",\"2018-10-09T14:30:00.000Z\",\"2018-10-09T14:45:00.000Z\",\"2018-10-09T15:00:00.000Z\",\"2018-10-09T15:15:00.000Z\",\"2018-10-09T15:30:00.000Z\",\"2018-10-09T15:45:00.000Z\",\"2018-10-09T16:00:00.000Z\",\"2018-10-09T16:15:00.000Z\",\"2018-10-09T16:30:00.000Z\",\"2018-10-09T16:45:00.000Z\",\"2018-10-09T17:00:00.000Z\",\"2018-10-09T17:15:00.000Z\",\"2018-10-09T17:30:00.000Z\",\"2018-10-09T17:45:00.000Z\",\"2018-10-09T18:00:00.000Z\",\"2018-10-09T18:15:00.000Z\",\"2018-10-09T18:30:00.000Z\",\"2018-10-09T18:45:00.000Z\",\"2018-10-09T19:00:00.000Z\",\"2018-10-09T19:15:00.000Z\",\"2018-10-09T19:30:00.000Z\",\"2018-10-09T19:45:00.000Z\",\"2018-10-09T20:00:00.000Z\",\"2018-10-09T20:15:00.000Z\",\"2018-10-09T20:30:00.000Z\",\"2018-10-09T20:45:00.000Z\",\"2018-10-09T21:00:00.000Z\",\"2018-10-09T21:15:00.000Z\",\"2018-10-09T21:30:00.000Z\",\"2018-10-09T21:45:00.000Z\",\"2018-10-09T22:00:00.000Z\",\"2018-10-09T22:15:00.000Z\",\"2018-10-09T22:30:00.000Z\",\"2018-10-09T22:45:00.000Z\",\"2018-10-09T23:00:00.000Z\",\"2018-10-09T23:15:00.000Z\",\"2018-10-09T23:30:00.000Z\",\"2018-10-09T23:45:00.000Z\",\"2018-10-10T00:00:00.000Z\",\"2018-10-10T00:15:00.000Z\",\"2018-10-10T00:30:00.000Z\",\"2018-10-10T00:45:00.000Z\",\"2018-10-10T01:00:00.000Z\",\"2018-10-10T01:15:00.000Z\",\"2018-10-10T01:30:00.000Z\",\"2018-10-10T01:45:00.000Z\",\"2018-10-10T02:00:00.000Z\",\"2018-10-10T02:15:00.000Z\",\"2018-10-10T02:30:00.000Z\",\"2018-10-10T02:45:00.000Z\",\"2018-10-10T03:00:00.000Z\",\"2018-10-10T03:15:00.000Z\",\"2018-10-10T03:30:00.000Z\",\"2018-10-10T03:45:00.000Z\",\"2018-10-10T04:00:00.000Z\",\"2018-10-10T04:15:00.000Z\",\"2018-10-10T04:30:00.000Z\",\"2018-10-10T04:45:00.000Z\",\"2018-10-10T05:00:00.000Z\",\"2018-10-10T05:15:00.000Z\",\"2018-10-10T05:30:00.000Z\",\"2018-10-10T05:45:00.000Z\",\"2018-10-10T06:00:00.000Z\",\"2018-10-10T06:15:00.000Z\",\"2018-10-10T06:30:00.000Z\",\"2018-10-10T06:45:00.000Z\",\"2018-10-10T07:00:00.000Z\"],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.66,3.17,7.74,9.93,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,15.79,15.79,15.79,15.79,15.78,15.78,15.78,15.77,15.77,15.77,15.76,15.76,15.76,28.01,28.01,30.27,20.51,17.27,12.98,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,13.36,21.26,28.8,31.98,32.73999999999999,44.59,53.1,80.16,82.54000000000001,82.18000000000001,79.68000000000001,79.68000000000001,79.68000000000001,75.17,64.06,58.12,56.44,48.84,42.57,35.67,30.37,30.37,24.27,21.66,21.54,15.54,13.44,9.040000000000001,7.96,7.96,7.44,5.86,5.86,5.86,5.86,5.86,5.86,4.56,4.52,4.52,2.63,0.76,0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.66,2.79,7.74,9.539999999999999,12.67,13.02548422876949,15.95837227722772,18.56440000000001,21.13519999999999,21.6448,22.9396,22.9104,22.91520000000001,22.92480000000001,22.9396,24.26559999999999,24.2704,24.27999999999999,25.7848,27.37839999999999,29.3304,29.34,29.35479999999999,29.32559999999999,29.33039999999999,29.34,32.52479999999999,32.49560000000001,32.5004,32.51,32.5248,32.49560000000002,32.5004,32.50999999999999,32.5248,32.4956,32.5004,32.51000000000001,32.52479999999999,44.7556,44.7604,47.03999999999999,37.29479999999999,30.4084,22.50679999999999,9.81,7.63,6.43,6.43,6.43,6.43,5.99,2.27,2.04,2.04,2.04,1.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.34,8.1,13.36,21.26,28.8,31.98,32.74,44.59,53.1,80.16,82.54000000000001,82.18000000000001,79.68000000000001,79.68000000000001,79.68000000000001,75.17,64.06,58.12,56.44,48.84,42.57,35.67,30.37,30.37,24.27,21.66,21.54,15.54,13.44,9.040000000000001,7.96,7.96,7.44,5.86,5.86,5.86,5.86,5.86,5.86,4.56,4.52,4.52,2.63,0.76,0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],\"fixedtz\":true,\"tzone\":\"America/Los_Angeles\",\"css\":\"/* Dygraph styling */\\n\\n.dygraph-title {\\n  text-align: left;\\n  font-weight: normal;\\n  font-size: 70%;\\n}\\n\\n.dygraph-legend {\\n  color: white;\\n  background-color: #BABABA !important;\\n    padding-left:5px;\\n  border-color:#BABABA;\\n    border-style:solid;\\n  border-width:thin;\\n  transition:0s 4s;\\n  z-index: 20 !important;\\n  box-shadow: 2px 2px 5px rgba(0, 0, 0, .3);\\n  border-radius: 3px;\\n}\\n\\n.dygraph-legend:hover{\\n  transform: translate(-110%);\\n  transition: 0s;\\n}\\n\\n.dygraph-legend > span {\\n  color: black;\\n  padding-left:5px;\\n  margin-left:-5px;\\n  background-color: white !important;\\n  display: block;\\n}\\n\\n.dygraph-legend > span > span{\\n  display: inline;\\n}\\n\\n.highlight {\\n  border-left: 2px solid #BABABA;\\n  padding-left:3px !important;\\n\\n}\"},\"evals\":[],\"jsHooks\":[]} # Plot with original demand plot_smart_charging(sc_results, sessions = sessions)  {\"x\":{\"attrs\":{\"ylabel\":\"Power (kW)\",\"labels\":[\"minute\",\"Setpoint\",\"Flexible EVs\",\"Original EVs\"],\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawAxis\":true},\"y\":{\"drawAxis\":true}},\"legend\":\"auto\",\"labelsDivWidth\":250,\"labelsShowZeroValues\":false,\"labelsSeparateLines\":false,\"hideOverlayOnMouseOut\":true,\"stackedGraph\":false,\"fillGraph\":false,\"fillAlpha\":0.15,\"stepPlot\":false,\"drawPoints\":false,\"pointSize\":1,\"drawGapEdgePoints\":false,\"connectSeparatedPoints\":false,\"strokeWidth\":2,\"strokeBorderColor\":\"white\",\"colorValue\":0.5,\"colorSaturation\":1,\"includeZero\":false,\"drawAxesAtZero\":false,\"logscale\":false,\"axisTickSize\":3,\"axisLineColor\":\"black\",\"axisLineWidth\":0.3,\"axisLabelColor\":\"black\",\"axisLabelFontSize\":14,\"axisLabelWidth\":60,\"drawGrid\":true,\"gridLineWidth\":0.3,\"rightGap\":5,\"digitsAfterDecimal\":2,\"labelsKMB\":false,\"labelsKMG2\":false,\"labelsUTC\":false,\"maxNumberWidth\":6,\"animatedZooms\":false,\"mobileDisableYTouch\":true,\"retainDateWindow\":true,\"disableZoom\":false,\"colors\":[\"red\",\"navy\",\"gray\"],\"series\":{\"Setpoint\":{\"axis\":\"y\",\"strokePattern\":[7,3]},\"Flexible EVs\":{\"axis\":\"y\"},\"Original EVs\":{\"axis\":\"y\",\"strokePattern\":[7,3]}}},\"scale\":\"minute\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"2018-10-08T07:00:00.000Z\",\"2018-10-08T07:15:00.000Z\",\"2018-10-08T07:30:00.000Z\",\"2018-10-08T07:45:00.000Z\",\"2018-10-08T08:00:00.000Z\",\"2018-10-08T08:15:00.000Z\",\"2018-10-08T08:30:00.000Z\",\"2018-10-08T08:45:00.000Z\",\"2018-10-08T09:00:00.000Z\",\"2018-10-08T09:15:00.000Z\",\"2018-10-08T09:30:00.000Z\",\"2018-10-08T09:45:00.000Z\",\"2018-10-08T10:00:00.000Z\",\"2018-10-08T10:15:00.000Z\",\"2018-10-08T10:30:00.000Z\",\"2018-10-08T10:45:00.000Z\",\"2018-10-08T11:00:00.000Z\",\"2018-10-08T11:15:00.000Z\",\"2018-10-08T11:30:00.000Z\",\"2018-10-08T11:45:00.000Z\",\"2018-10-08T12:00:00.000Z\",\"2018-10-08T12:15:00.000Z\",\"2018-10-08T12:30:00.000Z\",\"2018-10-08T12:45:00.000Z\",\"2018-10-08T13:00:00.000Z\",\"2018-10-08T13:15:00.000Z\",\"2018-10-08T13:30:00.000Z\",\"2018-10-08T13:45:00.000Z\",\"2018-10-08T14:00:00.000Z\",\"2018-10-08T14:15:00.000Z\",\"2018-10-08T14:30:00.000Z\",\"2018-10-08T14:45:00.000Z\",\"2018-10-08T15:00:00.000Z\",\"2018-10-08T15:15:00.000Z\",\"2018-10-08T15:30:00.000Z\",\"2018-10-08T15:45:00.000Z\",\"2018-10-08T16:00:00.000Z\",\"2018-10-08T16:15:00.000Z\",\"2018-10-08T16:30:00.000Z\",\"2018-10-08T16:45:00.000Z\",\"2018-10-08T17:00:00.000Z\",\"2018-10-08T17:15:00.000Z\",\"2018-10-08T17:30:00.000Z\",\"2018-10-08T17:45:00.000Z\",\"2018-10-08T18:00:00.000Z\",\"2018-10-08T18:15:00.000Z\",\"2018-10-08T18:30:00.000Z\",\"2018-10-08T18:45:00.000Z\",\"2018-10-08T19:00:00.000Z\",\"2018-10-08T19:15:00.000Z\",\"2018-10-08T19:30:00.000Z\",\"2018-10-08T19:45:00.000Z\",\"2018-10-08T20:00:00.000Z\",\"2018-10-08T20:15:00.000Z\",\"2018-10-08T20:30:00.000Z\",\"2018-10-08T20:45:00.000Z\",\"2018-10-08T21:00:00.000Z\",\"2018-10-08T21:15:00.000Z\",\"2018-10-08T21:30:00.000Z\",\"2018-10-08T21:45:00.000Z\",\"2018-10-08T22:00:00.000Z\",\"2018-10-08T22:15:00.000Z\",\"2018-10-08T22:30:00.000Z\",\"2018-10-08T22:45:00.000Z\",\"2018-10-08T23:00:00.000Z\",\"2018-10-08T23:15:00.000Z\",\"2018-10-08T23:30:00.000Z\",\"2018-10-08T23:45:00.000Z\",\"2018-10-09T00:00:00.000Z\",\"2018-10-09T00:15:00.000Z\",\"2018-10-09T00:30:00.000Z\",\"2018-10-09T00:45:00.000Z\",\"2018-10-09T01:00:00.000Z\",\"2018-10-09T01:15:00.000Z\",\"2018-10-09T01:30:00.000Z\",\"2018-10-09T01:45:00.000Z\",\"2018-10-09T02:00:00.000Z\",\"2018-10-09T02:15:00.000Z\",\"2018-10-09T02:30:00.000Z\",\"2018-10-09T02:45:00.000Z\",\"2018-10-09T03:00:00.000Z\",\"2018-10-09T03:15:00.000Z\",\"2018-10-09T03:30:00.000Z\",\"2018-10-09T03:45:00.000Z\",\"2018-10-09T04:00:00.000Z\",\"2018-10-09T04:15:00.000Z\",\"2018-10-09T04:30:00.000Z\",\"2018-10-09T04:45:00.000Z\",\"2018-10-09T05:00:00.000Z\",\"2018-10-09T05:15:00.000Z\",\"2018-10-09T05:30:00.000Z\",\"2018-10-09T05:45:00.000Z\",\"2018-10-09T06:00:00.000Z\",\"2018-10-09T06:15:00.000Z\",\"2018-10-09T06:30:00.000Z\",\"2018-10-09T06:45:00.000Z\",\"2018-10-09T07:00:00.000Z\",\"2018-10-09T07:15:00.000Z\",\"2018-10-09T07:30:00.000Z\",\"2018-10-09T07:45:00.000Z\",\"2018-10-09T08:00:00.000Z\",\"2018-10-09T08:15:00.000Z\",\"2018-10-09T08:30:00.000Z\",\"2018-10-09T08:45:00.000Z\",\"2018-10-09T09:00:00.000Z\",\"2018-10-09T09:15:00.000Z\",\"2018-10-09T09:30:00.000Z\",\"2018-10-09T09:45:00.000Z\",\"2018-10-09T10:00:00.000Z\",\"2018-10-09T10:15:00.000Z\",\"2018-10-09T10:30:00.000Z\",\"2018-10-09T10:45:00.000Z\",\"2018-10-09T11:00:00.000Z\",\"2018-10-09T11:15:00.000Z\",\"2018-10-09T11:30:00.000Z\",\"2018-10-09T11:45:00.000Z\",\"2018-10-09T12:00:00.000Z\",\"2018-10-09T12:15:00.000Z\",\"2018-10-09T12:30:00.000Z\",\"2018-10-09T12:45:00.000Z\",\"2018-10-09T13:00:00.000Z\",\"2018-10-09T13:15:00.000Z\",\"2018-10-09T13:30:00.000Z\",\"2018-10-09T13:45:00.000Z\",\"2018-10-09T14:00:00.000Z\",\"2018-10-09T14:15:00.000Z\",\"2018-10-09T14:30:00.000Z\",\"2018-10-09T14:45:00.000Z\",\"2018-10-09T15:00:00.000Z\",\"2018-10-09T15:15:00.000Z\",\"2018-10-09T15:30:00.000Z\",\"2018-10-09T15:45:00.000Z\",\"2018-10-09T16:00:00.000Z\",\"2018-10-09T16:15:00.000Z\",\"2018-10-09T16:30:00.000Z\",\"2018-10-09T16:45:00.000Z\",\"2018-10-09T17:00:00.000Z\",\"2018-10-09T17:15:00.000Z\",\"2018-10-09T17:30:00.000Z\",\"2018-10-09T17:45:00.000Z\",\"2018-10-09T18:00:00.000Z\",\"2018-10-09T18:15:00.000Z\",\"2018-10-09T18:30:00.000Z\",\"2018-10-09T18:45:00.000Z\",\"2018-10-09T19:00:00.000Z\",\"2018-10-09T19:15:00.000Z\",\"2018-10-09T19:30:00.000Z\",\"2018-10-09T19:45:00.000Z\",\"2018-10-09T20:00:00.000Z\",\"2018-10-09T20:15:00.000Z\",\"2018-10-09T20:30:00.000Z\",\"2018-10-09T20:45:00.000Z\",\"2018-10-09T21:00:00.000Z\",\"2018-10-09T21:15:00.000Z\",\"2018-10-09T21:30:00.000Z\",\"2018-10-09T21:45:00.000Z\",\"2018-10-09T22:00:00.000Z\",\"2018-10-09T22:15:00.000Z\",\"2018-10-09T22:30:00.000Z\",\"2018-10-09T22:45:00.000Z\",\"2018-10-09T23:00:00.000Z\",\"2018-10-09T23:15:00.000Z\",\"2018-10-09T23:30:00.000Z\",\"2018-10-09T23:45:00.000Z\",\"2018-10-10T00:00:00.000Z\",\"2018-10-10T00:15:00.000Z\",\"2018-10-10T00:30:00.000Z\",\"2018-10-10T00:45:00.000Z\",\"2018-10-10T01:00:00.000Z\",\"2018-10-10T01:15:00.000Z\",\"2018-10-10T01:30:00.000Z\",\"2018-10-10T01:45:00.000Z\",\"2018-10-10T02:00:00.000Z\",\"2018-10-10T02:15:00.000Z\",\"2018-10-10T02:30:00.000Z\",\"2018-10-10T02:45:00.000Z\",\"2018-10-10T03:00:00.000Z\",\"2018-10-10T03:15:00.000Z\",\"2018-10-10T03:30:00.000Z\",\"2018-10-10T03:45:00.000Z\",\"2018-10-10T04:00:00.000Z\",\"2018-10-10T04:15:00.000Z\",\"2018-10-10T04:30:00.000Z\",\"2018-10-10T04:45:00.000Z\",\"2018-10-10T05:00:00.000Z\",\"2018-10-10T05:15:00.000Z\",\"2018-10-10T05:30:00.000Z\",\"2018-10-10T05:45:00.000Z\",\"2018-10-10T06:00:00.000Z\",\"2018-10-10T06:15:00.000Z\",\"2018-10-10T06:30:00.000Z\",\"2018-10-10T06:45:00.000Z\",\"2018-10-10T07:00:00.000Z\"],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.66,3.17,7.74,9.93,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,15.79,15.79,15.79,15.79,15.78,15.78,15.78,15.77,15.77,15.77,15.76,15.76,15.76,28.01,28.01,30.27,20.51,17.27,12.98,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,13.36,21.26,28.8,31.98,32.73999999999999,44.59,53.1,80.16,82.54000000000001,82.18000000000001,79.68000000000001,79.68000000000001,79.68000000000001,75.17,64.06,58.12,56.44,48.84,42.57,35.67,30.37,30.37,24.27,21.66,21.54,15.54,13.44,9.040000000000001,7.96,7.96,7.44,5.86,5.86,5.86,5.86,5.86,5.86,4.56,4.52,4.52,2.63,0.76,0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.66,2.79,7.74,9.539999999999999,12.67,13.02548422876949,15.95837227722772,18.56440000000001,21.13519999999999,21.6448,22.9396,22.9104,22.91520000000001,22.92480000000001,22.9396,24.26559999999999,24.2704,24.27999999999999,25.7848,27.37839999999999,29.3304,29.34,29.35479999999999,29.32559999999999,29.33039999999999,29.34,32.52479999999999,32.49560000000001,32.5004,32.51,32.5248,32.49560000000002,32.5004,32.50999999999999,32.5248,32.4956,32.5004,32.51000000000001,32.52479999999999,44.7556,44.7604,47.03999999999999,37.29479999999999,30.4084,22.50679999999999,9.81,7.63,6.43,6.43,6.43,6.43,5.99,2.27,2.04,2.04,2.04,1.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.34,8.1,13.36,21.26,28.8,31.98,32.74,44.59,53.1,80.16,82.54000000000001,82.18000000000001,79.68000000000001,79.68000000000001,79.68000000000001,75.17,64.06,58.12,56.44,48.84,42.57,35.67,30.37,30.37,24.27,21.66,21.54,15.54,13.44,9.040000000000001,7.96,7.96,7.44,5.86,5.86,5.86,5.86,5.86,5.86,4.56,4.52,4.52,2.63,0.76,0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.79,2.79,8.17,9.539999999999999,19.08,26.36,26.36,26.36,26.36,26.36,26.36,26.36,26.36,26.36,26.36,26.36,26.36,26.36,27.85,29.38,29.38,29.38,29.38,29.38,29.38,29.38,32.55,32.55,32.55,32.55,32.55,32.55,32.55,32.55,32.55,32.55,32.55,32.55,32.55,44.81,44.81,44.91,22.68,18.52,12.49,3.04,3.03,3.03,3.03,3.03,3.03,3.03,0.35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.34,8.1,13.36,21.26,28.8,31.98,32.74,44.59,53.1,80.16,82.54000000000001,82.18000000000001,79.68000000000001,79.68000000000001,79.68000000000001,75.17,64.06,58.12,56.44,48.84,42.57,35.67,30.37,30.37,24.27,21.66,21.54,15.54,13.44,9.040000000000001,7.96,7.96,7.44,5.86,5.86,5.86,5.86,5.86,5.86,4.56,4.52,4.52,2.63,0.76,0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],\"fixedtz\":true,\"tzone\":\"America/Los_Angeles\",\"css\":\"/* Dygraph styling */\\n\\n.dygraph-title {\\n  text-align: left;\\n  font-weight: normal;\\n  font-size: 70%;\\n}\\n\\n.dygraph-legend {\\n  color: white;\\n  background-color: #BABABA !important;\\n    padding-left:5px;\\n  border-color:#BABABA;\\n    border-style:solid;\\n  border-width:thin;\\n  transition:0s 4s;\\n  z-index: 20 !important;\\n  box-shadow: 2px 2px 5px rgba(0, 0, 0, .3);\\n  border-radius: 3px;\\n}\\n\\n.dygraph-legend:hover{\\n  transform: translate(-110%);\\n  transition: 0s;\\n}\\n\\n.dygraph-legend > span {\\n  color: black;\\n  padding-left:5px;\\n  margin-left:-5px;\\n  background-color: white !important;\\n  display: block;\\n}\\n\\n.dygraph-legend > span > span{\\n  display: inline;\\n}\\n\\n.highlight {\\n  border-left: 2px solid #BABABA;\\n  padding-left:3px !important;\\n\\n}\"},\"evals\":[],\"jsHooks\":[]} # Native `plot` function also works plot(sc_results)  {\"x\":{\"attrs\":{\"ylabel\":\"Power (kW)\",\"labels\":[\"minute\",\"Setpoint\",\"Flexible EVs\"],\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawAxis\":true},\"y\":{\"drawAxis\":true}},\"legend\":\"auto\",\"labelsDivWidth\":250,\"labelsShowZeroValues\":false,\"labelsSeparateLines\":false,\"hideOverlayOnMouseOut\":true,\"stackedGraph\":false,\"fillGraph\":false,\"fillAlpha\":0.15,\"stepPlot\":false,\"drawPoints\":false,\"pointSize\":1,\"drawGapEdgePoints\":false,\"connectSeparatedPoints\":false,\"strokeWidth\":2,\"strokeBorderColor\":\"white\",\"colorValue\":0.5,\"colorSaturation\":1,\"includeZero\":false,\"drawAxesAtZero\":false,\"logscale\":false,\"axisTickSize\":3,\"axisLineColor\":\"black\",\"axisLineWidth\":0.3,\"axisLabelColor\":\"black\",\"axisLabelFontSize\":14,\"axisLabelWidth\":60,\"drawGrid\":true,\"gridLineWidth\":0.3,\"rightGap\":5,\"digitsAfterDecimal\":2,\"labelsKMB\":false,\"labelsKMG2\":false,\"labelsUTC\":false,\"maxNumberWidth\":6,\"animatedZooms\":false,\"mobileDisableYTouch\":true,\"retainDateWindow\":true,\"disableZoom\":false,\"colors\":[\"red\",\"navy\"],\"series\":{\"Setpoint\":{\"axis\":\"y\",\"strokePattern\":[7,3]},\"Flexible EVs\":{\"axis\":\"y\"}}},\"scale\":\"minute\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"2018-10-08T07:00:00.000Z\",\"2018-10-08T07:15:00.000Z\",\"2018-10-08T07:30:00.000Z\",\"2018-10-08T07:45:00.000Z\",\"2018-10-08T08:00:00.000Z\",\"2018-10-08T08:15:00.000Z\",\"2018-10-08T08:30:00.000Z\",\"2018-10-08T08:45:00.000Z\",\"2018-10-08T09:00:00.000Z\",\"2018-10-08T09:15:00.000Z\",\"2018-10-08T09:30:00.000Z\",\"2018-10-08T09:45:00.000Z\",\"2018-10-08T10:00:00.000Z\",\"2018-10-08T10:15:00.000Z\",\"2018-10-08T10:30:00.000Z\",\"2018-10-08T10:45:00.000Z\",\"2018-10-08T11:00:00.000Z\",\"2018-10-08T11:15:00.000Z\",\"2018-10-08T11:30:00.000Z\",\"2018-10-08T11:45:00.000Z\",\"2018-10-08T12:00:00.000Z\",\"2018-10-08T12:15:00.000Z\",\"2018-10-08T12:30:00.000Z\",\"2018-10-08T12:45:00.000Z\",\"2018-10-08T13:00:00.000Z\",\"2018-10-08T13:15:00.000Z\",\"2018-10-08T13:30:00.000Z\",\"2018-10-08T13:45:00.000Z\",\"2018-10-08T14:00:00.000Z\",\"2018-10-08T14:15:00.000Z\",\"2018-10-08T14:30:00.000Z\",\"2018-10-08T14:45:00.000Z\",\"2018-10-08T15:00:00.000Z\",\"2018-10-08T15:15:00.000Z\",\"2018-10-08T15:30:00.000Z\",\"2018-10-08T15:45:00.000Z\",\"2018-10-08T16:00:00.000Z\",\"2018-10-08T16:15:00.000Z\",\"2018-10-08T16:30:00.000Z\",\"2018-10-08T16:45:00.000Z\",\"2018-10-08T17:00:00.000Z\",\"2018-10-08T17:15:00.000Z\",\"2018-10-08T17:30:00.000Z\",\"2018-10-08T17:45:00.000Z\",\"2018-10-08T18:00:00.000Z\",\"2018-10-08T18:15:00.000Z\",\"2018-10-08T18:30:00.000Z\",\"2018-10-08T18:45:00.000Z\",\"2018-10-08T19:00:00.000Z\",\"2018-10-08T19:15:00.000Z\",\"2018-10-08T19:30:00.000Z\",\"2018-10-08T19:45:00.000Z\",\"2018-10-08T20:00:00.000Z\",\"2018-10-08T20:15:00.000Z\",\"2018-10-08T20:30:00.000Z\",\"2018-10-08T20:45:00.000Z\",\"2018-10-08T21:00:00.000Z\",\"2018-10-08T21:15:00.000Z\",\"2018-10-08T21:30:00.000Z\",\"2018-10-08T21:45:00.000Z\",\"2018-10-08T22:00:00.000Z\",\"2018-10-08T22:15:00.000Z\",\"2018-10-08T22:30:00.000Z\",\"2018-10-08T22:45:00.000Z\",\"2018-10-08T23:00:00.000Z\",\"2018-10-08T23:15:00.000Z\",\"2018-10-08T23:30:00.000Z\",\"2018-10-08T23:45:00.000Z\",\"2018-10-09T00:00:00.000Z\",\"2018-10-09T00:15:00.000Z\",\"2018-10-09T00:30:00.000Z\",\"2018-10-09T00:45:00.000Z\",\"2018-10-09T01:00:00.000Z\",\"2018-10-09T01:15:00.000Z\",\"2018-10-09T01:30:00.000Z\",\"2018-10-09T01:45:00.000Z\",\"2018-10-09T02:00:00.000Z\",\"2018-10-09T02:15:00.000Z\",\"2018-10-09T02:30:00.000Z\",\"2018-10-09T02:45:00.000Z\",\"2018-10-09T03:00:00.000Z\",\"2018-10-09T03:15:00.000Z\",\"2018-10-09T03:30:00.000Z\",\"2018-10-09T03:45:00.000Z\",\"2018-10-09T04:00:00.000Z\",\"2018-10-09T04:15:00.000Z\",\"2018-10-09T04:30:00.000Z\",\"2018-10-09T04:45:00.000Z\",\"2018-10-09T05:00:00.000Z\",\"2018-10-09T05:15:00.000Z\",\"2018-10-09T05:30:00.000Z\",\"2018-10-09T05:45:00.000Z\",\"2018-10-09T06:00:00.000Z\",\"2018-10-09T06:15:00.000Z\",\"2018-10-09T06:30:00.000Z\",\"2018-10-09T06:45:00.000Z\",\"2018-10-09T07:00:00.000Z\",\"2018-10-09T07:15:00.000Z\",\"2018-10-09T07:30:00.000Z\",\"2018-10-09T07:45:00.000Z\",\"2018-10-09T08:00:00.000Z\",\"2018-10-09T08:15:00.000Z\",\"2018-10-09T08:30:00.000Z\",\"2018-10-09T08:45:00.000Z\",\"2018-10-09T09:00:00.000Z\",\"2018-10-09T09:15:00.000Z\",\"2018-10-09T09:30:00.000Z\",\"2018-10-09T09:45:00.000Z\",\"2018-10-09T10:00:00.000Z\",\"2018-10-09T10:15:00.000Z\",\"2018-10-09T10:30:00.000Z\",\"2018-10-09T10:45:00.000Z\",\"2018-10-09T11:00:00.000Z\",\"2018-10-09T11:15:00.000Z\",\"2018-10-09T11:30:00.000Z\",\"2018-10-09T11:45:00.000Z\",\"2018-10-09T12:00:00.000Z\",\"2018-10-09T12:15:00.000Z\",\"2018-10-09T12:30:00.000Z\",\"2018-10-09T12:45:00.000Z\",\"2018-10-09T13:00:00.000Z\",\"2018-10-09T13:15:00.000Z\",\"2018-10-09T13:30:00.000Z\",\"2018-10-09T13:45:00.000Z\",\"2018-10-09T14:00:00.000Z\",\"2018-10-09T14:15:00.000Z\",\"2018-10-09T14:30:00.000Z\",\"2018-10-09T14:45:00.000Z\",\"2018-10-09T15:00:00.000Z\",\"2018-10-09T15:15:00.000Z\",\"2018-10-09T15:30:00.000Z\",\"2018-10-09T15:45:00.000Z\",\"2018-10-09T16:00:00.000Z\",\"2018-10-09T16:15:00.000Z\",\"2018-10-09T16:30:00.000Z\",\"2018-10-09T16:45:00.000Z\",\"2018-10-09T17:00:00.000Z\",\"2018-10-09T17:15:00.000Z\",\"2018-10-09T17:30:00.000Z\",\"2018-10-09T17:45:00.000Z\",\"2018-10-09T18:00:00.000Z\",\"2018-10-09T18:15:00.000Z\",\"2018-10-09T18:30:00.000Z\",\"2018-10-09T18:45:00.000Z\",\"2018-10-09T19:00:00.000Z\",\"2018-10-09T19:15:00.000Z\",\"2018-10-09T19:30:00.000Z\",\"2018-10-09T19:45:00.000Z\",\"2018-10-09T20:00:00.000Z\",\"2018-10-09T20:15:00.000Z\",\"2018-10-09T20:30:00.000Z\",\"2018-10-09T20:45:00.000Z\",\"2018-10-09T21:00:00.000Z\",\"2018-10-09T21:15:00.000Z\",\"2018-10-09T21:30:00.000Z\",\"2018-10-09T21:45:00.000Z\",\"2018-10-09T22:00:00.000Z\",\"2018-10-09T22:15:00.000Z\",\"2018-10-09T22:30:00.000Z\",\"2018-10-09T22:45:00.000Z\",\"2018-10-09T23:00:00.000Z\",\"2018-10-09T23:15:00.000Z\",\"2018-10-09T23:30:00.000Z\",\"2018-10-09T23:45:00.000Z\",\"2018-10-10T00:00:00.000Z\",\"2018-10-10T00:15:00.000Z\",\"2018-10-10T00:30:00.000Z\",\"2018-10-10T00:45:00.000Z\",\"2018-10-10T01:00:00.000Z\",\"2018-10-10T01:15:00.000Z\",\"2018-10-10T01:30:00.000Z\",\"2018-10-10T01:45:00.000Z\",\"2018-10-10T02:00:00.000Z\",\"2018-10-10T02:15:00.000Z\",\"2018-10-10T02:30:00.000Z\",\"2018-10-10T02:45:00.000Z\",\"2018-10-10T03:00:00.000Z\",\"2018-10-10T03:15:00.000Z\",\"2018-10-10T03:30:00.000Z\",\"2018-10-10T03:45:00.000Z\",\"2018-10-10T04:00:00.000Z\",\"2018-10-10T04:15:00.000Z\",\"2018-10-10T04:30:00.000Z\",\"2018-10-10T04:45:00.000Z\",\"2018-10-10T05:00:00.000Z\",\"2018-10-10T05:15:00.000Z\",\"2018-10-10T05:30:00.000Z\",\"2018-10-10T05:45:00.000Z\",\"2018-10-10T06:00:00.000Z\",\"2018-10-10T06:15:00.000Z\",\"2018-10-10T06:30:00.000Z\",\"2018-10-10T06:45:00.000Z\",\"2018-10-10T07:00:00.000Z\"],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.66,3.17,7.74,9.93,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,15.79,15.79,15.79,15.79,15.78,15.78,15.78,15.77,15.77,15.77,15.76,15.76,15.76,28.01,28.01,30.27,20.51,17.27,12.98,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.67,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,12.66,13.36,21.26,28.8,31.98,32.73999999999999,44.59,53.1,80.16,82.54000000000001,82.18000000000001,79.68000000000001,79.68000000000001,79.68000000000001,75.17,64.06,58.12,56.44,48.84,42.57,35.67,30.37,30.37,24.27,21.66,21.54,15.54,13.44,9.040000000000001,7.96,7.96,7.44,5.86,5.86,5.86,5.86,5.86,5.86,4.56,4.52,4.52,2.63,0.76,0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.66,2.79,7.74,9.539999999999999,12.67,13.02548422876949,15.95837227722772,18.56440000000001,21.13519999999999,21.6448,22.9396,22.9104,22.91520000000001,22.92480000000001,22.9396,24.26559999999999,24.2704,24.27999999999999,25.7848,27.37839999999999,29.3304,29.34,29.35479999999999,29.32559999999999,29.33039999999999,29.34,32.52479999999999,32.49560000000001,32.5004,32.51,32.5248,32.49560000000002,32.5004,32.50999999999999,32.5248,32.4956,32.5004,32.51000000000001,32.52479999999999,44.7556,44.7604,47.03999999999999,37.29479999999999,30.4084,22.50679999999999,9.81,7.63,6.43,6.43,6.43,6.43,5.99,2.27,2.04,2.04,2.04,1.4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.34,8.1,13.36,21.26,28.8,31.98,32.74,44.59,53.1,80.16,82.54000000000001,82.18000000000001,79.68000000000001,79.68000000000001,79.68000000000001,75.17,64.06,58.12,56.44,48.84,42.57,35.67,30.37,30.37,24.27,21.66,21.54,15.54,13.44,9.040000000000001,7.96,7.96,7.44,5.86,5.86,5.86,5.86,5.86,5.86,4.56,4.52,4.52,2.63,0.76,0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],\"fixedtz\":true,\"tzone\":\"America/Los_Angeles\",\"css\":\"/* Dygraph styling */\\n\\n.dygraph-title {\\n  text-align: left;\\n  font-weight: normal;\\n  font-size: 70%;\\n}\\n\\n.dygraph-legend {\\n  color: white;\\n  background-color: #BABABA !important;\\n    padding-left:5px;\\n  border-color:#BABABA;\\n    border-style:solid;\\n  border-width:thin;\\n  transition:0s 4s;\\n  z-index: 20 !important;\\n  box-shadow: 2px 2px 5px rgba(0, 0, 0, .3);\\n  border-radius: 3px;\\n}\\n\\n.dygraph-legend:hover{\\n  transform: translate(-110%);\\n  transition: 0s;\\n}\\n\\n.dygraph-legend > span {\\n  color: black;\\n  padding-left:5px;\\n  margin-left:-5px;\\n  background-color: white !important;\\n  display: block;\\n}\\n\\n.dygraph-legend > span > span{\\n  display: inline;\\n}\\n\\n.highlight {\\n  border-left: 2px solid #BABABA;\\n  padding-left:3px !important;\\n\\n}\"},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://mcanigueral.github.io/flextools/reference/print.SmartCharging.html","id":null,"dir":"Reference","previous_headings":"","what":"print method for SmartCharging object class — print.SmartCharging","title":"print method for SmartCharging object class — print.SmartCharging","text":"print method SmartCharging object class","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/print.SmartCharging.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print method for SmartCharging object class — print.SmartCharging","text":"","code":"# S3 method for class 'SmartCharging' print(x, ...)"},{"path":"https://mcanigueral.github.io/flextools/reference/print.SmartCharging.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print method for SmartCharging object class — print.SmartCharging","text":"x SmartCharging object returned smart_charging  function ... arguments passed methods.","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/print.SmartCharging.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print method for SmartCharging object class — print.SmartCharging","text":"nothing prints information SmartCharging object","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/round_to_interval.html","id":null,"dir":"Reference","previous_headings":"","what":"Round a numeric value to interval — round_to_interval","title":"Round a numeric value to interval — round_to_interval","text":"Round numeric value interval","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/round_to_interval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round a numeric value to interval — round_to_interval","text":"","code":"round_to_interval(dbl, interval)"},{"path":"https://mcanigueral.github.io/flextools/reference/round_to_interval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round a numeric value to interval — round_to_interval","text":"dbl numeric value interval decimal interval (0 1)","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/schedule_sessions.html","id":null,"dir":"Reference","previous_headings":"","what":"Schedule sessions according to optimal setpoint — schedule_sessions","title":"Schedule sessions according to optimal setpoint — schedule_sessions","text":"Schedule sessions according optimal setpoint","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/schedule_sessions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Schedule sessions according to optimal setpoint — schedule_sessions","text":"","code":"schedule_sessions(   sessions,   setpoint,   method,   power_th = 0,   charging_power_min = 0.5,   energy_min = 1,   include_log = FALSE,   show_progress = TRUE )"},{"path":"https://mcanigueral.github.io/flextools/reference/schedule_sessions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Schedule sessions according to optimal setpoint — schedule_sessions","text":"sessions tibble, sessions data set containing following variables: \"Session\", \"ConnectionStartDateTime\", \"ConnectionHours\", \"Power\" \"Energy\". IMPORTANT: Make sure sessions ConnectionStartDateTime ChargingStartDateTime time resolution setpoint$datetime. setpoint tibble columns datetime setpoint. method character, \"postpone\", \"curtail\" \"interrupt\". power_th numeric, power threshold (0 1) accepted setpoint. example, power_th = 0.1 setpoint = 100 certain time slot, sessions' demand can reach value 110 without needing schedule sessions. charging_power_min numeric, minimum allowed ratio (0 1) nominal power. example, charging_power_min = 0.5 method = 'curtail', sessions' charging power can curtailed 50% nominal charging power (.e. Power variable sessions tibble). energy_min numeric, minimum allowed ratio (0 1) required energy. include_log logical, whether output algorithm messages every user profile time-slot show_progress logical, whether output progress bar console","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/schedule_sessions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Schedule sessions according to optimal setpoint — schedule_sessions","text":"list two elements sessions log","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/smart_charging.html","id":null,"dir":"Reference","previous_headings":"","what":"Smart charging algorithm — smart_charging","title":"Smart charging algorithm — smart_charging","text":"function provides framework simulate different smart charging methods (.e. postpone, interrupt curtail) reach multiple goals (e.g. grid congestion, net power minimization, cost minimization). See implementation examples formulation optimization problems documentation website.","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/smart_charging.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smart charging algorithm — smart_charging","text":"","code":"smart_charging(   sessions,   opt_data,   opt_objective,   method,   window_days,   window_start_hour,   responsive = NULL,   power_th = 0,   charging_power_min = 0,   energy_min = 1,   include_log = FALSE,   show_progress = FALSE,   lambda = 0,   mc.cores = 1 )"},{"path":"https://mcanigueral.github.io/flextools/reference/smart_charging.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smart charging algorithm — smart_charging","text":"sessions tibble, sessions data set containig following variables: \"Session\", \"Timecycle\", \"Profile\", \"ConnectionStartDateTime\", \"ConnectionHours\", \"Power\" \"Energy\". opt_data tibble, optimization contextual data. first column must named datetime (mandatory) containing date time sequence smart charging algorithm applied, sessions starting within time sequence column datetime optimized. columns can : static: static power demand (kW) sectors like buildings, offices, etc. grid_capacity: maximum imported power grid (kW), example contracted power energy company. production: local power generation (kW). used opt_objective = \"grid\". price_imported: price imported energy (€/kWh). used opt_objective = \"cost\". price_exported: price exported energy (€/kWh). used opt_objective = \"cost\". price_turn_down: price turn-energy use (€/kWh). used opt_objective = \"cost\". price_turn_up: price turn-energy use (€/kWh). used opt_objective = \"cost\". columns opt_data user profiles names, used setpoints optimization performed corresponding user profiles. opt_objective character, optimization objective \"none\", \"grid\", \"cost\" value 0 (cost) 1 (grid). See details section information different objectives. method character, scheduling method \"none\", \"postpone\", \"curtail\" \"interrupt\". none, scheduling part skipped sessions returned results identical original parameter. window_days integer, number days consider optimization window. window_start_hour integer, starting hour optimization window. responsive Named two-level list ratio (0 1) sessions responsive smart charging program. names list must exactly match Time-cycle User profiles names. example: list(Monday = list(Worktime = 1, Shortstay = 0.1)) power_th numeric, power threshold (0 1) accepted setpoint. example, power_th = 0.1 setpoint = 100 certain time slot, sessions' demand can reach value 110 without needing schedule sessions. charging_power_min numeric. can configured two ways: (1) minimum allowed ratio (0 1) nominal power (.e. Power column sessions), (2) specific value minimum power (kW) higher 1 kW. example, charging_power_min = 0.5 method = 'curtail', sessions' charging power can curtailed 50% nominal charging power. charging_power_min = 2, sessions' charging power can curtailed 2 kW. energy_min numeric, minimum allowed ratio (0 1) required energy. include_log logical, whether output algorithm messages every user profile time-slot show_progress logical, whether output progress bar console lambda numeric, penalty change flexible load. mc.cores integer, number cores use. Must least one, parallelization requires least two cores.","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/smart_charging.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smart charging algorithm — smart_charging","text":"list three elements: optimal setpoints (tibble), sessions schedule (tibble) log messages (list character strings). date-time values log list time zone opt_data.","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/smart_charging.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Smart charging algorithm — smart_charging","text":"important parameter function opt_data, defines time sequence smart charging algorithm optimization variables. opt_data parameter directly related opt_objective parameter. three different optimization objectives implemented function: Minimize grid interaction (opt_objective = \"grid\"): minimizes peak flexible load amount imported power grid. production found opt_data, peak shaving objective considered. Minimize energy cost (opt_objective = \"cost\"): minimizes energy cost. case, columns grid_capacity, price_imported, price_exported, price_turn_up price_turn_down tibble opt_data important. variables configured, default values grid_capacity = Inf, price_imported = 1, price_exported = 0, price_turn_up = 0 price_turn_down = 0 considered just minimize imported energy. Combined optimization (opt_objective 0 1): minimizes net power peaks energy cost. optimization (opt_objective = \"none\"): skip optimization least one user profile name must opt_data column considered setpoint scheduling algorithm. user profiles appear opt_data optimized.","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/smart_charging.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Smart charging algorithm — smart_charging","text":"","code":"# Example: we will use the example data set of charging sessions # from the `evsim` package.  # The user profiles of this data set are `Visit` and `Worktime`, # identified in two different time cycles `Workday` and `Weekend`. # These two variables in the `sessions` tibble, `Profile` and `Timecycle`, # are required for the `smart_charging` function and give more versatility # to the smart charging context. For example, we may want to only coordinate # `Worktime` sessions instead of all sessions.  # For this example we want the following: # - Curtail only `Worktime` sessions, which have a responsiveness rate of # 0.9 (i.e. 90% of Worktime users accept to postpone the session). # - Minimize the power peak of the sessions (peak shaving) # - Time series resolution of 15 minutes # - Optimization window of 24 hours from 6:00AM to 6:00 AM # - The energy charged can be reduced up to 50% of the original requirement  library(dplyr) sessions <- evsim::california_ev_sessions_profiles %>%   slice_head(n = 50) %>%   evsim::adapt_charging_features(time_resolution = 15) sessions_demand <- evsim::get_demand(sessions, resolution = 15)  # Don't require any other variable than datetime, since we don't # care about local generation (just peak shaving objective) opt_data <- tibble(   datetime = sessions_demand$datetime,   production = 0 ) sc_results <- smart_charging(   sessions, opt_data, opt_objective = \"grid\", method = \"curtail\",   window_days = 1, window_start_hour = 6,   responsive = list(Workday = list(Worktime = 0.9)),   energy_min = 0.5 )"},{"path":"https://mcanigueral.github.io/flextools/reference/summarise_energy_charged.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a summary of the energy charged per session — summarise_energy_charged","title":"Get a summary of the energy charged per session — summarise_energy_charged","text":"table provided containing originally required energy every session actual energy charged smart charging program (also percentage).","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/summarise_energy_charged.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a summary of the energy charged per session — summarise_energy_charged","text":"","code":"summarise_energy_charged(smart_charging, sessions)"},{"path":"https://mcanigueral.github.io/flextools/reference/summarise_energy_charged.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a summary of the energy charged per session — summarise_energy_charged","text":"smart_charging SmartCharging object, returned function smart_charging() sessions tibble, sessions data set containig following variables: \"Session\", \"Timecycle\", \"Profile\", \"ConnectionStartDateTime\", \"ConnectionHours\", \"Power\" \"Energy\".","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/summarise_energy_charged.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a summary of the energy charged per session — summarise_energy_charged","text":"tibble","code":""},{"path":"https://mcanigueral.github.io/flextools/reference/summarise_energy_charged.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a summary of the energy charged per session — summarise_energy_charged","text":"","code":"library(dplyr)  sessions <- evsim::california_ev_sessions_profiles %>%   slice_head(n = 50) %>%   evsim::adapt_charging_features(time_resolution = 15) sessions_demand <- evsim::get_demand(sessions, resolution = 15)  # Don't require any other variable than datetime, since we don't # care about local generation (just peak shaving objective) opt_data <- tibble(   datetime = sessions_demand$datetime,   production = 0 ) sc_results <- smart_charging(   sessions, opt_data, opt_objective = \"grid\", method = \"curtail\",   window_days = 1, window_start_hour = 6,   responsive = list(Workday = list(Worktime = 0.9)),   energy_min = 0.5 )  summarise_energy_charged(sc_results, sessions) #> # A tibble: 50 × 4 #>    Session EnergyCharged EnergyRequired PctEnergyCharged #>    <chr>           <dbl>          <dbl>            <dbl> #>  1 S1               6.31           6.31              100 #>  2 S2              11.4           22.8                50 #>  3 S3              12.7           25.4                50 #>  4 S4               7.53           7.53              100 #>  5 S5              10.3           20.7                50 #>  6 S6               2.51           5.01               50 #>  7 S7               4.41           8.42               52 #>  8 S8               8.86          17.1                52 #>  9 S9               7.85          15.7                50 #> 10 S10             58.9           58.9               100 #> # ℹ 40 more rows"},{"path":"https://mcanigueral.github.io/flextools/news/index.html","id":"flextools-100","dir":"Changelog","previous_headings":"","what":"flextools 1.0.0","title":"flextools 1.0.0","text":"First release documentation.","code":""}]
