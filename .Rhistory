flexible = building
) %>%
optimize_demand(
opt_objective = "grid",
direction = "forwardss",
flex_window_hours = 6,
time_horizon = 12
)
opt_data %>%
mutate(
flexible = building
) %>%
optimize_demand(
opt_objective = "grid",
direction = "forwards",
flex_window_hours = 6,
time_horizon = 12
)
test_that("Get error when `direction` is mispelled", {
expect_error(
opt_data %>%
mutate(
flexible = building
) %>%
optimize_demand(
opt_objective = "grid",
direction = "forwards",
flex_window_hours = 6,
time_horizon = 12
)
)
})
devtools::test_coverage()
test_that("time-series resolution is decreased with first", {
df2 <- change_timeseries_resolution(energy_profiles, 60, "first")
expect_equal(get_time_resolution(df2$datetime), 60)
})
test_that("time-series resolution is decreased with sum", {
df2 <- change_timeseries_resolution(energy_profiles, 60, "sum")
expect_equal(get_time_resolution(df2$datetime), 60)
})
devtools::load_all(".")
test_that("time-series resolution is decreased with sum", {
df2 <- change_timeseries_resolution(energy_profiles, 60, "sum")
expect_equal(get_time_resolution(df2$datetime), 60)
})
expect_error(get_time_resolution(df2$datetime))
df2 <- change_timeseries_resolution(energy_profiles, 60, "averages")
expect_error(get_time_resolution(df2$datetime))
expect_error(change_timeseries_resolution(energy_profiles, 60, "averages"))
change_timeseries_resolution(energy_profiles, 60, "averages")
test_that("time-series resolution is increased with repeat", {
df2 <- change_timeseries_resolution(energy_profiles, 5, "repeat")
expect_equal(get_time_resolution(df2$datetime), 5)
})
test_that("time-series resolution is increased with interpolate", {
df2 <- change_timeseries_resolution(energy_profiles, 5, "interpolate")
expect_equal(get_time_resolution(df2$datetime), 5)
})
df2 <- change_timeseries_resolution(energy_profiles[seq_len(100), ], 5, "interpolate")
expect_equal(get_time_resolution(df2$datetime), 5)
test_that("time-series resolution is increased with interpolate", {
df2 <- change_timeseries_resolution(energy_profiles[seq_len(100), ], 5, "interpolate")
expect_equal(get_time_resolution(df2$datetime), 5)
})
test_that("time-series resolution is increased with divide", {
df2 <- change_timeseries_resolution(energy_profiles, 5, "divide")
expect_equal(get_time_resolution(df2$datetime), 5)
})
test_that("Error when method to decrease is incorrect", {
expect_error(change_timeseries_resolution(energy_profiles, 60, "divide"))
})
test_that("Error when method to increase is incorrect", {
expect_error(change_timeseries_resolution(energy_profiles, 60, "average"))
})
t
expect_error(change_timeseries_resolution(energy_profiles, 5, "average"))
change_timeseries_resolution(energy_profiles, 5, "average")
test_that("Error when method to increase is incorrect", {
expect_error(change_timeseries_resolution(energy_profiles, 5, "average"))
})
sessions
sc_results <- smart_charging(
sessions, opt_data, opt_objective = "none", method = "curtail",
window_days = 1, window_start_hour = 6,
responsive = list(Workday = list(Worktime = 0.9)),
charging_power_min = 2, include_log = TRUE, show_progress = TRUE
)
opt_data$Worktime <- 10
sc_results <- smart_charging(
sessions, opt_data, opt_objective = "none", method = "curtail",
window_days = 1, window_start_hour = 6,
responsive = list(Workday = list(Worktime = 0.9)),
charging_power_min = 2, include_log = TRUE, show_progress = TRUE
)
opt_data
sessions_demand
opt_data
sc_results <- smart_charging(
sessions, opt_data, opt_objective = "none", method = "curtail",
window_days = 1, window_start_hour = 6,
responsive = list(Workday = list(Worktime = 0.9)),
charging_power_min = 2, include_log = TRUE, show_progress = TRUE
)
# Use first 50 sessions
sessions <- evsim::california_ev_sessions_profiles %>%
slice_head(n = 50) %>%
evsim::adapt_charging_features(time_resolution = 15)
sessions_demand <- evsim::get_demand(sessions, resolution = 15)
# Don't require any other variable than datetime, since we don't
# care about local generation (just peak shaving objective)
opt_data <- tibble(
datetime = sessions_demand$datetime,
production = 0
)
opt_data$Worktime <- 10
sc_results <- smart_charging(
sessions, opt_data, opt_objective = "none", method = "curtail",
window_days = 1, window_start_hour = 6,
responsive = list(Workday = list(Worktime = 0.9)),
charging_power_min = 2, include_log = TRUE, show_progress = TRUE
)
expect_type(sc_results, "list")
test_that("smart charging works without optimization,  curtail method and min charging power of 2kW, including logs and progress", {
opt_data$Worktime <- 10
sc_results <- smart_charging(
sessions, opt_data, opt_objective = "none", method = "curtail",
window_days = 1, window_start_hour = 6,
responsive = list(Workday = list(Worktime = 0.9)),
charging_power_min = 2, include_log = TRUE, show_progress = TRUE
)
expect_type(sc_results, "list")
})
# Don't require any other variable than datetime, since we don't
# care about local generation (just peak shaving objective)
opt_data <- tibble(
datetime = sessions_demand$datetime,
production = 0
)
test_that("Error when no user profiles in `opt_data` and not optimization", {
expect_error(smart_charging(
sessions, opt_data, opt_objective = "none", method = "curtail",
window_days = 1, window_start_hour = 6,
responsive = list(Workday = list(Worktime = 0.9)),
charging_power_min = 2, include_log = TRUE, show_progress = TRUE
))
})
devtools::test_coverage()
decrease_numeric_resolution(energy_profiles$production, 4, "first")
decrease_numeric_resolution(energy_profiles$solar, 4, "first")
expect_equal(length(p2), nrow(energy_profiles)/4)
test_that("numeric vector resolution is decreased with first", {
p2 <- decrease_numeric_resolution(energy_profiles$solar, 4, "first")
expect_equal(length(p2), nrow(energy_profiles)/4)
})
test_that("numeric vector resolution is decreased with sum", {
p2 <- decrease_numeric_resolution(energy_profiles$solar, 4, "sum")
expect_equal(length(p2), nrow(energy_profiles)/4)
})
test_that("numeric vector resolution is decreased with average", {
p2 <- decrease_numeric_resolution(energy_profiles$solar, 4, "average")
expect_equal(length(p2), nrow(energy_profiles)/4)
})
test_that("time-series are aggregated, omitting some variables", {
df <- select(
energy_profiles, "datetime", building1 = "building", building2 = "building"
)
expect_equal(
names(aggregate_timeseries(df, varname = "total", omit = "building1")),
c("datetime", "total", "building1")
)
})
test_that("error when method is incorrect decreasing time-series", {
expect_error(
change_timeseries_resolution(energy_profiles, 60, "averages")
)
})
change_timeseries_resolution(energy_profiles, 60, "averages")
test_that("Error when method to decrease is incorrect", {
expect_error(
decrease_timeseries_resolution(energy_profiles, 60, "averages")
)
})
expect_equal(
flextools:::convert_time_num_to_period(15),
lubridate::period(15, "mins")
)
test_that("number is converted to period", {
expect_equal(
flextools:::convert_time_num_to_period(15),
lubridate::period(15, "hours")
)
})
test_that("conversion losses are calculated", {
batt_loss <- get_conversion_losses(df_batt$battery, loss_charge = 0.5, loss_discharge = 0.5)
expect_true(sum(batt_loss) > 0)
})
df_batt
devtools::test_coverage()
expect_error(
opt_data %>%
mutate(
flexible = building
) %>%
rename(solar = production) %>%
optimize_demand(
opt_objective = "grid",
direction = "forwards",
flex_window_hours = 6,
time_horizon = 12
)
)
opt_data %>%
mutate(
flexible = building
) %>%
rename(solar = production) %>%
optimize_demand(
opt_objective = "grid",
direction = "forwards",
flex_window_hours = 6,
time_horizon = 12
)
opt_data <- flextools::energy_profiles %>%
filter(lubridate::isoweek(datetime) == 18) %>%
rename(
production = "solar"
)
opt_data %>%
mutate(
flexible = building
) %>%
rename(solar = production) %>%
optimize_demand(
opt_objective = "grid",
direction = "forwards",
flex_window_hours = 6,
time_horizon = 12
)
opt_data %>%
mutate(
flexible = building
) %>%
rename(solar = production) %>%
optimize_demand(
opt_objective = "grid",
direction = "forward",
flex_window_hours = 6,
time_horizon = 12
)
opt_data %>%
mutate(
flexible = building
) %>%
rename(solar = production)
devtools::load_all(".")
opt_data %>%
mutate(
flexible = building
) %>%
rename(solar = production)
test_that("Get error when missing `production` column in `opt_data`", {
expect_error(
opt_data %>%
mutate(
flexible = building
) %>%
rename(solar = production) %>%
optimize_demand(
opt_objective = "grid",
direction = "forward",
flex_window_hours = 6,
time_horizon = 12
)
)
})
names(opot_data)
names(opt_data)
opt_data <- flextools::energy_profiles %>%
filter(lubridate::isoweek(datetime) == 18) %>%
rename(
production = "solar"
)
opt_data %>%
mutate(
flexible = building
) %>%
rename(solar = production) %>%
optimize_demand(
opt_objective = "grid",
direction = "forward",
flex_window_hours = 6,
time_horizon = 12
)
test_that("Get error when missing `production` column in `opt_data`", {
expect_error(
opt_data %>%
mutate(
flexible = building
) %>%
select(-production) %>%
optimize_demand(
opt_objective = "grid",
direction = "forward",
flex_window_hours = 6,
time_horizon = 12
)
)
})
opt_data %>%
mutate(
flexible = building
) %>%
select(-production) %>%
optimize_demand(
opt_objective = "grid",
direction = "forward",
flex_window_hours = 6,
time_horizon = 12
)
opt_data %>%
mutate(
flexible = building
) %>%
select(-production) %>%
optimize_demand(
opt_data = .,
opt_objective = "grid",
direction = "forward",
flex_window_hours = 6,
time_horizon = 12
)
opt_data <- flextools::energy_profiles %>%
filter(lubridate::isoweek(datetime) == 18) %>%
rename(
production = "solar"
)
opt_data %>%
mutate(
flexible = building
) %>%
select(-production) %>%
optimize_demand(
opt_data = .,
opt_objective = "grid",
direction = "forward",
flex_window_hours = 6,
time_horizon = 12
)
test_that("Get error when missing `production` column in `opt_data`", {
expect_error(
opt_data2 <- opt_data %>%
mutate(
flexible = building
) %>%
select(-production)
opt_data2 %>%
test_that("Get error when missing `production` column in `opt_data`", {
opt_data2 <- opt_data %>%
mutate(
flexible = building
) %>%
select(-production)
expect_error(
opt_data2 %>%
optimize_demand(
opt_data = .,
opt_objective = "grid",
direction = "forward",
flex_window_hours = 6,
time_horizon = 12
)
)
})
opt_data2 <- opt_data %>%
mutate(
flexible = building
) %>%
select(-production)
opt_data2
opt_data2 %>%
optimize_demand(
opt_data = .,
opt_objective = "grid",
direction = "forward",
flex_window_hours = 6,
time_horizon = 12
)
expect_error(
optimize_demand(
opt_data = opt_data2,
opt_objective = "grid",
direction = "forward",
flex_window_hours = 6,
time_horizon = 12
)
)
test_that("Get error when missing `production` column in `opt_data`", {
opt_data2 <- opt_data %>%
mutate(
flexible = building
) %>%
select(-production)
expect_message(
optimize_demand(
opt_data = opt_data2,
opt_objective = "grid",
direction = "forward",
flex_window_hours = 6,
time_horizon = 12
)
)
})
test_that("Get error when missing `production` column in `opt_data`", {
expect_message(
opt_data %>%
mutate(
flexible = building
) %>%
select(-production) %>%
optimize_demand(
opt_objective = "grid",
direction = "forward",
flex_window_hours = 6,
time_horizon = 12
)
)
})
test_that("Get message when missing `flex_window_hours` is too high", {
expect_message(
opt_data %>%
mutate(
flexible = building
) %>%
optimize_demand(
opt_objective = "grid",
direction = "forward",
window_days = 1,
flex_window_hours = 48
)
)
})
opt_data %>%
mutate(
flexible = building
) %>%
optimize_demand(
opt_objective = "grid",
direction = "forward",
window_days = 1,
flex_window_hours = 48
)
devtools::load_all(".")
opt_data %>%
mutate(
flexible = building
) %>%
optimize_demand(
opt_objective = "grids",
direction = "backward",
window_days = 2
)
test_that("error when `opt_objective` is wrong in optimization demand", {
expect_error(
opt_data %>%
mutate(
flexible = building
) %>%
optimize_demand(
opt_objective = "grids",
direction = "backward",
window_days = 2
)
)
})
test_that("error when `opt_objective` is wrong in battery optimization", {
expect_error(
opt_data %>%
select(any_of(c(
"datetime", "production", "building", "price_imported", "price_exported"
))) %>%
mutate(
static = .data$building
) %>%
add_battery_optimization(
opt_objective = "grids",
Bcap = 50, Bc = 4, Bd = 4,
window_start_hour = 5
)
)
})
opt_data %>%
select(any_of(c(
"datetime", "production", "building", "price_imported", "price_exported"
))) %>%
mutate(
static = .data$building
) %>%
add_battery_optimization(
opt_objective = "grids",
Bcap = 50, Bc = 4, Bd = 4,
window_start_hour = 5
)
devtools::test_coverage()
devtools::test_coverage()
usethis::use_coverage()
devtools::build_readme()
use_github_action("test-coverage")
usethis::use_github_action("test-coverage")
pkgdown::preview_site()
pkgdown::build_site()
pkgdown::preview_site()
