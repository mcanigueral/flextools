consumption = static + battery
) %>%
get_energy_cost()
imbalance_income <- opt_data_batt %>%
mutate(
demand_baseline = 0,
demand_final = battery
) %>%
get_imbalance_income()
opt_data_batt %>%
dyplot(
title = paste0("Total cost: ", round(energy_cost), "€, Imbalance income: ", round(imbalance_income), "€")
) %>%
dyAxis("y", "Power (kW)") %>%
dyAxis("y2", "Price (€)") %>%
dySeries("static", "Building", "navy") %>%
dySeries("production", "Production", "orange") %>%
dySeries("price_imported", "Imported APX price", axis = "y2", color = "red", strokePattern = "dashed", strokeWidth = 2) %>%
dySeries("price_exported","Exported fixed price",  axis = "y2", color = "green", strokePattern = "dashed", strokeWidth = 2) %>%
dySeries("price_turn_up","Turn-up price",  axis = "y2", color = "#003300", strokePattern = "dashed", strokeWidth = 2) %>%
dySeries("price_turn_down","Turn-down price",  axis = "y2", color = "#669900", strokePattern = "dashed", strokeWidth = 2) %>%
dySeries("battery", "Battery", "purple") %>%
dyLegend(width = 200, show = "onmouseover") %>%
dyOptions(strokeWidth = 2)
plot_cost_opt_battery <- function(opt_data_batt) {
energy_cost <- opt_data_batt %>%
mutate(
consumption = static + battery
) %>%
get_energy_cost()
imbalance_income <- opt_data_batt %>%
mutate(
demand_baseline = 0,
demand_final = battery
) %>%
get_imbalance_income()
opt_data_batt %>%
dyplot(
title = paste0("Total cost: ", round(energy_cost), "€, Imbalance income: ", round(imbalance_income), "€")
) %>%
dyAxis("y", "Power (kW)") %>%
dyAxis("y2", "Price (€)") %>%
dySeries("static", "Building", "navy") %>%
dySeries("production", "Production", "orange") %>%
dySeries("price_imported", "Imported APX price", axis = "y2", color = "red", strokePattern = "dashed", strokeWidth = 2) %>%
dySeries("price_exported","Exported fixed price",  axis = "y2", color = "green", strokePattern = "dashed", strokeWidth = 2) %>%
dySeries("price_turn_up","Turn-up price",  axis = "y2", color = "#003300", strokePattern = "dashed", strokeWidth = 2) %>%
dySeries("price_turn_down","Turn-down price",  axis = "y2", color = "#669900", strokePattern = "dashed", strokeWidth = 2) %>%
dySeries("battery", "Battery", "purple") %>%
dyLegend(width = 200, show = "onmouseover") %>%
dyOptions(strokeWidth = 2)
}
plot_cost_opt_battery(opt_data_batt)
opt_data %>%
dyplot() %>%
dyAxis("y", "Power (kW)") %>%
dyAxis("y2", "Price (€)") %>%
dySeries("static", "Building", "navy") %>%
dySeries("production", "Production", "orange") %>%
dySeries("price_imported", "Imported APX price", axis = "y2", color = "red", strokePattern = "dashed", strokeWidth = 2) %>%
dySeries("price_exported","Exported fixed price",  axis = "y2", color = "green", strokePattern = "dashed", strokeWidth = 2) %>%
dySeries("price_turn_up","Turn-up price",  axis = "y2", color = "#003300", strokePattern = "dashed", strokeWidth = 2) %>%
dySeries("price_turn_down","Turn-down price",  axis = "y2", color = "#669900", strokePattern = "dashed", strokeWidth = 2) %>%
dyLegend(width = 200, show = "onmouseover") %>%
dyOptions(strokeWidth = 2)
knitr::opts_chunk$set(echo = TRUE)
library(flextools)
library(dplyr)
library(lubridate)
library(dutils)
library(dygraphs)
plot_cost_opt_battery <- function(opt_data_batt) {
energy_cost <- opt_data_batt %>%
mutate(
consumption = static + battery
) %>%
get_energy_cost()
imbalance_income <- opt_data_batt %>%
mutate(
demand_baseline = 0,
demand_final = battery
) %>%
get_imbalance_income()
opt_data_batt %>%
dyplot(
title = paste0("Total cost: ", round(energy_cost), "€, Imbalance income: ", round(imbalance_income), "€")
) %>%
dyAxis("y", "Power (kW)") %>%
dyAxis("y2", "Price (€/kWh)") %>%
dySeries("static", "Building", "navy") %>%
dySeries("production", "Production", "orange") %>%
dySeries("price_imported", "Imported APX price", axis = "y2", color = "red", strokePattern = "dashed", strokeWidth = 2) %>%
dySeries("price_exported","Exported fixed price",  axis = "y2", color = "green", strokePattern = "dashed", strokeWidth = 2) %>%
dySeries("price_turn_up","Turn-up price",  axis = "y2", color = "#003300", strokePattern = "dashed", strokeWidth = 2) %>%
dySeries("price_turn_down","Turn-down price",  axis = "y2", color = "#669900", strokePattern = "dashed", strokeWidth = 2) %>%
dySeries("battery", "Battery", "purple") %>%
dyLegend(width = 200, show = "onmouseover") %>%
dyOptions(strokeWidth = 2)
}
opt_data_batt <- opt_data %>%
mutate(
battery = add_battery_optimization(
opt_data = .,
opt_objective = "cost",
Bcap = 50,
Bc = 4,
Bd = 4
)
)
plot_cost_opt_battery(opt_data_batt)
opt_data_batt <- opt_data %>%
mutate(
price_turn_up = 0,
price_turn_down = 0,
) %>%
mutate(
battery = add_battery_optimization(
opt_data = .,
opt_objective = "cost",
Bcap = 50,
Bc = 4,
Bd = 4
)
)
plot_cost_opt_battery(opt_data_batt)
opt_data_batt <- opt_data %>%
mutate(
price_turn_up = 0,
price_turn_down = 0,
) %>%
mutate(
battery = add_battery_optimization(
opt_data = .,
opt_objective = "cost",
Bcap = 50,
Bc = 4,
Bd = 4,
lambda = 1
)
)
plot_cost_opt_battery(opt_data_batt)
lambdas_tbl <- tibble(
lambda = seq(0, 1, 0.1),
energy_cost = NA
)
lambdas_tbl <- tibble(
lambda = seq(0, 1, 0.1),
energy_cost = NA
)
for (i in seq_len(nrow(lambdas_tbl))) {
opt_data_batt <- opt_data %>%
mutate(
price_turn_up = 0,
price_turn_down = 0,
) %>%
mutate(
battery = add_battery_optimization(
opt_data = .,
opt_objective = "cost",
Bcap = 50,
Bc = 4,
Bd = 4,
lambda = lambdas_tbl$lambda[i]
)
)
lambdas_tbl$energy_cost[i] <- opt_data_batt %>%
mutate(
consumption = static + battery
) %>%
get_energy_cost()
}
lambdas_plot <- lambdas_tbl %>%
ggplot(aes(factor(lambda), energy_cost)) +
geom_line()
library(ggplot2)
lambdas_plot <- lambdas_tbl %>%
ggplot(aes(factor(lambda), energy_cost)) +
geom_line()
plotly::ggplotly(lambdas_plot)
lambdas_tbl %>%
ggplot(aes(factor(lambda), energy_cost)) +
geom_line()
lambdas_plot <- lambdas_tbl %>%
ggplot(aes(factor(lambda), energy_cost, group = lambda)) +
geom_line()
plotly::ggplotly(lambdas_plot)
lambdas_tbl
lambdas_tbl <- tibble(
lambda = seq(0, 1, 0.05),
energy_cost = NA
)
for (i in seq_len(nrow(lambdas_tbl))) {
opt_data_batt <- opt_data %>%
mutate(
price_turn_up = 0,
price_turn_down = 0,
) %>%
mutate(
battery = add_battery_optimization(
opt_data = .,
opt_objective = "cost",
Bcap = 50,
Bc = 4,
Bd = 4,
lambda = lambdas_tbl$lambda[i]
)
)
lambdas_tbl$energy_cost[i] <- opt_data_batt %>%
mutate(
consumption = static + battery
) %>%
get_energy_cost()
}
lambdas_plot <- lambdas_tbl %>%
ggplot(aes(factor(lambda), energy_cost, group = energy_cost)) +
geom_line()
plotly::ggplotly(lambdas_plot)
lambdas_plot <- lambdas_tbl %>%
ggplot(aes(factor(lambda), energy_cost, group = lambda)) +
geom_line()
library(tidyr)
lambdas_plot <- lambdas_tbl %>%
pivot_longer(-lambda) %>%
ggplot(aes(factor(lambda), value, group = name)) +
geom_line()
plotly::ggplotly(lambdas_plot)
c(1, 1, -1, -1, 1) %>% sign()
c(1, 3, -2, -4, 5) %>% sign()
c(1, 3, -2, -4, 5) %>% sign() %>% diff()
c(1, 3, -2, -4, 5) %>% sign() %>% diff() > 0
c(1, 3, -2, -4, 5) %>% sign() %>% diff() %>%  . >0
diff(sign(c(1, 3, -2, -4, 5))) > 0
diff(sign(c(1, 3, -2, -4, 5))) != 0
lambdas_tbl <- tibble(
lambda = seq(0, 1, 0.05),
energy_cost = NA,
crossover_times = NA
)
for (i in seq_len(nrow(lambdas_tbl))) {
opt_data_batt <- opt_data %>%
mutate(
price_turn_up = 0,
price_turn_down = 0,
) %>%
mutate(
battery = add_battery_optimization(
opt_data = .,
opt_objective = "cost",
Bcap = 50,
Bc = 4,
Bd = 4,
lambda = lambdas_tbl$lambda[i]
)
)
lambdas_tbl$energy_cost[i] <- opt_data_batt %>%
mutate(
consumption = static + battery
) %>%
get_energy_cost()
lambdas_tbl$crossover_times[i] <- sum(diff(sign(opt_data_batt$battery)) != 0)
}
lambdas_plot <- lambdas_tbl %>%
pivot_longer(-lambda) %>%
ggplot(aes(factor(lambda), value, color = name, group = name)) +
geom_line()
plotly::ggplotly(lambdas_plot)
lambdas_tbl <- tibble(
lambda = seq(0, 1, 0.01),
energy_cost = NA,
crossover_times = NA
)
for (i in seq_len(nrow(lambdas_tbl))) {
opt_data_batt <- opt_data %>%
mutate(
price_turn_up = 0,
price_turn_down = 0,
) %>%
mutate(
battery = add_battery_optimization(
opt_data = .,
opt_objective = "cost",
Bcap = 50,
Bc = 4,
Bd = 4,
lambda = lambdas_tbl$lambda[i]
)
)
lambdas_tbl$energy_cost[i] <- opt_data_batt %>%
mutate(
consumption = static + battery
) %>%
get_energy_cost()
lambdas_tbl$crossover_times[i] <- sum(diff(sign(opt_data_batt$battery)) != 0)
}
lambdas_plot <- lambdas_tbl %>%
pivot_longer(-lambda) %>%
ggplot(aes(factor(lambda), value, color = name, group = name)) +
geom_line()
plotly::ggplotly(lambdas_plot)
lambdas_plot <- lambdas_tbl %>%
pivot_longer(-lambda) %>%
ggplot(aes(lambda, value, color = name, group = name)) +
geom_line()
plotly::ggplotly(lambdas_plot)
?normalize
devtools::load_all(".")
lambdas_tbl$energy_cost <- normalize(lambdas_tbl$energy_cost)
lambdas_tbl$crossover_times <- normalize(lambdas_tbl$crossover_times)
lambdas_plot <- lambdas_tbl %>%
pivot_longer(-lambda) %>%
ggplot(aes(lambda, value, color = name, group = name)) +
geom_line()
plotly::ggplotly(lambdas_plot)
opt_data_batt <- opt_data %>%
mutate(
price_turn_up = 0,
price_turn_down = 0,
) %>%
mutate(
battery = add_battery_optimization(
opt_data = .,
opt_objective = "cost",
Bcap = 50,
Bc = 4,
Bd = 4,
lambda = 0.05
)
)
plot_cost_opt_battery(opt_data_batt)
lambdas_plot <- lambdas_tbl %>%
pivot_longer(-lambda) %>%
ggplot(aes(lambda, value, color = name, group = name)) +
geom_line() +
labs(x ="", y = "Indicator normalized value", color = "")
plotly::ggplotly(lambdas_plot)
opt_data_batt <- opt_data %>%
mutate(
battery = add_battery_optimization(
opt_data = .,
opt_objective = "cost",
Bcap = 50,
Bc = 4,
Bd = 4,
lambda = 0.05
)
)
plot_cost_opt_battery(opt_data_batt)
knitr::opts_chunk$set(echo = TRUE)
library(flextools)
library(dplyr)
library(lubridate)
library(dutils)
library(dygraphs)
library(ggplot2)
library(tidyr)
plot_cost_opt_battery <- function(opt_data_batt) {
energy_cost <- opt_data_batt %>%
mutate(
consumption = static + battery
) %>%
get_energy_cost()
imbalance_income <- opt_data_batt %>%
mutate(
demand_baseline = 0,
demand_final = battery
) %>%
get_imbalance_income()
opt_data_batt %>%
dyplot(
title = paste0("Energy cost: ", round(energy_cost), "€, Imbalance income: ", round(imbalance_income), "€")
) %>%
dyAxis("y", "Power (kW)") %>%
dyAxis("y2", "Price (€/kWh)") %>%
dySeries("static", "Building", "navy") %>%
dySeries("production", "Production", "orange") %>%
dySeries("price_imported", "Imported APX price", axis = "y2", color = "red", strokePattern = "dashed", strokeWidth = 2) %>%
dySeries("price_exported","Exported fixed price",  axis = "y2", color = "green", strokePattern = "dashed", strokeWidth = 2) %>%
dySeries("price_turn_up","Turn-up price",  axis = "y2", color = "#003300", strokePattern = "dashed", strokeWidth = 2) %>%
dySeries("price_turn_down","Turn-down price",  axis = "y2", color = "#669900", strokePattern = "dashed", strokeWidth = 2) %>%
dySeries("battery", "Battery", "purple") %>%
dyLegend(width = 200, show = "onmouseover") %>%
dyOptions(strokeWidth = 2)
}
lambdas_tbl <- tibble(
lambda = seq(0, 1, 0.05),
energy_cost = NA,
crossover_times = NA
)
for (i in seq_len(nrow(lambdas_tbl))) {
opt_data_batt <- opt_data %>%
mutate(
price_turn_up = 0,
price_turn_down = 0,
) %>%
mutate(
battery = add_battery_optimization(
opt_data = .,
opt_objective = "cost",
Bcap = 50,
Bc = 4,
Bd = 4,
lambda = lambdas_tbl$lambda[i]
)
)
lambdas_tbl$energy_cost[i] <- opt_data_batt %>%
mutate(
consumption = static + battery
) %>%
get_energy_cost()
lambdas_tbl$crossover_times[i] <- sum(diff(sign(opt_data_batt$battery)) != 0)
}
lambdas_tbl$energy_cost <- normalize(lambdas_tbl$energy_cost)
lambdas_tbl$crossover_times <- normalize(lambdas_tbl$crossover_times)
lambdas_plot <- lambdas_tbl %>%
pivot_longer(-lambda) %>%
ggplot(aes(lambda, value, color = name, group = name)) +
geom_line() +
labs(x ="", y = "Indicator normalized value", color = "")
plotly::ggplotly(lambdas_plot)
lambdas_tbl <- tibble(
lambda = seq(0, 1, 0.05),
total_cost = NA,
crossover_times = NA
)
for (i in seq_len(nrow(lambdas_tbl))) {
opt_data_batt <- opt_data %>%
mutate(
battery = add_battery_optimization(
opt_data = .,
opt_objective = "cost",
Bcap = 50,
Bc = 4,
Bd = 4,
lambda = lambdas_tbl$lambda[i]
)
)
energy_cost <- opt_data_batt %>%
mutate(
consumption = static + battery
) %>%
get_energy_cost()
imbalance_income <- opt_data_batt %>%
mutate(
demand_baseline = 0,
demand_final = battery
) %>%
get_imbalance_income()
lambdas_tbl$total_cost[i] <- energy_cost - imbalance_income
lambdas_tbl$crossover_times[i] <- sum(diff(sign(opt_data_batt$battery)) != 0)
}
lambdas_tbl$total_cost <- normalize(lambdas_tbl$total_cost)
lambdas_tbl$crossover_times <- normalize(lambdas_tbl$crossover_times)
lambdas_plot <- lambdas_tbl %>%
pivot_longer(-lambda) %>%
ggplot(aes(lambda, value, color = name, group = name)) +
geom_line() +
labs(x ="", y = "Indicator normalized value", color = "")
plotly::ggplotly(lambdas_plot)
opt_data_batt <- opt_data %>%
mutate(
price_turn_up = 0,
price_turn_down = 0,
) %>%
mutate(
battery = add_battery_optimization(
opt_data = .,
opt_objective = "cost",
Bcap = 50,
Bc = 4,
Bd = 4,
lambda = 0.1
)
)
plot_cost_opt_battery(opt_data_batt)
opt_data_batt <- opt_data %>%
mutate(
battery = add_battery_optimization(
opt_data = .,
opt_objective = "cost",
Bcap = 50,
Bc = 4,
Bd = 4,
lambda = 0.1
)
)
plot_cost_opt_battery(opt_data_batt)
opt_data_batt <- opt_data %>%
mutate(
battery = add_battery_optimization(
opt_data = .,
opt_objective = "cost",
Bcap = 50,
Bc = 4,
Bd = 4,
lambda = 0.15
)
)
plot_cost_opt_battery(opt_data_batt)
opt_data_batt <- opt_data %>%
mutate(
battery = add_battery_optimization(
opt_data = .,
opt_objective = "cost",
Bcap = 50,
Bc = 4,
Bd = 4,
lambda = 0.2
)
)
plot_cost_opt_battery(opt_data_batt)
library(flextools)
rmarkdown::render("vignettes/minimize_cost_battery.Rmd", output_file = "./minimize_cost_battery.html")
