energy_mean = 4,
energy_sd = 4
)
parameters_lst <- list(workdays_parameters, weekends_parameters)
# Get the whole model
ev_model <- get_custom_ev_model(
names = c("Workdays", "Weekends"),
months_lst = list(1:12, 1:12),
wdays_lst = list(1:5, 6:7),
parameters_lst = parameters_lst,
connection_log = FALSE,
energy_log = FALSE,
data_tz = "Europe/Amsterdam"
)
set.seed(1234)
ev_sessions <- simulate_sessions(
evmodel = ev_model,
sessions_day = tibble(time_cycle = c("Workdays", "Weekends"), n_sessions = c(10, 10)),
user_profiles = NULL,
charging_powers = tibble(power = 3.7, ratio = 1),
dates = seq.Date(from = dmy("05-08-2024"), to = dmy("05-08-2024")+days(2), by = "day"),
resolution = 15
)
print(ev_sessions)
ev_demand <- ev_sessions %>%
get_demand(by = "Profile")
ev_demand %>%
dyplot(ylab = "Power demand (kW)", stackedGraph = T, fillGraph = T)
grid_capacity <- 12
opt_data <- tibble(
datetime = ev_demand$datetime, # Same date-time sequence than the demand
Worktime = grid_capacity - ev_demand$Visit
)
opt_data %>%
dyplot(ylab = "Power demand (kW)", stackedGraph = T, fillGraph = T, legend_width = 200) %>%
dySeries("Worktime", "Worktime free capacity", color = "navy", strokeWidth = 2, strokePattern = "dashed") %>%
dyLimit(grid_capacity, "Grid capacity", color = "red")
sc_results <- ev_sessions %>%
smart_charging(
opt_data = opt_data,
opt_objective = "none",
method = "curtail",
window_days = 1,
window_start_hour = 6
)
ev_demand_opt <- sc_results$sessions %>%
get_demand(by = "Profile")
ev_demand_opt %>%
filter(date(datetime) < dmy("07-08-2024")) %>%
dyplot(ylab = "Power demand (kW)", stackedGraph = T, fillGraph = T, legend_width = 150) %>%
dyLimit(grid_capacity, "Grid capacity", color = "red")
library(flextools)
# devtools::load_all()
library(dplyr)
library(lubridate)
library(dygraphs)
library(dutils)
library(ggplot2)
library(evsim)
library(purrr)
# For workdays time cycle
workdays_parameters <- dplyr::tibble(
profile = c("Worktime", "Visit"),
ratio = c(50, 50),
start_mean = c(9, 11),
start_sd = c(1, 4),
duration_mean = c(8, 4),
duration_sd = c(0.5, 2),
energy_mean = c(15, 6),
energy_sd = c(4, 3)
)
# For weekends time cycle
weekends_parameters <- dplyr::tibble(
profile = "Visit",
ratio = 100,
start_mean = 12,
start_sd = 4,
duration_mean = 3,
duration_sd = 2,
energy_mean = 4,
energy_sd = 4
)
parameters_lst <- list(workdays_parameters, weekends_parameters)
# Get the whole model
ev_model <- get_custom_ev_model(
names = c("Workdays", "Weekends"),
months_lst = list(1:12, 1:12),
wdays_lst = list(1:5, 6:7),
parameters_lst = parameters_lst,
connection_log = FALSE,
energy_log = FALSE,
data_tz = "Europe/Amsterdam"
)
set.seed(1234)
ev_sessions <- simulate_sessions(
evmodel = ev_model,
sessions_day = tibble(time_cycle = c("Workdays", "Weekends"), n_sessions = c(10, 10)),
user_profiles = NULL,
charging_powers = tibble(power = 3.7, ratio = 1),
dates = seq.Date(from = dmy("05-08-2024"), to = dmy("05-08-2024")+days(2), by = "day"),
resolution = 15
)
ev_sessions
ev_demand <- ev_sessions %>%
get_demand(by = "Profile")
ev_demand %>%
dyplot(ylab = "Power demand (kW)", stackedGraph = T, fillGraph = T)
ev_sessions %>% readr::write_csv("vignettes/sessions_user_profiles.csv")
ev_sessions <- readr::read_csv("sessions_user_profiles.csv") %>%
mutate_if(is.timepoint, with_tz, "Europe/Amsterdam")
print(ev_sessions)
ev_demand <- ev_sessions %>%
get_demand(by = "Profile")
ev_demand %>%
dyplot(ylab = "Power demand (kW)", stackedGraph = T, fillGraph = T)
grid_capacity <- 12
sc_results <- ev_sessions %>%
smart_charging(
opt_data = opt_data,
opt_objective = "none",
method = "curtail",
window_days = 1,
window_start_hour = 6
)
grid_capacity <- 12
opt_data <- tibble(
datetime = ev_demand$datetime, # Same date-time sequence than the demand
Worktime = grid_capacity - ev_demand$Visit
)
opt_data %>%
dyplot(ylab = "Power demand (kW)", stackedGraph = T, fillGraph = T, legend_width = 200) %>%
dySeries("Worktime", "Worktime free capacity", color = "navy", strokeWidth = 2, strokePattern = "dashed") %>%
dyLimit(grid_capacity, "Grid capacity", color = "red")
sc_results <- ev_sessions %>%
smart_charging(
opt_data = opt_data,
opt_objective = "none",
method = "curtail",
window_days = 1,
window_start_hour = 6
)
ev_demand_opt <- sc_results$sessions %>%
get_demand(by = "Profile")
ev_demand_opt %>%
filter(date(datetime) < dmy("07-08-2024")) %>%
dyplot(ylab = "Power demand (kW)", stackedGraph = T, fillGraph = T, legend_width = 150) %>%
dyLimit(grid_capacity, "Grid capacity", color = "red")
sc_results <- ev_sessions %>%
smart_charging(
opt_data = opt_data,
opt_objective = "none",
method = "curtail",
window_days = 1,
window_start_hour = 6,
responsive = list(
Workdays = list(Worktime = 0.6, Visit = 0.3),
Weekends = list(Visit = 0.6)
)
)
list(
Workdays = list(Worktime = 0.6, Visit = 0.3),
Weekends = list(Visit = 0.6)
)
ev_sessions$Timecycle %>% unique
sc_results <- ev_sessions %>%
smart_charging(
opt_data = opt_data,
opt_objective = "none",
method = "curtail",
window_days = 1,
window_start_hour = 6,
responsive = list(
Workdays = list(Worktime = 0.6, Visit = 0.3)
)
)
ev_demand_opt <- sc_results$sessions %>%
get_demand(by = "Profile")
ev_demand_opt %>%
filter(date(datetime) < dmy("07-08-2024")) %>%
dyplot(ylab = "Power demand (kW)", stackedGraph = T, fillGraph = T, legend_width = 150) %>%
dyLimit(grid_capacity, "Grid capacity", color = "red")
sc_results <- ev_sessions %>%
smart_charging(
opt_data = opt_data,
opt_objective = "none",
method = "curtail",
window_days = 1,
window_start_hour = 6,
responsive = list(
Workdays = list(Worktime = 0.9, Visit = 0.3)
)
)
ev_demand_opt <- sc_results$sessions %>%
get_demand(by = "Profile")
ev_demand_opt %>%
filter(date(datetime) < dmy("07-08-2024")) %>%
dyplot(ylab = "Power demand (kW)", stackedGraph = T, fillGraph = T, legend_width = 150) %>%
dyLimit(grid_capacity, "Grid capacity", color = "red")
pkgdown::build_site()
pkgdown::preview_site()
library(flextools)
# devtools::load_all()
library(dplyr)
library(lubridate)
library(dygraphs)
library(ggplot2)
library(evsim)
library(purrr)
ev_demand_opt %>%
plot_ts(ylab = "Power demand (kW)", stackedGraph = T, fillGraph = T, legend_width = 150) %>%
dyLimit(grid_capacity, "Grid capacity", color = "red")
library(flextools)
# devtools::load_all()
library(dplyr)
library(lubridate)
library(dygraphs)
library(ggplot2)
library(evsim)
library(purrr)
energy_data <- flextools::energy_profiles %>%
filter(isoweek(datetime) == 18, wday(datetime, week_start = 1) <= 5) %>%
mutate(
solar = solar*4,
building = building*2
)
head(energy_data)
ev_sessions <- readr::read_csv("sessions_smart_charging.csv") %>%
mutate_if(is.timepoint, with_tz, "Europe/Amsterdam")
library(flextools)
# devtools::load_all()
library(dplyr)
library(lubridate)
library(dygraphs)
library(ggplot2)
library(evsim)
library(purrr)
energy_data <- flextools::energy_profiles %>%
filter(isoweek(datetime) == 18, wday(datetime, week_start = 1) <= 5) %>%
mutate(
solar = solar*4,
building = building*2
)
head(energy_data)
ev_sessions <- readr::read_csv("sessions_smart_charging.csv") %>%
mutate_if(is.timepoint, with_tz, "Europe/Amsterdam")
ev_sessions %>% knitr::kable()
ev_demand <- ev_sessions %>%
get_demand(by = "Session")
ev_demand %>%
plot_ts(ylab = "Power demand (kW)", stackedGraph = T, fillGraph = T)
sc_results <- smart_charging(
ev_sessions,
opt_data = tibble(datetime = ev_demand$datetime, production = 0),
opt_objective = "grid",
method = "curtail",
window_days = 1,
window_start_hour = 6
)
names(sc_results)
head(sc_results$setpoints)
sc_results$setpoints %>%
plot_ts(ylab = "Power (kW)") %>%
dySeries("HomeEV", "Setpoint", color = "red", strokePattern = "dashed", strokeWidth = 2)
pkgdown::build_article("smart-charging")
ev_demand %>%
plot_ts(ylab = "Power demand (kW)", stackedGraph = T, fillGraph = T, legend_show = "onmouseover") %>%
dyLimit(grid_capacity, "Grid capacity", color = "red") %>%
dyAxis("y", valueRange = c(0, 10))
grid_capacity <- 8
ev_demand %>%
plot_ts(ylab = "Power demand (kW)", stackedGraph = T, fillGraph = T, legend_show = "onmouseover") %>%
dyLimit(grid_capacity, "Grid capacity", color = "red") %>%
dyAxis("y", valueRange = c(0, 10))
ev_demand %>%
plot_ts(ylab = "Power demand (kW)", stackedGraph = T, fillGraph = T, legend_show = "onmouseover") %>%
dyLimit(grid_capacity, "Grid capacity", color = "red")
pkgdown::build_article("smart-charging")
ev_demand %>%
left_join(
rename(sc_results$setpoints, Setpoint = HomeEV),
by = "datetime"
) %>%
plot_ts(ylab = "Power (kW)", stackedGraph = TRUE) %>%
dySeries("Setpoint", color = "red", strokePattern = "dashed", strokeWidth = 2, stackedGraph = F)
ev_demand %>%
left_join(
rename(sc_results$setpoints, Setpoint = HomeEV),
by = "datetime"
) %>%
plot_ts(ylab = "Power (kW)", stackedGraph = T, fillGraph = T) %>%
# dyStackedRibbonGroup()
dySeries("Setpoint", color = "red", strokePattern = "dashed", strokeWidth = 2, fillGraph = F)
ev_demand
ev_demand %>%
left_join(
rename(sc_results$setpoints, Setpoint = HomeEV),
by = "datetime"
) %>%
plot_ts(ylab = "Power (kW)") %>%
dyStackedRibbonGroup(unique(ev_sessions$Session)) %>%
dySeries("Setpoint", color = "red", strokePattern = "dashed", strokeWidth = 2)
ev_demand %>%
left_join(
rename(sc_results$setpoints, Setpoint = HomeEV),
by = "datetime"
) %>%
plot_ts(ylab = "Power (kW)", legend_show = "onmouseover") %>%
dyStackedRibbonGroup(unique(ev_sessions$Session)) %>%
dySeries("Setpoint", color = "red", strokePattern = "dashed", strokeWidth = 2)
pkgdown::build_article("smart-charging")
plot(sc_results)
plot(sc_results, sessions = ev_sessions)
pkgdown::build_article("smart-charging")
energy_data <- flextools::energy_profiles %>%
filter(isoweek(datetime) == 18, wday(datetime, week_start = 1) <= 5) %>%
mutate(
solar = solar*4,
building = building*2
)
head(energy_data)
ev_sessions <- readr::read_csv("sessions_smart_charging.csv") %>%
mutate_if(is.timepoint, with_tz, "Europe/Amsterdam")
ev_sessions %>% knitr::kable()
ev_demand <- ev_sessions %>%
get_demand(by = "Session")
ev_demand %>%
plot_ts(ylab = "Power demand (kW)", stackedGraph = T, fillGraph = T)
sc_results <- smart_charging(
ev_sessions,
opt_data = tibble(datetime = ev_demand$datetime, production = 0),
opt_objective = "grid",
method = "curtail",
window_days = 1,
window_start_hour = 6
)
scs <- sc_results$sessions
View(scs)
devtools::load_all(".")
sc_results <- smart_charging(
ev_sessions,
opt_data = tibble(datetime = ev_demand$datetime, production = 0),
opt_objective = "grid",
method = "curtail",
window_days = 1,
window_start_hour = 6
)
devtools::load_all(".")
sc_results <- smart_charging(
ev_sessions,
opt_data = tibble(datetime = ev_demand$datetime, production = 0),
opt_objective = "grid",
method = "curtail",
window_days = 1,
window_start_hour = 6
)
ev_sessions
devtools::load_all(".")
sc_results <- smart_charging(
ev_sessions,
opt_data = tibble(datetime = ev_demand$datetime, production = 0),
opt_objective = "grid",
method = "curtail",
window_days = 1,
window_start_hour = 6
)
devtools::load_all(".")
sc_results <- smart_charging(
ev_sessions,
opt_data = tibble(datetime = ev_demand$datetime, production = 0),
opt_objective = "grid",
method = "curtail",
window_days = 1,
window_start_hour = 6, include_log = T
)
dySeries("solar", "PV production", "orange") %>%
dySeries("price_imported", "Imported APX price", axis = "y2", color = "red", strokePattern = "dashed", strokeWidth = 2) %>%
dySeries("price_exported","Exported fixed price",  axis = "y2", color = "green", strokePattern = "dashed", strokeWidth = 2)
energy_data %>%
select(
datetime, solar, building, price_imported, price_exported
) %>%
left_join(ev_demand, by = "datetime") %>%
plot_ts(strokeWidth = 2) %>%
dyAxis("y", "Power (kW)") %>%
dyAxis("y2", "Price (€/kWh)") %>%
dyStackedRibbonGroup(c("HomeEV","building"), color = c("purple", "navy"))
energy_data <- flextools::energy_profiles %>%
filter(isoweek(datetime) == 18, wday(datetime, week_start = 1) <= 5) %>%
mutate(
solar = solar*4,
building = building*2
)
head(energy_data)
ev_sessions <- readr::read_csv("sessions_smart_charging.csv") %>%
mutate_if(is.timepoint, with_tz, "Europe/Amsterdam")
ev_sessions %>% knitr::kable()
ev_demand <- get_demand(ev_sessions)
ev_demand %>%
plot_ts(ylab = "Power demand (kW)", fillGraph = T, strokeWidth = 2)
energy_data %>%
left_join(ev_demand, by = "datetime") %>%
select(-starts_with("price")) %>%
plot_ts(ylab = "Power (kW)", strokeWidth = 2) %>%
dySeries("solar", "PV production", "orange") %>%
dyStackedRibbonGroup(c("HomeEV","building"), color = c("purple", "navy"))
energy_data %>%
select(
datetime, solar, building, price_imported, price_exported
) %>%
left_join(ev_demand, by = "datetime") %>%
plot_ts(strokeWidth = 2) %>%
dyAxis("y", "Power (kW)") %>%
dyAxis("y2", "Price (€/kWh)") %>%
dyStackedRibbonGroup(c("HomeEV","building"), color = c("purple", "navy"))
dySeries("solar", "PV production", "orange") %>%
dySeries("price_imported", "Imported APX price", axis = "y2", color = "red", strokePattern = "dashed", strokeWidth = 2) %>%
dySeries("price_exported","Exported fixed price",  axis = "y2", color = "green", strokePattern = "dashed", strokeWidth = 2)
energy_data %>%
select(
datetime, solar, building, price_imported, price_exported
) %>%
left_join(ev_demand, by = "datetime")
energy_data %>%
select(
datetime, solar, building, price_imported, price_exported
) %>%
left_join(ev_demand, by = "datetime") %>%
plot_ts(strokeWidth = 2)
energy_data %>%
select(
datetime, solar, building, price_imported, price_exported
) %>%
left_join(ev_demand, by = "datetime") %>%
plot_ts(strokeWidth = 2) %>%
dyAxis("y", "Power (kW)") %>%
dyAxis("y2", "Price (€/kWh)") %>%
dyStackedRibbonGroup(c("HomeEV","building"), color = c("purple", "navy")) %>%
dySeries("solar", "PV production", "orange") %>%
dySeries("price_imported", "Imported APX price", axis = "y2", color = "red", strokePattern = "dashed") %>%
dySeries("price_exported","Exported fixed price",  axis = "y2", color = "green", strokePattern = "dashed")
pkgdown::build_article("smart-chargin")
pkgdown::build_article("smart-charging")
View(ev_demand)
pkgdown::build_article("smart-charging")
pkgdown::build_article("smart-charging")
pkgdown::build_article("smart-charging")
pkgdown::build_article("smart-charging")
library(pkgdown)
build_reference()
build_reference()
build_reference()
build_reference()
build_reference()
df
devtools::load_all(".")
build_reference()
build_reference()
devtools::load_all(".")
build_reference()
build_reference()
build_reference()
library(flextools)
build_reference()
pkgdown::build_reference()
?flextools::plot_energy_cost
df <- dplyr::select(
energy_profiles,
datetime,
production = solar,
consumption = building,
price_imported,
price_exported
)
df <- dplyr::slice_head(df, n = 300)
head(df)
plot_energy_cost(df)
pkgdown::build_site()
pkgdown::build_reference()
evsim:::expand_session
devtools::check_win_devel()
pkgdown::preview_site()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::load_all(".")
library(dplyr)
sessions <- evsim::california_ev_sessions_profiles %>%
slice_head(n = 50) %>%
evsim::adapt_charging_features(time_resolution = 15)
sessions_demand <- evsim::get_demand(sessions, resolution = 15)
sessions_demand
# Don't require any other variable than datetime, since we don't
# care about local generation (just peak shaving objective)
opt_data <- tibble(
datetime = sessions_demand$datetime,
production = 0
)
sc_results <- smart_charging(
sessions, opt_data, opt_objective = "grid", method = "curtail",
window_days = 1, window_start_hour = 6,
responsive = list(Workday = list(Worktime = 0.9)),
energy_min = 0.5
)
devtools::load_all(".")
sc_results <- smart_charging(
sessions, opt_data, opt_objective = "grid", method = "curtail",
window_days = 1, window_start_hour = 6,
responsive = list(Workday = list(Worktime = 0.9)),
energy_min = 0.5
)
sc_results
library(evsim)
evsim::california_ev_sessions_profiles
